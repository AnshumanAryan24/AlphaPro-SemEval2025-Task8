Question,Rewritten Question,Code,Answer Type,Generated Answer,Expected Answer
Is the person with the highest net worth self-made?,Is the individual listed with the highest finalWorth also marked as self-made in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_worth_individual = db.loc[db[""finalWorth""] == db[""finalWorth""].max()]
    is_self_made = max_worth_individual[""selfMade""].bool()

    return is_self_made
",bool,TRUE,TRUE
Does the youngest billionaire identify as male?,,,,ERROR,TRUE
Is the city with the most billionaires in the United States?,,,,ERROR,TRUE
Is there a non-self-made billionaire in the top 5 ranks?,Are there any non-self-made billionaires ranked in the top 5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for billionaires and top 5 rankings
    billionaires_top_5 = dataset[(dataset['selfMade'] == False) & (dataset['rank'] <= 5)]
    
    # Check if there are any such individuals
    result = not billionaires_top_5.empty
    
    return result
",bool,TRUE,TRUE
Does the oldest billionaire have a philanthropy score of 5?,Is the billionaire with the highest age having a philanthropy score of 5?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the row with the maximum age
    max_age_billionaire = db.loc[db[""age""] == db[""age""].max()]
    
    # Check if the philanthropy score of this individual is 5
    is_philanthropy_score_5 = max_age_billionaire[""philanthropyScore""].eq(5).bool()
    
    return is_philanthropy_score_5
",bool,FALSE,FALSE
What is the age of the youngest billionaire?,What is the age of the youngest individual listed in the Forbes dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the minimum age value
    min_age = dataset[""age""].min()
    
    return min_age
",float64,19,19
How many billionaires are there from the 'Technology' category?,How many entries in the dataset have a category value of 'Technology'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    count_entries = dataset[dataset[""category""] == ""Technology""].shape[0]
    
    return count_entries
",uint32,343,343
What's the total worth of billionaires in the 'Automotive' category?,What is the aggregate final worth of all billionaires categorized as 'Automotive'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only those with category 'Automotive'
    automotive_billionaires = dataset[dataset['category'] == 'Automotive']
    
    # Sum up the final worth of all rows in the filtered dataset
    aggregate_final_worth = automotive_billionaires['finalWorth'].sum()
    
    return aggregate_final_worth
",uint32,583600,583600
How many billionaires have a philanthropy score above 3?,What is the count of billionaires with a philanthropy score greater than 3?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    count_billionaires = dataset[(dataset['finalWorth'] > 1e+09) & (dataset['philanthropyScore'] > 3)].shape[0]
    return count_billionaires
",int64,0,25
What's the rank of the wealthiest non-self-made billionaire?,What is the rank of the billionaire with the highest final worth who is not self-made?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out billionaires who are not self-made
    not_self_made_billionaires = dataset[dataset[""selfMade""] == False]
    
    # Find the one with the highest final worth
    max_worth_individual = not_self_made_billionaires.loc[not_self_made_billionaires[""finalWorth""].idxmax()]
    
    # Return the rank of this individual
    answer = max_worth_individual[""rank""]
    
    return answer
",uint16,3,3
Which category does the richest billionaire belong to?,Into which category does the billionaire with the highest finalWorth fall?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_worth_individual = dataset.loc[dataset[""finalWorth""] == dataset[""finalWorth""].max()]
    category_of_rich_person = max_worth_individual[""category""].values[0]

    return category_of_rich_person
",category,Automotive,Automotive
What's the country of origin of the oldest billionaire?,In which country was the oldest billionaire born?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the row with the minimum age
    oldest_billionaire = dataset.loc[dataset['age'].idxmin()]
    
    # Return the country of the oldest billionaire
    return oldest_billionaire['country']
",string,,United States
What's the gender of the billionaire with the highest philanthropy score?,,,,ERROR,M
What's the source of wealth for the youngest billionaire?,What is the source of wealth for the youngest person listed in the Forbes dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the index of the youngest person
    youngest_index = dataset[""age""].idxmin()
    
    # Retrieve the source of wealth for the youngest person
    youngest_source_of_wealth = dataset.loc[youngest_index, ""source""]
    
    return youngest_source_of_wealth
",string,drugstores,drugstores
What is the title of the billionaire with the lowest rank?,Which title is held by the billionaire who has the lowest rank?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter for billionaires
    billionaires = db[db['finalWorth'] > 0]
    
    # Find the billionaire with the lowest rank
    lowest_rank_billionaire = billionaires.loc[billionaires['rank'] == billionaires['rank'].min()]
    
    # Return the title of this individual
    return lowest_rank_billionaire['title'].values[0]

",string,CEO,
List the top 3 countries with the most billionaires.,Which are the three countries having the highest number of billionaires?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting country and rank columns
    country_rank = db[['country', 'rank']]
    
    # Group by country and count the number of billionaires in each country
    country_billionaire_count = country_rank.groupby('country').count().sort_values(by='rank', ascending=False)
    
    # Get top 3 countries with the highest number of billionaires
    top_countries = country_billionaire_count.head(3).index.tolist()
    
    return top_countries
",list of string,"['United States', 'China', 'India']","['United States', 'China', 'India']"
List the top 2 most common sources of wealth for billionaires.,What are the two most frequent sources of wealth among the billionaires listed in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the source column from the dataset
    source_column = dataset['source']
    
    # Get the value counts of the source column to find the most frequent sources
    value_counts = source_column.value_counts().head(2)
    
    # Convert the index of the value_counts Series to a list
    most_frequent_sources = value_counts.index.tolist()
    
    return most_frequent_sources
",list of (category),"['real estate', 'investments']","['real estate', 'investments']"
List the 4 cities where the four youngest billionaires live.,,,,ERROR,"['', 'Los Angeles', 'Jiaozuo', 'Oslo']"
List the 4 categories with the fewest billionaires.,,,,ERROR,"['Telecom', 'Logistics', 'Sports', 'Gambling & Casinos']"
List the 2 countries with the least number of billionaires. If there are more than two with the same number take the first two alphabetically.,"Which are the two countries with the fewest billionaires? If multiple countries have the same number, return the first two alphabetically.","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for rows where selfMade is True to consider only billionaires
    billionaire_data = dataset[dataset['selfMade'] == True]
    
    # Group by country and count the number of billionaires in each country
    country_billionaire_count = billionaire_data.groupby('country')['personName'].count().reset_index(name='billionaire_count')
    
    # Sort the countries based on the number of billionaires and then alphabetically
    sorted_countries = country_billionaire_count.sort_values(by=['billionaire_count', 'country']).head(2)
    
    # Extract the top two countries
    top_two_countries = sorted_countries['country'].tolist()
    
    return top_two_countries
",list of string,"['Peru', 'Portugal']","['Algeria', 'Andorra']"
List the top 5 ranks of billionaires who are not self-made.,"What are the ranks of billionaires who are not self-made, sorted in descending order, and list the top 5?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out non-self-made billionaires
    non_self_made_billionaires = dataset[~dataset['selfMade']]
    
    # Sort the filtered dataset by rank in descending order and get the top 5 ranks
    top_ranks = non_self_made_billionaires['rank'].sort_values(ascending=False).head(5).tolist()
    
    return top_ranks
",list of uint16,"[2578, 2578, 2578, 2578, 2578]","[3, 10, 14, 16, 18]"
List the youngest 3 ages of billionaires who have a philanthropy score of 5.,What are the ages of the three youngest billionaires who have a philanthropy score of 5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only those with a philanthropy score of 5
    filtered_data = dataset[dataset['philanthropyScore'] == 5.0]
    
    # Sort the data by age in ascending order
    sorted_data = filtered_data.sort_values(by='age')
    
    # Select the top three youngest individuals
    youngest_three = sorted_data.head(3)
    
    # Extract the ages of these individuals
    ages = youngest_three['age'].tolist()
    
    return ages
",list of float64,"[48.0, 83.0, 83.0]","[48.0, 83.0, 83.0]"
List the highest 6 final worth values of billionaires in the 'Technology' category.,What are the top 6 highest final worth values for billionaires in the Technology category?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only billionaires in the Technology category
    tech_billionaires = dataset[(dataset['category'] == 'Technology') & (dataset['finalWorth'] > 0)]
    
    # Sort the filtered dataset by finalWorth in descending order and get the top 6 values
    top_6_worth = tech_billionaires.nlargest(6, 'finalWorth')['finalWorth'].tolist()
    
    return top_6_worth
",list of uint32,"[171000, 129000, 111000, 107000, 106000, 91400]","[171000, 129000, 111000, 107000, 106000, 91400]"
List the top 4 ranks of female billionaires.,,,,ERROR,"[14, 18, 21, 30]"
List the top 2 final worth values of billionaires in the 'Automotive' category.,,,,ERROR,"[219000, 44800]"
Did any children below the age of 18 survive?,Were there any survivors who were children under the age of 18?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only survivors
    survivors = dataset[dataset[""Survived""]]
    
    # Further filter to include only those who were children under the age of 18
    children_survivors = survivors[survivors[""Age""] < 18]
    
    # Check if there are any entries in this filtered dataset
    is_there_any_child_survivor = not children_survivors.empty
    
    return is_there_any_child_survivor
",bool,TRUE,TRUE
Were there any passengers who paid a fare of more than $500?,Did any passengers pay a fare exceeding $500?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    exceeded_fare = dataset.loc[dataset[""Fare""] > 500]
    is_any_passenger = not exceeded_fare.empty

    return is_any_passenger
",bool,TRUE,TRUE
Is every passenger's name unique?,Are all the names of the passengers unique?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting unique names from the dataset
    unique_names = db['Name'].drop_duplicates()

    # Checking if the length of unique names is equal to the total number of names
    are_all_names_unique = len(unique_names) == len(db)

    return are_all_names_unique
",bool,TRUE,TRUE
Were there any female passengers in the 3rd class who survived?,Did any female passengers in the 3rd class survive?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Load the data into a DataFrame
    df = pd.DataFrame(db)
    
    # Filter the dataframe for female passengers in 3rd class
    third_class_females = df[(df['Pclass'] == 3) & (df['Sex'] == 'female') & (df['Survived'] == True)]
    
    # Check if there are any such passengers
    did_any_survive = not third_class_females.empty
    
    return did_any_survive
",bool,TRUE,TRUE
How many unique passenger classes are present in the dataset?,What is the total number of distinct passenger classes available in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_classes = dataset['Pclass'].nunique()
    
    return unique_classes
",int64,3,3
What's the maximum age of the passengers?,What is the highest age recorded among the passengers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_age = dataset[""Age""].max()
    
    return max_age
",float64,80,80
How many passengers boarded without any siblings or spouses?,How many passengers did not board with any siblings or spouses?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Count the number of passengers who did not board with any siblings or spouses
    count_no_siblings = dataset[dataset[""Siblings_Spouses Aboard""] == 0][""Siblings_Spouses Aboard""].count()
    
    return count_no_siblings
",int64,604,604
"On average, how much fare did the passengers pay?",What was the average fare paid by the passengers on the Titanic?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    average_fare = dataset[""Fare""].mean()
    
    return average_fare
",float64,32.30542018,32.31
Which passenger class has the highest number of survivors?,In which passenger class do the maximum number of passengers survive?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include survivors
    survivors = db[db['Survived'] == True]
    
    # Group by 'Pclass' and count the number of survivors in each class
    survival_counts = survivors.groupby('Pclass').size()
    
    # Find the passenger class with the maximum number of survivors
    max_class = survival_counts.idxmax()
    
    return max_class

",uint8,1,1
What's the most common gender among the survivors?,Which gender appears most frequently among the passengers who survived?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    survived_passengers = dataset[dataset[""Survived""]]
    gender_counts = survived_passengers[""Sex""].value_counts()
    most_common_gender = gender_counts.idxmax()

    return most_common_gender
",string,female,female
"Among those who survived, which fare range was the most common: (0-50, 50-100, 100-150, 150+)?",What was the most frequent fare range among passengers who survived?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only survivors
    survivors = dataset[dataset[""Survived""]]
    
    # Group by fare and count occurrences
    fare_counts = survivors.groupby(""Fare"").size()
    
    # Get the most frequent fare range
    most_frequent_fare = fare_counts.idxmax()
    
    return most_frequent_fare
",string,13,0-50
"What's the most common age range among passengers: (0-18, 18-30, 30-50, 50+)?","Which age range (0-18, 18-30, 30-50, 50+) has the highest frequency among passengers?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Define age ranges and their labels
    bins = [0, 18, 30, 50, float('inf')]
    labels = ['0-18', '18-30', '30-50', '50+']
    
    # Cut the Age column into these defined age ranges
    dataset['Age Range'] = pd.cut(dataset['Age'], bins=bins, labels=labels)
    
    # Group by the new Age Range column and count occurrences
    age_range_counts = dataset.groupby('Age Range').size()
    
    # Find the age range with the highest frequency
    max_age_range = age_range_counts.idxmax()
    
    return max_age_range

",string,18-30,18-30
Name the top 3 passenger classes by survival rate.,Which are the three passenger classes with the highest survival rates?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by Pclass and calculate the mean of Survived to get survival rate for each class
    survival_rates = dataset.groupby('Pclass')['Survived'].mean().sort_values(ascending=False)
    
    # Get the top three passenger classes based on survival rates
    top_three_classes = survival_rates.head(3).index.tolist()
    
    return top_three_classes
",list of uint8,"[1, 2, 3]","[1, 2, 3]"
"Could you list the 3 fare ranges present in the dataset with the least survivors: (0-50, 50-100, 100-150, 150+)?",,,,ERROR,"['50-100', '150+', '100-150']"
"What are the top 4 age ranges ('30-50', '18-30', '0-18', '50+') with the highest number of survivors?",,,,ERROR,"['30-50', '18-30', '0-18', '50+']"
What are the top 2 genders by average fare paid?,Which are the two genders with the highest average fare paid?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Calculate the mean fare for each gender and sort them in descending order
    avg_fare_by_gender = db.groupby('Sex')['Fare'].mean().sort_values(ascending=False)
    
    # Get the top two genders based on average fare
    top_two_genders = list(avg_fare_by_gender.head(2).index)

    return top_two_genders
",list of (type),"['female', 'male']","['female', 'male']"
What are the oldest 3 ages among the survivors?,Which are the three highest ages among individuals who survived?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only survivors
    survivors = dataset[dataset[""Survived""] == True]
    
    # Sort the survivors by age in descending order and get the top three ages
    top_three_ages = survivors.sort_values(by='Age', ascending=False).head(3)['Age'].tolist()
    
    return top_three_ages
",list of float64,"[80.0, 63.0, 63.0]","[80, 63, 63]"
Which are the top 4 fares paid by survivors?,What are the four highest fare amounts paid by survivors?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only survivors
    survivors = dataset[dataset[""Survived""]]
    
    # Sort the survivors by Fare in descending order and select the top 4
    top_fares = survivors.sort_values(by='Fare', ascending=False).head(4)['Fare'].tolist()
    
    return top_fares
",list of float64,"[512.3292, 512.3292, 512.3292, 263.0]","[512.329, 512.329, 512.329, 263]"
Could you list the youngest 3 ages among the survivors?,What are the ages of the three youngest survivors?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only survivors
    survivors = dataset[dataset[""Survived""] == True]
    
    # Sort the survivors by age in ascending order
    youngest_survivors = survivors.sort_values(by='Age')
    
    # Select the ages of the three youngest survivors
    youngest_ages = list(youngest_survivors['Age'].head(3))
    
    return youngest_ages
",list of float64,"[1.0, 1.0, 1.0]","[1, 1, 1]"
Which are the lowest 4 fares among those who didn't survive?,What are the four smallest Fare values for passengers who did not survive?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only passengers who did not survive
    not_survived = dataset[dataset[""Survived""] == False]
    
    # Extract the Fare values for these passengers
    fares = not_survived[""Fare""]
    
    # Get the four smallest Fare values
    smallest_fares = fares.nsmallest(4).tolist()
    
    return smallest_fares
",list of float64,"[0.0, 0.0, 0.0, 0.0]","[0, 0, 0, 0]"
Is the average age of the respondents above 30?,,,,ERROR,TRUE
Are there more single individuals than married ones in the dataset?,,,,ERROR,TRUE
Do the majority of respondents have a height greater than 170 cm?,,,,ERROR,TRUE
Is the most frequent hair color black?,,,,ERROR,FALSE
How many unique nationalities are present in the dataset?,,,,ERROR,13
What is the average gross annual salary?,,,,ERROR,56332.8172
How many respondents wear glasses all the time?,How many respondents indicated that they wear glasses all the time?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to find respondents who wear glasses all the time
    always_wear_glasses = dataset[dataset[""How often do you wear glasses? ðŸ‘“""] == ""all the time""]
    
    # Count the number of such respondents
    count_always_wear_glasses = len(always_wear_glasses)
    
    return count_always_wear_glasses
",int64,0,98
What's the median age of the respondents?,,,,ERROR,33
What is the most common level of studies achieved?,What level of studies has the highest frequency among the respondents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the column name for 'What is the maximum level of studies you have achieved? ðŸŽ“ (category)'
    study_column_name = [col for col in dataset.columns if ""What is the maximum level of studies you have achieved?"" in col][0]
    
    # Group by the study column and count occurrences
    study_counts = dataset.groupby(study_column_name).size()
    
    # Find the category with the maximum frequency
    max_frequency_study = study_counts.idxmax()
    
    return max_frequency_study
",category,Master,Master
Which body complexity has the least number of respondents?,,,,ERROR,Very thin
What's the most frequent eye color?,,,,ERROR,Brown
Which sexual orientation has the highest representation?,,,,ERROR,Heterosexual
List the top 3 most common areas of knowledge.,,,,ERROR,"['Computer Science', 'Business', 'Enginering & Architecture']"
List the bottom 3 hair lengths in terms of frequency.,,,,ERROR,"['Medium', 'Long', 'Bald']"
Name the top 5 civil statuses represented in the dataset.,,,,ERROR,"['Single', 'Married', 'In a Relationship', 'In a Relationship Cohabiting', 'Divorced']"
What are the 4 least common hair colors?,,,,ERROR,"['Red', 'Other', 'White', 'Blue']"
What are the top 4 maximum gross annual salaries?,,,,ERROR,"[500000.0, 360000.0, 300000.0, 300000.0]"
Name the 3 happiness values for the 3 unhappiest people in the happiness scale.,,,,ERROR,"[2, 2, 2]"
What are the 5 highest ages present in the dataset?,,,,ERROR,"[65, 62, 60, 60, 59]"
List the bottom 6 skin tone values based on frequency.,What are the six least frequent skin tone values present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'skin tone' column from the dataset
    skin_tone_values = dataset['What is your skin tone?'].value_counts().index.tolist()
    
    # Get the six least frequent values
    least_frequent_skin_tones = [skin_tone_values[i] for i in range(6) if i < len(skin_tone_values)]
    
    return least_frequent_skin_tones
",list of (uint8),"[3, 5, 4, 2, 1, 6]","[2, 1, 6, 0, 7, 8]"
Are there any trips with a total distance greater than 30 miles?,Does the dataset contain any taxi trips with a trip_distance greater than 30 miles?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    contains_large_trip = dataset['trip_distance'].gt(30).any()
    
    return contains_large_trip
",bool,FALSE,FALSE
Were there any trips that cost more than $100 in total?,Are there any entries in the dataset where the total_amount exceeds 100?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    exceeds_100 = db['total_amount'] > 100
    result = exceeds_100.any()
    
    return result
",bool,FALSE,FALSE
Is there any trip with more than 6 passengers?,Are there any trips that have more than 6 passengers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    has_more_than_six_passengers = dataset.query(""passenger_count > 6"").empty == False
    
    return has_more_than_six_passengers
",bool,FALSE,FALSE
Did all the trips use a payment type of either 1 or 2?,Were all the trips paid for using either payment type 1 or payment type 2?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract unique payment types from the dataset
    unique_payment_types = dataset['payment_type'].unique()
    
    # Check if all trips were paid using either payment type 1 or payment type 2
    is_all_trips_paid_type_1_or_2 = len(unique_payment_types) <= 2 and (1 in unique_payment_types) and (2 in unique_payment_types)
    
    return is_all_trips_paid_type_1_or_2
",bool,FALSE,FALSE
What is the maximum fare amount charged for a trip?,What is the highest fare amount recorded for any taxi trip?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_fare_amount = dataset[""fare_amount""].max()
    return max_fare_amount
",float64,75.25,75.25
How many unique pickup locations are in the dataset?,,,,ERROR,96
What is the average tip amount given by passengers?,What is the mean value of the tip amounts given by passengers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    mean_tip_amount = dataset['tip_amount'].mean()
    
    return mean_tip_amount
",float64,2.7366808,2.74
How many trips took place in the airport area?,,,,ERROR,99807
Which payment type is the most common in the dataset?,What is the payment type that occurs most frequently in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    from collections import Counter
    
    # Extract payment_type column data
    payment_types = db['payment_type']
    
    # Count the frequency of each payment type
    payment_type_counts = Counter(payment_types)
    
    # Get the most common payment type
    most_common_payment_type = payment_type_counts.most_common(1)[0][0]
    
    return most_common_payment_type
",uint8,1,1
Which vendor has the most trips recorded?,Which vendor recorded the highest number of trips?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract VendorID and count the number of trips for each vendor
    trip_counts = db['VendorID'].value_counts().reset_index()
    trip_counts.columns = ['VendorID', 'trip_count']
    
    # Get the vendor with the highest number of trips
    max_trips_vendor = trip_counts.loc[trip_counts['trip_count'] == trip_counts['trip_count'].max(), 'VendorID'].iloc[0]
    
    return max_trips_vendor
",string,2,2
What is the most common drop-off location?,,,,ERROR,236
On which date did the first recorded trip occur?,,,,ERROR,31-01-2023
Which are the top 2 most frequent pickup locations?,,,,ERROR,"[161, 237]"
Name the 4 most common rate codes used.,,,,ERROR,"[1, 2, 5, 4]"
list the 2 most frequent store and forward flags.,,,,ERROR,"['N', 'Y']"
Identify the top 4 payment types used by frequency,,,,ERROR,"[1, 2, 4, 3]"
Report the 4 highest toll amounts paid.,,,,ERROR,"[0, 0, 0, 0]"
list the top 3 longest trip distances,What are the three greatest trip distances recorded in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_three_distances = dataset.nlargest(3, 'trip_distance')['trip_distance'].tolist()
    return top_three_distances
",list of float64,"[19.83, 19.74, 19.68]","[19.83, 19.74, 19.68]"
Identify the 5 largest total amounts paid for trips.,What are the top five highest total_amounts paid for trips?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_five_highest_total_amounts = dataset.nlargest(5, 'total_amount')['total_amount'].tolist()
    return top_five_highest_total_amounts
",list of float64,"[80.0, 80.0, 80.0, 80.0, 79.55]","[80.0, 80.0, 80.0, 80.0, 80.0]"
Report the 6 highest fare amounts charged.,,,,ERROR,"[75.25, 74.4, 73.0, 73.0, 73.0, 73.0]"
Are there any complaints made in Brooklyn?,Were there any complaints recorded in the borough of Brooklyn?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    brooklyn_complaints = dataset.loc[dataset[""borough""] == ""Brooklyn""]
    return not brooklyn_complaints.empty
",bool,FALSE,TRUE
Do any complaints have 'Dog' as a descriptor?,Are there any complaints where 'Dog' appears in the descriptor field?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if 'descriptor' column exists in the dataset
    if 'descriptor' not in dataset.columns:
        raise ValueError(""Descriptor column does not exist in the dataset."")
    
    # Filter rows where descriptor contains 'Dog'
    dog_complaints = dataset.loc[dataset['descriptor'].str.contains('Dog', na=False)]
    
    # Check if there are any such rows
    has_dog_complaint = not dog_complaints.empty
    
    return has_dog_complaint
",bool,TRUE,TRUE
Were there any complaints raised in April?,Did any complaints occur in the month of April?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extracting relevant column for checking the month
    complaint_month = dataset['month_name']
    
    # Check if any complaints occurred in April
    did_complaint_occur_in_april = complaint_month.isin(['April']).any()
    
    return did_complaint_occur_in_april
",bool,TRUE,TRUE
Is the Mayor's office of special enforcement one of the agencies handling complaints?,Does the Mayor's office of special enforcement appear in the list of agencies handling complaints?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    agencies = dataset['agency'].unique()
    is_mayors_office_of_special_enforcement = 'Mayor\'s Office of Special Investigations' in agencies
    
    return is_mayors_office_of_special_enforcement
",bool,FALSE,TRUE
How many complaints have been made in Queens?,,,,ERROR,23110
What's the total number of unique agencies handling complaints?,How many distinct agencies are involved in handling complaints?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_agencies = dataset['agency'].nunique()
    
    return unique_agencies
",int64,22,22
How many complaints were raised at midnight?,,,,ERROR,14811
How many unique descriptors are present in the dataset?,,,,ERROR,1131
Which borough has the most complaints?,In which borough were the most complaints recorded?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by borough and count the number of complaints for each borough
    borough_complaint_counts = dataset.groupby('borough')['complaint_type'].count()
    
    # Find the borough with the maximum number of complaints
    most_complained_borough = borough_complaint_counts.idxmax()
    
    return most_complained_borough
",string,BROOKLYN,BROOKLYN
Which month sees the highest number of complaints?,,,,ERROR,July
Which weekday has the least complaints?,On which weekday were the fewest complaints received?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out any rows with missing values in the 'weekday_name' column
    valid_entries = dataset.dropna(subset=['weekday_name'])
    
    # Group by 'weekday_name' and count the number of complaints for each weekday
    complaint_counts_by_weekday = valid_entries.groupby('weekday_name')['complaint_type'].count().reset_index()
    
    # Find the weekday with the minimum number of complaints
    min_complaints_weekday = complaint_counts_by_weekday.loc[complaint_counts_by_weekday['complaint_type'] == complaint_counts_by_weekday['complaint_type'].min()]['weekday_name'].iloc[0]
    
    return min_complaints_weekday
",category,Sunday,Sunday
Which agency is least frequently handling complaints?,,,,ERROR,ACS
List the top 5 most frequent complaint types.,What are the top 5 most common complaint types reported?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the column name for 'complaint_type'
    complaint_type_column = [col for col in dataset.columns if 'complaint_type' in col][0]
    
    # Get the value counts of the complaint types
    complaint_counts = dataset[complaint_type_column].value_counts().head(5)
    
    # Return the index of the value counts as a list of categories
    return complaint_counts.index.tolist()
",list of (category),"['Noise - Residential', 'HEAT/HOT WATER', 'Illegal Parking', 'Blocked Driveway', 'Street Condition']","['Noise - Residential', 'HEAT/HOT WATER', 'Illegal Parking', 'Blocked Driveway', 'Street Condition']"
Which 4 agencies handle the most complaints?,,,,ERROR,"['NYPD', 'HPD', 'DOT', 'DSNY']"
Name the 2 least frequent descriptors for complaints by inverse alphabetical order.,What are the two least common descriptors for complaints sorted in reverse alphabetical order?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by descriptor and count occurrences
    descriptor_counts = dataset['descriptor'].value_counts()
    
    # Get the two least common descriptors
    least_common_descriptors = descriptor_counts.nsmallest(2).index.tolist()
    
    # Sort the descriptors in reverse alphabetical order
    least_common_descriptors.sort(reverse=True)
    
    return least_common_descriptors

",list of string,"['Telco Connection Blk', 'Summer Camp']","['Booting Company', 'Ready NY - Businesses', 'Animal']"
Mention the 2 most common weekdays for complaints.,Which are the two most frequent weekdays associated with complaints?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant column for counting weekday frequencies
    weekdays = dataset['weekday_name']
    
    # Count the frequency of each weekday
    weekday_counts = weekdays.value_counts()
    
    # Get the two most frequent weekdays
    top_two_weekdays = weekday_counts.head(2).index.tolist()
    
    return top_two_weekdays
",list of string,"['Tuesday', 'Monday']","['Tuesday', 'Monday']"
What are the top 4 hours with the most complaints?,Which are the four hours that have the highest number of complaints?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Count the number of complaints per hour
    complaint_counts_per_hour = dataset['hour'].value_counts().sort_values(ascending=False).head(4)

    # Extract the hours with the highest complaint counts
    top_hours = complaint_counts_per_hour.index.tolist()

    return top_hours
",list of (int64),"[0, 12, 10, 11]","[0, 12, 10, 11]"
State the 3 lowest unique complaint keys.,What are the three least frequent unique complaint keys?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant column for counting frequencies
    complaint_keys = dataset['unique_key']
    
    # Counting the frequency of each unique key
    frequency_counts = complaint_keys.value_counts().reset_index()
    frequency_counts.columns = ['unique_key', 'frequency']
    
    # Sorting by frequency in ascending order and selecting the top three least frequent keys
    least_frequent_keys = frequency_counts.nsmallest(3, 'frequency')['unique_key'].tolist()
    
    return least_frequent_keys
",list of (type),"[47755664, 52228259, 54432788]","[15628852, 15634748, 15634996]"
Which 2 hours see the least complaints?,,,,ERROR,"[6, 2]"
List the 6 highest complaint numbers from the dataset.,,,,ERROR,"[54954250, 54954040, 54952675, 54950924, 54950765, 54950581]"
Are all properties in the dataset located in the same neighbourhood?,Does the dataset contain properties that are all located in a single neighbourhood?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if all property entries belong to the same neighborhood
    unique_neighbourhoods = dataset['neighbourhood_cleansed'].nunique()
    
    is_all_in_single_neighbourhood = (unique_neighbourhoods == 1)
    
    return is_all_in_single_neighbourhood
",bool,FALSE,FALSE
Do all hosts verify their identity?,Are all hosts confirmed by their identity verification?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if all hosts have 'host_identity_verified' set to True
    all_verified = dataset[""host_identity_verified""].eq(""t"").all()
    
    return all_verified
",bool,FALSE,FALSE
Are all reviews_per_month values greater than 5?,Are there no reviews_per_month values less than or equal to 5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    reviews_per_month = dataset['reviews_per_month']
    result = not (reviews_per_month <= 5).any()
    
    return result
",bool,FALSE,FALSE
Are there any listings without a specified room type?,,,,ERROR,FALSE
How many unique neighbourhoods are there in the dataset?,,,,ERROR,563
How many listings don't have a valid price?,,,,ERROR,0
How many properties have received the worst possible (0-5) review score for communication?,,,,ERROR,6
What is the maximum number of bedrooms a property has in this dataset?,What is the highest value recorded for the number of bedrooms in this dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_bedrooms = dataset[""bedrooms""].max()
    return max_bedrooms
",float64,22,22
Which neighbourhood has the most listings?,,,,ERROR,Westminster
What is the most common room type in the listings?,,,,ERROR,Entire home/apt
What property type has the most listings?,,,,ERROR,Entire rental unit
Which host verification method is the least used?,,,,ERROR,photographer
List the top 3 neighbourhoods with the most listings.,Can you provide a list of the top 3 neighbourhoods that have the highest number of listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by 'neighbourhood_cleansed' and count the number of listings for each neighbourhood
    neighborhood_counts = dataset.groupby('neighbourhood_cleansed').size().reset_index(name='counts')
    
    # Sort the neighborhoods based on the counts in descending order
    sorted_neighborhoods = neighborhood_counts.sort_values(by='counts', ascending=False)
    
    # Select top 3 neighborhoods
    top_3_neighborhoods = sorted_neighborhoods.head(3)['neighbourhood_cleansed'].tolist()
    
    return top_3_neighborhoods
",list of category,"['Westminster', 'Tower Hamlets', 'Hackney']","['Westminster', 'Tower Hamlets', 'Hackney']"
Which are the top 4 most common property types?,What are the four most frequent types of properties listed in the London dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    property_types = dataset['property_type'].value_counts().index[:4]
    return list(property_types)
",list of string,"['Entire rental unit', 'Private room in rental unit', 'Private room in home', 'Entire condo']","['Entire rental unit', 'Private room in rental unit', 'Private room in home', 'Entire condo']"
List the 2 most common host verification methods.,,,,ERROR,"['phone', 'email']"
Which are the 2 most preferred room types?,What are the two most common room types offered in the listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'room_type' column from the dataset
    room_types = dataset['room_type']
    
    # Get the value counts of each room type
    room_type_counts = room_types.value_counts().index.tolist()
    
    # Return the top two most common room types
    return room_type_counts[:2]
",list of string,"['Entire home/apt', 'Private room']","['Entire home/apt', 'Private room']"
What are the top 3 highest review scores for location?,,,,ERROR,"[5.0, 5.0, 5.0]"
What are the 4 most common number of bedrooms in properties?,Which are the most frequent numbers of bedrooms found in properties?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract bedroom information
    bedrooms = dataset['bedrooms'].dropna().astype(int)
    
    # Get the most frequent values
    most_frequent_bedrooms = bedrooms.value_counts().index.tolist()
    
    return most_frequent_bedrooms
",list of int64,"[1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 22, 11, 16]","[1.0, 2.0, 3.0, 4.0]"
What are the 5 highest counts of listings by a single host for entire homes?,,,,ERROR,"[288, 288, 288, 288, 288]"
List the 6 lowest review scores for communication.,,,,ERROR,"[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"
Are there players who have a greater overall score than their potential score?,,,,ERROR,FALSE
Are there any players who joined their current club before they were 18 years old?,,,,ERROR,TRUE
Are there any players whose preferred foot is left and are from a nationality that starts with 'B'?,,,,ERROR,TRUE
Are there any players who are taller than 6 feet and have an agility score above 90?,,,,ERROR,FALSE
What is the average overall score of players from France?,,,,ERROR,67.861432
How many unique clubs are there in the dataset?,,,,ERROR,683
What is the highest value (in â‚¬) of a player in the dataset?,,,,ERROR,105500000
How many players have the position 'ST'?,,,,ERROR,414
What is the most common nationality in the dataset?,,,,ERROR,England
What is the most common preferred foot amongst players?,,,,ERROR,Right
Which club has the most players in the dataset?,,,,ERROR,Crystal Palace
What is the most common position of players in the dataset?,,,,ERROR,SUB
Which are the top 5 nationalities in terms of the average overall score of their players?,,,,ERROR,"['Tanzania', 'Syria', 'Mozambique', 'Chad', 'Central African Rep.']"
Which are the top 3 clubs in terms of the total value (in â‚¬) of their players?,,,,ERROR,"['Liverpool', 'Manchester City', 'Real Madrid']"
Which are the bottom 4 nationalities in terms of the average agility of their players?,,,,ERROR,"['Macau', 'Andorra', 'Moldova', 'Liechtenstein']"
Which are the top 6 clubs in terms of the average potential score of their players?,,,,ERROR,"['FC Bayern MÃ¼nchen', 'Real Madrid', 'FC Barcelona', 'Paris Saint-Germain', 'Juventus', 'Manchester City']"
What are the top 3 overall scores in the dataset?,,,,ERROR,"[93, 92, 91]"
What are the bottom 5 potential scores in the dataset?,,,,ERROR,"[48, 48, 49, 50, 50]"
What are the top 4 values (in â‚¬) of players in the dataset?,,,,ERROR,"[105500000, 90000000, 87000000, 80000000]"
What are the top 2 wages (in â‚¬) of players in the dataset?,,,,ERROR,"[560000, 370000]"
There are no tornadoes that resulted in more than 500 injuries.,Did any tornado event cause more than 500 injuries?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    did_any_tornado_exceed_injuries = (dataset['inj'] > 500).any()
    
    return did_any_tornado_exceed_injuries
",bool,TRUE,TRUE
All tornadoes in the dataset occurred in the 21st century.,Did all the recorded tornadoes in the dataset occur within the 21st century?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'date' column from the dataset
    dates = dataset['date']
    
    # Convert the dates to year values
    years = dates.dt.year
    
    # Check if all tornadoes occurred within the 21st century (years >= 2001)
    is_21st_century = years >= 2001
    
    # Use all() to check if all elements in the series are True
    result = is_21st_century.all()
    
    return result
",bool,FALSE,FALSE
No tornado has a length greater than 100 miles.,Are there no tornado records with a length exceeding 100 miles?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there are any records with length exceeding 100 miles
    excessive_length_records = dataset[dataset[""len""] > 100]
    
    # Return True if no such records exist, otherwise False
    return len(excessive_length_records) == 0
",bool,FALSE,TRUE
There are no tornadoes that resulted in more than 100 fatalities.,Did any tornado result in more than 100 fatalities?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there are any tornadoes that resulted in more than 100 fatalities
    did_any_tornado_result_in_more_than_100_fatalties = dataset.loc[dataset[""fat""] > 100].empty == False
    
    return did_any_tornado_result_in_more_than_100_fatalties
",bool,TRUE,TRUE
How many unique states are represented in the dataset?,What is the total number of distinct states represented in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    distinct_states = dataset['st'].nunique()
    
    return distinct_states
",int64,53,53
What is the highest magnitude of tornado recorded in the dataset?,What is the maximum value of the magnitude attribute recorded in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_magnitude = dataset[""mag""].max()
    
    return max_magnitude
",int64,5,5
What is the longest length of a tornado path in the dataset?,What is the maximum length recorded for any tornado path in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_length = dataset['len'].max()
    return max_length
",float64,234.7,234.7
What is the maximum number of injuries caused by a single tornado?,What is the highest value of inj caused by a single tornado?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_injuries = dataset.loc[dataset['inj'] == dataset['inj'].max()]['inj'].values[0]
    
    return max_injuries
",uint16,1740,1740
Which state has experienced the most tornadoes?,What is the state that has recorded the highest number of tornadoes?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out any rows with missing values in 'st' column
    valid_states = dataset.dropna(subset=['st'])
    
    # Group by state and count the number of tornadoes for each state
    state_tornado_counts = valid_states['st'].value_counts().reset_index()
    state_tornado_counts.columns = ['state', 'count']
    
    # Get the state with the maximum count of tornadoes
    max_state = state_tornado_counts.loc[state_tornado_counts['count'] == state_tornado_counts['count'].max(), 'state'].iloc[0]
    
    return max_state
",string,TX,TX
In which month do most tornadoes occur?,,,,ERROR,5
On what date did the most destructive tornado (by injuries) occur?,What was the date of occurrence for the tornado that caused the maximum number of injuries?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_injuries_tornado = dataset.loc[dataset[""inj""] == dataset[""inj""].max()]
    occurrence_date = max_injuries_tornado[""date""].iloc[0]

    return occurrence_date
",datetime64[us],1979-04-10 00:00:00+00:00,10-04-1979 00:00
On what date did the longest tornado (by path length) occur?,,,,ERROR,22-03-1953 00:00
Which are the top 5 states with the highest average tornado magnitude?,What are the five states with the highest average tornado magnitude?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by state and calculate the mean magnitude for each state
    state_magnitude_mean = dataset.groupby('st')['mag'].mean().reset_index()
    
    # Sort the states based on their average magnitude in descending order
    sorted_states = state_magnitude_mean.sort_values(by='mag', ascending=False)
    
    # Select the top 5 states
    top_5_states = sorted_states.head(5)['st'].tolist()
    
    return top_5_states
",list of string,"['AR', 'KY', 'VT', 'TN', 'MS']","[AR, KY, VT, TN, MS]"
Which are the top 2 states with the most tornado-related injuries? If in a tie then select alphabetically. ,What are the two states with the highest number of tornado-related injuries when sorted alphabetically in case of a tie?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out any rows where injuries (inj) are zero as they do not contribute to the count
    filtered_data = dataset[dataset['inj'] > 0]
    
    # Group by state ('st') and sum the number of injuries ('inj')
    state_injury_counts = filtered_data.groupby('st')['inj'].sum().reset_index()
    
    # Sort the states based on the number of injuries in descending order
    sorted_states = state_injury_counts.sort_values(by='inj', ascending=False)
    
    # Get top two states or all states if there are less than two, sorted alphabetically for ties
    top_two_states = sorted_states['st'].head(2).sort_values().tolist()
    
    return top_two_states
",list of string,"['TX', 'AL']","[TX, AL]"
Which are the top 4 states with the most tornado-related fatalities? If you find a tie select alphabetically.,List the top 4 states alphabetically by name that have experienced the highest number of tornado-related fatalities.,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by state and sum the fat (fatality) column to get total fatalities per state
    state_fatality_counts = dataset.groupby('st')['fat'].sum().reset_index()
    
    # Sort the states based on the total fatalities in descending order
    sorted_states = state_fatality_counts.sort_values(by='fat', ascending=False)
    
    # Select top 4 states alphabetically from the sorted list
    top_4_states = sorted_states.head(4).sort_values(by='st').reset_index(drop=True)['st'].tolist()
    
    return top_4_states
",list of string,"['TX', 'MS', 'OK', 'AL']","[AL, TX, MS, OK]"
Which are the bottom 2 states in terms of the average tornado path length?,What are the two states with the shortest average tornado path length?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by state and calculate the mean length of tornado paths for each state
    avg_lengths = dataset.groupby('st')['len'].mean().reset_index()
    
    # Sort the states based on the average path length in ascending order
    sorted_avg_lengths = avg_lengths.sort_values(by='len')
    
    # Get the top two states with the shortest average tornado path length
    top_two_states = sorted_avg_lengths.head(2)['st'].tolist()
    
    return top_two_states
",list of string,"['AK', 'VI']","[AK, VI]"
What are the top 3 number of injuries caused by tornadoes in the dataset?,What are the top 3 values of injuries caused by tornadoes in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_3_injuries = dataset['inj'].nlargest(3).tolist()
    return top_3_injuries
",list of int64,"[1740, 1500, 1228]","[1740, 1500, 1228]"
What are the top 5 magnitudes of tornadoes in the dataset?,What are the five highest magnitudes of tornadoes recorded in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_five_magnitudes = dataset['mag'].nlargest(5).tolist()
    return top_five_magnitudes
",list of int64,"[5, 5, 5, 5, 5]","[5, 5, 5, 5, 5]"
What are the top 4 path lengths of tornadoes in the dataset?,What are the lengths of the four longest tornado paths in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by length in descending order
    sorted_dataset = dataset.sort_values(by='len', ascending=False)
    
    # Get the lengths of the four longest tornado paths
    longest_paths = sorted_dataset.head(4)['len'].tolist()
    
    return longest_paths
",list of float64,"[234.7, 217.8, 202.5, 202.1]","[234.7, 217.8, 202.5, 202.1]"
What are the top 6 number of fatalities caused by tornadoes in the dataset?,What are the six highest values of fatalities caused by tornadoes in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant column for fatalities
    fatalities = dataset['fat']
    
    # Get the six highest values of fatalities
    top_six_fatality_values = fatalities.nlargest(6).tolist()
    
    return top_six_fatality_values
",list of (int64),"[158, 116, 114, 94, 80, 72]","[158, 116, 114, 94, 80, 72]"
There were no days when the precipitation was greater than 5 inches.,,,,ERROR,FALSE
All recorded temperatures are above freezing point.,,,,ERROR,FALSE
There were no days when the snow depth was more than 10 inches.,Was it true that the snow depth never exceeded 10 inches on any recorded day?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the snow depth column from the dataset
    snow_depth = db['SNWD']
    
    # Check if any snow depth exceeds 10 inches
    exceeded_limit = snow_depth > 10
    
    # The result should be a boolean indicating if there was any day where snow depth exceeded 10 inches
    answer = exceeded_limit.any()
    
    return answer
",bool,TRUE,FALSE
There were no days when the maximum temperature was below freezing point.,Did all recorded days have a maximum temperature at or above the freezing point?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out any rows where TMAX is below the freezing point (32 degrees Fahrenheit)
    below_freezing_days = dataset[dataset['TMIN'] < 32]
    
    # Check if there are any days with a maximum temperature below freezing
    all_above_freezing = below_freezing_days.empty
    
    return all_above_freezing
",bool,FALSE,FALSE
What is the highest recorded precipitation in inches?,What is the maximum value recorded for precipitation in inches?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_precipitation = dataset[""PRCP""].max()
    
    return max_precipitation
",float64,8.28,8.28
What is the lowest minimum temperature recorded?,What is the minimum value of the lowest recorded temperature?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_temp = dataset['TMIN'].min()
    return min_temp
",float64,-15,-15
What is the highest maximum temperature recorded?,What is the peak recorded maximum temperature?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant column for TMAX from the dataset
    tmax_values = db[""TMAX""]
    
    # Finding the peak recorded maximum temperature
    peak_tmax = tmax_values.max()
    
    return peak_tmax
",float64,106,106
What is the deepest recorded snow depth in inches?,What is the maximum recorded SNWD value in inches?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_snwd_value = db[""SNWD""].max()
    
    return max_snwd_value
",float64,26,26
On which date was the highest precipitation recorded?,What is the date with the highest recorded precipitation?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns from the dataset
    relevant_data = db.loc[:, ['DATE', 'PRCP']]
    
    # Finding the date with the highest recorded precipitation
    max_precipitation_date = relevant_data.loc[relevant_data['PRCP'] == relevant_data['PRCP'].max(), 'DATE'].iloc[0]
    
    return max_precipitation_date
",datetime64[us],1882-09-23 00:00:00+00:00,1882-09-23
On which date was the lowest minimum temperature recorded?,Which is the date with the lowest recorded minimum temperature?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_temp_date = dataset.loc[dataset['TMIN'].idxmin()]['DATE']
    return min_temp_date
",datetime64[us],1934-02-09 00:00:00+00:00,09-02-1934
On which date was the highest maximum temperature recorded?,Which date has the highest recorded maximum temperature?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns from the dataset
    dates = db.loc[:, 'DATE']
    max_temperatures = db.loc[:, 'TMAX']
    
    # Finding the date with the highest recorded maximum temperature
    max_temp_date = dates[max_temperatures == max_temperatures.max()].iloc[0]
    
    return max_temp_date
",datetime64[us],1936-07-09 00:00:00+00:00,09-07-1936
On which date was the deepest snow depth recorded?,What is the date with the highest recorded SNWD value?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_snwd_date = db.loc[db['SNWD'] == db['SNWD'].max()]['DATE'].values[0]
    return max_snwd_date
",datetime64[us],1947-12-27T00:00:00.000000,27-12-1947
What are the dates of the top 5 highest recorded precipitation events?,Which are the dates corresponding to the top 5 highest recorded precipitation events?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns from the DataFrame
    precipitation_data = db[['DATE', 'PRCP']]
    
    # Sorting the data based on PRCP in descending order and selecting top 5 dates
    top_5_precipitation_dates = precipitation_data.nlargest(5, 'PRCP')['DATE'].tolist()
    
    return top_5_precipitation_dates
",list of datetime64[us],"[Timestamp('1882-09-23 00:00:00+0000', tz='UTC'), Timestamp('2007-04-15 00:00:00+0000', tz='UTC'), Timestamp('1977-11-08 00:00:00+0000', tz='UTC'), Timestamp('1903-10-09 00:00:00+0000', tz='UTC'), Timestamp('2021-09-01 00:00:00+0000', tz='UTC')]","[1882-09-23, 2007-04-15, 1977-11-08, 1903-10-09, 2021-09-01]"
What are the dates of the top 3 lowest minimum temperatures recorded?,Which are the dates corresponding to the top 3 lowest minimum temperatures recorded?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns
    temp_data = db[['DATE', 'TMIN']]
    
    # Sorting by TMIN in ascending order to get the lowest temperatures first
    sorted_temp_data = temp_data.sort_values(by='TMIN')
    
    # Selecting the top 3 dates with the lowest minimum temperatures
    top_3_dates = sorted_temp_data.head(3)['DATE'].tolist()
    
    return top_3_dates
",list of datetime64[us],"[Timestamp('1934-02-09 00:00:00+0000', tz='UTC'), Timestamp('1917-12-30 00:00:00+0000', tz='UTC'), Timestamp('1943-02-15 00:00:00+0000', tz='UTC')]","[1934-02-09, 1917-12-30, 1943-02-15]"
What are the dates of the top 4 highest maximum temperatures recorded?,Which are the dates corresponding to the top 4 highest maximum temperatures recorded?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns from the DataFrame
    max_temp_data = db[['DATE', 'TMAX']]
    
    # Sorting the data based on TMAX in descending order and selecting top 4 entries
    top_four_max_temperatures = max_temp_data.sort_values(by='TMAX', ascending=False).head(4)
    
    # Extracting the dates from the top four entries
    top_dates = top_four_max_temperatures['DATE'].tolist()
    
    return top_dates
",list of datetime64[us],"[Timestamp('1936-07-09 00:00:00+0000', tz='UTC'), Timestamp('1977-07-21 00:00:00+0000', tz='UTC'), Timestamp('1918-08-07 00:00:00+0000', tz='UTC'), Timestamp('2011-07-22 00:00:00+0000', tz='UTC')]","[1936-07-09, 1918-08-07, 1977-07-21, 2011-07-22]"
What are the dates of the top 2 deepest snow depth recorded?,,,,ERROR,"[1947-12-27, 1947-12-28]"
What are the 3 highest recorded precipitation events in inches?,Which are the three highest precipitation values recorded in inches?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by PRCP in descending order and take the top 3 values
    highest_precipitation = dataset.sort_values(by='PRCP', ascending=False).head(3)['PRCP'].tolist()
    
    return highest_precipitation
",list of float64,"[8.28, 7.57, 7.4]","[8.28, 7.57, 7.4]"
What are the 5 lowest minimum temperatures recorded?,Which are the five dates with the lowest minimum temperatures recorded?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by TMIN in ascending order and get the top 5 dates
    sorted_dataset = dataset.sort_values(by='TMIN').head(5)
    
    # Extract the 'DATE' values from the sorted dataset
    lowest_min_dates = sorted_dataset['DATE'].tolist()
    
    return lowest_min_dates
",list of float64,"[Timestamp('1934-02-09 00:00:00+0000', tz='UTC'), Timestamp('1917-12-30 00:00:00+0000', tz='UTC'), Timestamp('1943-02-15 00:00:00+0000', tz='UTC'), Timestamp('1934-02-08 00:00:00+0000', tz='UTC'), Timestamp('1917-12-31 00:00:00+0000', tz='UTC')]","[-15.0, -13.0, -8.0, -7.0, -7.0]"
What are the 4 highest maximum temperatures recorded?,Which are the top 4 highest temperatures recorded in UTC?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant column for temperatures
    temperatures = db['TMAX']
    
    # Get the top 4 highest temperatures
    top_temperatures = temperatures.nlargest(4)
    
    return list(top_temperatures)
",list of float64,"[106.0, 104.0, 104.0, 104.0]","[106.0, 104.0, 104.0, 104.0]"
What are the 2 deepest snow depth recorded in inches?,,,,ERROR,"[26.0, 25.0]"
Are there more than 20 unique clothing items in the dataset?,Does the dataset contain more than 20 distinct clothing items?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract unique clothing IDs from the dataset
    unique_clothing_ids = db['Clothing ID'].nunique()
    
    # Check if there are more than 20 distinct clothing items
    contains_more_than_20_distinct_items = (unique_clothing_ids > 20)
    
    return contains_more_than_20_distinct_items
",bool,TRUE,TRUE
Is the age of the reviewers above 50 years on average?,Is the average age of the reviewers older than 50 years?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    average_age = dataset[""Age""].mean()
    is_older_than_50 = average_age > 50

    return is_older_than_50
",bool,FALSE,FALSE
Do all reviews come from the same department?,Is it true that all reviews are associated with the same department?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the Department Name column from the DataFrame
    department_names = db['Department Name']
    
    # Check if all values in the 'Department Name' column are the same
    is_all_same_department = department_names.nunique() == 1
    
    return is_all_same_department
",bool,FALSE,FALSE
Are all products recommended?,,,,ERROR,FALSE
What is the average age of the reviewers?,What is the mean age of all the reviewers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    mean_age = dataset[""Age""].mean()

    return mean_age
",float64,43.19854381,43.19854381
What's the highest number of positive feedback received for a review?,What is the maximum value of positive feedback count for any review?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_positive_feedback_count = dataset[""Positive Feedback Count""].max()
    
    return max_positive_feedback_count
",uint8,122,122
What is the most common rating given by reviewers?,Which rating value is the most frequently given by reviewers?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant column from the DataFrame
    ratings = db['Rating']
    
    # Find the mode of the 'Rating' column
    most_frequent_rating = ratings.mode().iloc[0]
    
    return most_frequent_rating
",uint8,5,5
How many unique clothing items are there in the dataset?,,,,ERROR,1206
Which department has the most reviews?,What is the name of the department that received the highest number of reviews?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Merge all columns into a DataFrame
    df = pd.DataFrame(db)
    
    # Group by 'Department Name' and sum the 'Positive Feedback Count'
    department_reviews = df.groupby('Department Name')['Positive Feedback Count'].sum().reset_index()
    
    # Find the department with the maximum number of reviews
    max_reviews_department = department_reviews.loc[department_reviews['Positive Feedback Count'] == department_reviews['Positive Feedback Count'].max(), 'Department Name']
    
    # Return the name of the department that received the highest number of reviews
    return max_reviews_department.iloc[0]
",string,Tops,Tops
Which class of clothing is most commonly reviewed?,What is the most frequently reviewed class of clothing?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Count the frequency of each class name in the 'ClassName' column
    class_counts = dataset['Class Name'].value_counts()
    
    # Get the most frequently occurring class name
    most_frequent_class = class_counts.idxmax()

    return most_frequent_class
",category,Dresses,Dresses
Which division is most commonly mentioned in the reviews?,"In the reviews, which division name is mentioned most frequently?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extracting the review texts and their corresponding division names
    reviews = dataset['Review Text']
    divisions = dataset['Division Name']

    # Combining reviews with their respective division names into a list of tuples
    review_division_pairs = list(zip(reviews, divisions))

    # Counting the frequency of each division name mentioned in the reviews
    from collections import Counter
    division_counts = Counter(div_name for _, div_name in review_division_pairs)

    # Finding the division name with the highest frequency
    most_frequent_division = max(division_counts, key=division_counts.get)

    return most_frequent_division
",string,General,General
What is the most frequently reviewed clothing item? If you find a tie answer with row order.,"Which clothing item has the highest frequency of reviews? In case of a tie, provide the row with the lower numerical ID.","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by 'Title' and count the number of reviews for each item
    review_counts = dataset.groupby('Title')['Review Text'].count()
    
    # Find the title with the maximum review count
    max_reviews_title = review_counts.idxmax()
    
    return max_reviews_title

",string,Love it!,1078
Which are the 4 most reviewed categories in Department Name?,What are the four categories with the highest number of reviews in each Department?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by Department and Class Name, then count the number of reviews
    review_counts = dataset.groupby(['Department Name', 'Class Name']).size().reset_index(name='review_count')
    
    # Sort the grouped data by department and review_count in descending order
    sorted_reviews = review_counts.sort_values(by=['Department Name', 'review_count'], ascending=[True, False])
    
    # Get unique departments
    unique_departments = sorted_reviews['Department Name'].unique()
    
    answers = []
    for dept in unique_departments:
        department_data = sorted_reviews[sorted_reviews['Department Name'] == dept].head(4)
        class_names = list(department_data['Class Name'])
        answers.extend(class_names)
    
    return answers
",list of (category),"['Lounge', 'Swim', 'Sleep', 'Legwear', 'Dresses', 'Intimates', 'Pants', 'Blouses', 'Pants', 'Jeans', 'Skirts', 'Shorts', 'Knits', 'Blouses', 'Sweaters', 'Fine gauge', 'Jackets', 'Outerwear', 'Intimates', 'Dresses', 'Trend', 'Intimates', 'Dresses', 'Pants']","['Tops', 'Dresses', 'Bottoms', 'Intimate']"
Which are the top 2 most reviewed categories in Class Name?,,,,ERROR,"['Dresses', 'Knits']"
Which are the 2 most reviewed categories in Division Name?,,,,ERROR,"['General', 'General Petite']"
What are the 4 highest ratings given by reviewers?,,,,ERROR,"[5, 4, 3, 2]"
What are the 5 oldest Ages of reviewers?,What are the ages of the five oldest reviewers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Assuming ""oldest"" refers to the highest values in 'Rating' (since it's a review context)
    oldest_reviewers = dataset.nlargest(5, 'Rating')
    ages_of_oldest_reviewers = list(oldest_reviewers['Age'].astype('int64'))
    
    return ages_of_oldest_reviewers
",list of int64,"[34, 50, 47, 39, 24]","[99, 99, 94, 94, 94]"
What are the 4 most common Positive Feedback Counts of reviewers?,Which are the most frequent values of Positive Feedback Counts among the reviews given?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    feedback_counts = dataset[""Positive Feedback Count""].value_counts().index.tolist()
    return feedback_counts
",list of (int64),"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 17, 16, 18, 19, 20, 23, 21, 22, 25, 28, 26, 24, 27, 30, 31, 29, 32, 42, 37, 38, 34, 35, 36, 33, 51, 81, 45, 39, 65, 43, 40, 47, 57, 41, 44, 53, 49, 46, 58, 55, 64, 89, 68, 56, 48, 98, 93, 95, 50, 99, 87, 69, 66, 54, 108, 122, 52, 78, 82, 61, 77, 94, 117, 71, 84, 59]","[0, 1, 2, 3]"
What are the 2 most common values for recommendation indicator?,,,,ERROR,"[1, 0]"
What are the 2 most common clothing IDs in the reviews? If you find a tie answer in row order.,Which are the two most frequently occurring Clothing IDs in the reviews and what are their orders if there is a tie?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Count the occurrences of each Clothing ID
    clothing_id_counts = dataset['Clothing ID'].value_counts()

    # Get the two most frequently occurring Clothing IDs
    top_two_ids = clothing_id_counts.head(2).index.tolist()

    return top_two_ids
",list of (int64),"[1078, 862]","[1078, 862]"
Was the highest reported incident in the year 2023 filed online?,Was the most recent incident in 2023 recorded with a filed online status?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter incidents from 2023
    incidents_2023 = dataset[dataset['Incident Year'] == 2023]
    
    # Check if there are any incidents in 2023
    if not incidents_2023.empty:
        # Get the most recent incident date (latest 'Report Datetime')
        latest_incident_date = incidents_2023['Report Datetime'].max()
        
        # Filter the most recent incident from 2023
        most_recent_incident_2023 = incidents_2023[incidents_2023['Report Datetime'] == latest_incident_date]
        
        # Check if 'Filed Online' status is present for this incident
        filed_online_status = 'Yes' in most_recent_incident_2023['Filed Online'].values
        
        return filed_online_status
    
    else:
        return False

",bool,FALSE,FALSE
Are all incidents reported on Mondays resolved?,Is it true that all incidents recorded on Mondays have been resolved?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include incidents recorded on Mondays
    monday_incidents = dataset[dataset['Incident Day of Week'] == 'Monday']
    
    # Check if all incidents on Mondays have been resolved
    all_resolved = monday_incidents['Resolution'].isin(['Resolved', 'Complete']).all()
    
    return all_resolved
",bool,FALSE,FALSE
Do any incidents reported in Police District 'Central' fall in Supervisor District 5?,Are there any incidents recorded in the Police District labeled 'Central' that are associated with Supervisor District 5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    central_police_district = dataset[dataset['Police District'] == 'Central']
    incidents_in_central = central_police_district[central_police_district['Supervisor District 2012'] == 5]
    
    return not incidents_in_central.empty
",bool,TRUE,FALSE
Are there any incidents that occurred at the same latitude and longitude more than once?,,,,ERROR,TRUE
How many unique types of incident categories are there in the dataset?,,,,ERROR,49
What's the total number of incidents reported online?,How many incidents have been reported online?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the rows where 'Filed Online' is not an empty string or None
    filed_online_incidents = dataset[dataset['Filed Online'] != '']
    
    # Count the number of such incidents
    count_of_filed_online_incidents = len(filed_online_incidents)
    
    return count_of_filed_online_incidents
",int64,713107,144099
How many different police districts are there in the dataset?,,,,ERROR,11
What is the average incident count per year?,What is the mean number of incidents reported each year?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Incident Year' column from the dataset
    incident_years = dataset['Incident Year']
    
    # Calculate the mean number of incidents reported each year
    mean_incidents_per_year = incident_years.value_counts().mean()
    
    return mean_incidents_per_year
",float64,118851.1667,118851.1667
What is the most common incident category?,,,,ERROR,Larceny Theft
Which day of the week has the highest number of incidents?,What is the day of the week that has the most incidents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the day of the week with the most incidents
    incident_days = dataset['Incident Day of Week'].value_counts().idxmax()
    
    return incident_days
",category,Friday,Friday
What is the most common resolution for incidents reported online?,Which is the most frequent category of resolution for incidents that were reported online?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include incidents that were reported online
    online_incidents = dataset[dataset['Filed Online'] == 'Online']
    
    # Group by the Resolution column and count the occurrences of each resolution category
    resolution_counts = online_incidents['Resolution'].value_counts()
    
    # Get the most frequent resolution category
    most_frequent_resolution = resolution_counts.idxmax()
    
    return most_frequent_resolution
",category,Open or Active,Open or Active
What is the Police District with the most incidents?,,,,ERROR,Central
What are the three most common incident descriptions?,What are the top three most frequent descriptions recorded for incidents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Incident Description' column from the dataset
    incident_descriptions = dataset['Incident Description'].value_counts().index.tolist()[:3]
    
    return incident_descriptions
",list of string,"['Theft, From Locked Vehicle, >$950', 'Malicious Mischief, Vandalism to Property', 'Battery']","['Theft, From Locked Vehicle, >$950', 'Malicious Mischief, Vandalism to Property', 'Battery']"
Name the 4 most frequently occurring police districts.,Which police districts appear most frequently in the dataset and name these top 4 districts?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Police District' column from the dataset
    police_districts = dataset['Police District'].dropna()
    
    # Count the occurrences of each unique value in the 'Police District' column
    district_counts = police_districts.value_counts().index[:4].tolist()
    
    return district_counts
",list of string,"['Central', 'Northern', 'Mission', 'Southern']","[Central, Northern, Mission, Southern]"
List the three most common incident categories on Fridays.,,,,ERROR,"[Larceny Theft, Malicious Mischief, Other Miscellaneous]"
Give the 6 most common resolutions for incidents.,,,,ERROR,"[Open or Active, Cite or Arrest Adult, Unfounded, Exceptional Adult]"
List the years with the top 4 highest incident counts.,Which are the four years that recorded the highest incident counts?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting relevant columns for counting incidents per year
    yearly_incidents = db.groupby('Incident Year')['Row ID'].count().reset_index()
    
    # Identifying the maximum incident count across all years
    max_incident_count = yearly_incidents['Row ID'].max()
    
    # Filtering the data to get only the years with the highest incident counts
    top_years = yearly_incidents[yearly_incidents['Row ID'] == max_incident_count]['Incident Year']
    
    # Returning the result as a list of uint16 values
    return top_years.values.tolist()
",list of uint16,[2018],"[2018, 2019, 2022, 2021]"
Which 3 incident years have the lowest number of online filed reports? If two have the same number choose the latest year,What are the three most recent years with the lowest number of online filed reports?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for reports that are filed online
    online_reports = dataset[dataset['Filed Online'] == 'Yes']
    
    # Extract the Incident Year from the filtered data
    years = online_reports['Incident Year'].drop_duplicates().sort_values(ascending=False)
    
    # Get the top three most recent years with the lowest number of reports
    top_three_years = years.head(3).tolist()
    
    return top_three_years
",list of (uint16),[],"[2023, 2020, 2021]"
What are the 2 years with the highest incident counts.,,,,ERROR,"[2018, 2019]"
Name the 6 years with the most number of unique incident categories.,,,,ERROR,"[2018, 2019, 2020, 2021, 2022, 2023]"
Do all patients experience exercise-induced angina?,"Does ExerciseAngina appear as ""Y"" for all patients in the dataset?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    exercise_angina_y = dataset[""ExerciseAngina""].eq(""Y"").all()
    
    return exercise_angina_y
",bool,FALSE,FALSE
Does any patient have a resting blood pressure above 200?,Are there any patients with a resting blood pressure exceeding 200?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    exceeds_200 = dataset.loc[dataset[""RestingBP""] > 200]
    is_exceeds_200_non_empty = not exceeds_200.empty
    
    return is_exceeds_200_non_empty
",bool,FALSE,FALSE
Are there patients without heart disease?,Is there at least one patient in the dataset who does not have heart disease?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there is any patient with HeartDisease set to 0 (no heart disease)
    no_disease_patient = dataset[dataset[""HeartDisease""] == 0]
    
    # Return True if there is at least one such patient, otherwise False
    return not no_disease_patient.empty
",bool,TRUE,TRUE
Does everyone have normal resting electrocardiographic results?,Is it true that all individuals have a normal resting electrocardiographic result?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if 'RestingECG' column exists in the dataset
    if 'RestingECG' not in dataset.columns:
        raise ValueError(""Column 'RestingECG' not found in the dataset."")
    
    # Get all unique values from the 'RestingECG' column
    resting_ecg_values = dataset['RestingECG'].unique()
    
    # Define normal resting electrocardiographic result value (assuming it's 0)
    normal_value = 0
    
    # Check if all individuals have a normal resting electrocardiographic result
    is_all_normal = len(resting_ecg_values) == 1 and resting_ecg_values[0] == normal_value

    return is_all_normal
",bool,FALSE,FALSE
What is the maximum age of patients in the dataset?,What is the highest age recorded among the patients in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_age = dataset[""Age""].max()
    return max_age
",uint8,77,77
What is the minimum resting blood pressure among the patients?,What is the lowest value of resting blood pressure recorded among the patients?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_resting_bp = dataset[""RestingBP""].min()
    return min_resting_bp
",uint8,0,0
What is the average cholesterol level in the dataset?,What is the mean value of cholesterol levels in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    mean_cholesterol = dataset['Cholesterol'].mean()
    
    return mean_cholesterol
",float64,198.7995643,198.7995643
What is the standard deviation of maximum heart rate among the patients?,,,,ERROR,25.46033414
What is the most common chest pain type among patients?,,,,ERROR,ASY
What is the least common resting electrocardiographic result?,,,,ERROR,ST
What is the most common ST slope among patients with heart disease?,Which is the most frequent value of ST slope for patients who have heart disease?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only patients with heart disease
    heart_disease_patients = dataset[dataset['HeartDisease'] == 1]
    
    # Find the most frequent value of ST slope for these patients
    most_frequent_st_slope = heart_disease_patients['ST_Slope'].mode()[0]

    return most_frequent_st_slope
",category,Flat,Flat
What is the least common chest pain type among male patients?,Which is the least frequently occurring chest pain type in male patients?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for male patients
    male_patients = dataset[dataset[""Sex""] == ""M""]
    
    # Group by ChestPainType and count occurrences
    chest_pain_counts = male_patients.groupby(""ChestPainType"").size()
    
    # Find the least frequently occurring chest pain type
    if not chest_pain_counts.empty:
        least_frequent_type = chest_pain_counts.idxmin()
    else:
        least_frequent_type = None
    
    return least_frequent_type
",category,TA,TA
What are the top 3 most common chest pain types?,,,,ERROR,"['ASY', 'NAP', 'ATA']"
Which 4 resting electrocardiographic results are least common?,,,,ERROR,"['ST', 'LVH', 'Normal']"
What are the 2 most common ST slopes among patients with heart disease?,Which are the two most frequent ST slopes observed in patients who have heart disease?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include rows where HeartDisease is 1 (indicating heart disease)
    heart_disease_rows = dataset[dataset['HeartDisease'] == 1]
    
    # Group by 'ST_Slope' and count the occurrences of each slope
    st_slope_counts = heart_disease_rows.groupby('ST_Slope').size().reset_index(name='counts')
    
    # Sort the counts in descending order to get the most frequent slopes first
    st_slope_counts_sorted = st_slope_counts.sort_values(by='counts', ascending=False)
    
    # Get the top two ST slopes
    top_two_st_slopes = st_slope_counts_sorted['ST_Slope'].head(2).tolist()
    
    return top_two_st_slopes

",list of (string),"['Flat', 'Up']","['Flat', 'Up']"
What are the 4 most common chest pain types among male patients?,Which are the four most frequent chest pain types experienced by male patients?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for male patients
    male_patients = dataset[dataset['Sex'] == 'M']
    
    # Group by ChestPainType and count occurrences
    chest_pain_counts = male_patients.groupby('ChestPainType').size().reset_index(name='counts')
    
    # Sort the counts in descending order
    sorted_chest_pain_counts = chest_pain_counts.sort_values(by='counts', ascending=False)
    
    # Get the top 4 most frequent chest pain types
    top_four_chest_pain_types = sorted_chest_pain_counts.head(4)['ChestPainType'].tolist()
    
    return top_four_chest_pain_types
",list of string,"['ASY', 'NAP', 'ATA', 'TA']","['TA', 'ATA', 'NAP', 'ASY']"
What are the ages of the 5 oldest patients in the dataset?,What are the ages of the top 5 oldest patients in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by Age in descending order to get the oldest patients at the top
    sorted_ages = dataset.sort_values(by='Age', ascending=False).head(5)['Age'].tolist()
    
    return sorted_ages
",list of int64,"[77, 77, 76, 76, 75]","[77, 77, 76, 76, 75]"
What are the 4 highest resting blood pressures?,What are the top 4 unique resting blood pressure values recorded in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_resting_bp = dataset['RestingBP'].unique()
    top_4_unique_bp = sorted(unique_resting_bp)[:4]
    
    return top_4_unique_bp
",list of int64,"[np.uint8(0), np.uint8(80), np.uint8(92), np.uint8(94)]","[200, 200, 200, 200]"
What are the 6 lowest cholesterol levels in the dataset?,Which are the six smallest cholesterol values present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    smallest_values = dataset['Cholesterol'].sort_values().head(6)
    return smallest_values.tolist()
",list of int64,"[0, 0, 0, 0, 0, 0]","[0, 0, 0, 0, 0, 0]"
What are the 3 highest maximum heart rates among the patients?,What are the top three maximum heart rates recorded for patients?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_heart_rates = dataset['MaxHR'].nlargest(3).tolist()
    return max_heart_rates
",list of int64,"[202, 195, 194]","[202, 195, 194]"
Did the oldest roller coaster in the dataset still operate?,Was there any roller coaster listed in the dataset that is both the oldest and still operational?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for only those coasters that are still operational
    operational_coasters = dataset[dataset['Status'] == 'Operational']
    
    # Find the minimum opening date among these operational coasters
    min_opening_date = operational_coasters['opening_date_clean'].min()
    
    # Check if there is any coaster with this minimum opening date that is still operational
    oldest_operational_coaster = dataset[(dataset['Status'] == 'Operational') & (dataset['opening_date_clean'] == min_opening_date)]
    
    # Return True if such a coaster exists, otherwise False
    return not oldest_operational_coaster.empty

",bool,FALSE,TRUE
Is there a roller coaster in the dataset that operates at a speed more than 100 mph?,Are there any roller coasters in the dataset that have a speed greater than 100 mph?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if 'speed_mph' is in the columns
    if 'speed_mph' in dataset.columns:
        result = any(dataset['speed_mph'] > 100)
    else:
        # Handle cases where speed_mph might not be directly available
        # For example, check if there's another column that represents speed in mph
        speed_columns = ['speed1_value', 'speed2_value']
        for col in speed_columns:
            if col in dataset.columns and any(dataset[col] > 100):
                return True
        
        result = False
    
    return result
",bool,TRUE,TRUE
Are all roller coasters in the dataset designed by 'Werner Stengel' removed?,Is it true that no roller coasters designed by 'Werner Stengel' are present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the designers column from the dataset
    designers = dataset['Designer']
    
    # Check if 'Werner Stengel' is in the list of designers
    is_designer_present = 'Werner Stengel' in designers.values
    
    # Return the result as a boolean value
    return not is_designer_present
",bool,FALSE,FALSE
Does every roller coaster have a G-force value?,Is it true that all roller coasters in the dataset have a defined G-force value?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if 'Gforce_clean' column exists in the dataset schema
    if 'Gforce_clean' not in dataset.columns:
        return False
    
    # Check if all entries in 'Gforce_clean' are defined (not NaN)
    is_all_defined = dataset['Gforce_clean'].dropna().empty
    
    return is_all_defined
",bool,FALSE,FALSE
What is the maximum speed (in mph) for roller coasters in the dataset?,What is the highest speed recorded in mph for any roller coaster in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'speed_mph' column from the dataset
    speeds = dataset[""speed_mph""]
    
    # Find the maximum speed recorded in the dataset
    max_speed = speeds.max()
    
    return max_speed
",float64,149.1,149.1
How many roller coasters were introduced in the year 2000?,In how many years was the year_introduced field set to 2000?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the rows where 'year_introduced' is equal to 2000
    filtered_years = dataset[dataset['year_introduced'] == 2000]
    
    # Count the number of such rows
    count_of_2000 = len(filtered_years)
    
    return count_of_2000
",int64,47,47
What is the average G-force across all roller coasters in the dataset?,What is the mean value of G-force across all roller coasters in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    g_force_values = dataset['Gforce_clean'].dropna()
    mean_g_force = g_force_values.mean()

    return mean_g_force
",float64,3.824005525,3.824005525
What is the total number of roller coasters designed by 'Edwin Madeupname' in the dataset?,How many roller coasters credited to the designer Edwin Madeupname are present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the specific column name for the designer from the schema
    designer_column = [col for col in dataset.columns if 'Designer' in col][0]
    
    # Count the number of roller coasters credited to the designer Edwin Madeupname
    count = dataset[dataset[designer_column] == ""Edwin Madeupname""].shape[0]
    
    return count
",int64,0,0
Which manufacturer has built the fastest roller coaster?,Which roller coaster manufacturer has produced the fastest roller coaster based on speed?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include valid entries with a numeric speed value
    valid_speed_entries = dataset.dropna(subset=['speed_mph'])
    
    # Find the manufacturer of the roller coaster with the maximum speed
    fastest_coaster_info = valid_speed_entries.loc[valid_speed_entries['speed_mph'].idxmax()]
    fastest_manufacturer = fastest_coaster_info['Manufacturer']
    
    return fastest_manufacturer
",string,Intamin,Intamin
What is the status of the roller coaster with the highest G-force?,,,,ERROR,Removed
What type of the roller coaster is the oldest in the dataset?,Which type of roller coaster has the earliest opening date in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the minimum opening date
    min_opening_date = dataset['opening_date_clean'].min()
    
    # Filter the dataset to get only the rows with the earliest opening date
    earliest_opening_coasters = dataset[dataset['opening_date_clean'] == min_opening_date]
    
    # Extract the types of roller coasters with the earliest opening date
    earliest_types = earliest_opening_coasters['Type_Main'].unique()
    
    # Return the result as a list of strings
    return earliest_types.tolist()
",string,['Wood'],Wood
What is the location of the roller coaster with the highest number of inversions?,,,,ERROR,Alton Towers
What are the names of the top 3 fastest roller coasters?,Which are the names of the top 3 roller coasters based on speed?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out rows where 'speed_mph' is not NaN
    valid_speeds = dataset.dropna(subset=['speed_mph'])
    
    # Sort the dataset based on speed in descending order and select top 3
    top_3_coasters = valid_speeds.nlargest(3, columns='speed_mph')
    
    # Extract coaster names from the top 3 rows
    coaster_names = list(top_3_coasters['coaster_name'])
    
    return coaster_names
",list of string,"['Formula Rossa', 'Kingda Ka', 'Top Thrill Dragster']","[Formula Rossa, Kingda Ka, Top Thrill Dragster]"
Which 2 roller coasters have the highest number of inversions?,What are the names of the two roller coasters with the highest number of inversions?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant columns for inversion count and coaster name
    inversions = dataset.sort_values(by='Inversions', ascending=False).head(2)['coaster_name'].tolist()
    
    return inversions
",list of string,"['The Smiler', '10 Inversion Roller Coaster']","[The Smiler, Colossus (Thorpe Park)]"
What are the locations of the top 5 roller coasters with the highest G-force?,Which are the geographic locations where the top 5 roller coasters with the highest G-force are located?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset based on G-force in descending order and select the top 5
    top_5_g_force_coasters = db.sort_values(by='Gforce_clean', ascending=False).head(5)

    # Extract unique locations of these top 5 coasters
    locations = top_5_g_force_coasters['Location'].unique().tolist()

    return locations
",list of string,"['Sea Lion Park', 'Fuji-Q Highland', 'Six Flags Over Texas', 'NÃ¼rburgring', 'Other']","[Sea Lion Park, Fuji-Q Highland, Six Flags Over Texas, NÃ¼rburgring, Morey's Piers]"
Name the 4 oldest roller coasters in the dataset.,Retrieve the names of the top 4 oldest roller coasters in the dataset.,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extracting the 'opening_date_clean' column which contains the opening dates
    opening_dates = dataset['opening_date_clean']
    
    # Sorting the dataset based on the opening date in ascending order to get the oldest first
    sorted_dataset = dataset.sort_values(by='opening_date_clean')
    
    # Selecting the top 4 rows from the sorted dataset
    top_4_oldest = sorted_dataset.head(4)
    
    # Extracting the 'coaster_name' for these top 4 oldest coasters
    names_of_top_4 = list(top_4_oldest['coaster_name'])
    
    return names_of_top_4
",list of string,"['Switchback Railway', 'Flip Flap Railway', 'Loop the Loop (Coney Island)', ""Loop the Loop (Young's Pier)""]","[Switchback Railway, Flip Flap Railway, Loop the Loop (Coney Island), Loop the Loop (Young's Pier)]"
What are the top 3 speeds (in mph) of roller coasters in the dataset?,What are the three highest speeds in miles per hour for roller coasters listed in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'speed_mph' column and sort it in descending order to get the highest speeds
    sorted_speeds = dataset['speed_mph'].sort_values(ascending=False)
    
    # Get the top three speeds
    top_three_speeds = sorted_speeds[:3].tolist()
    
    return top_three_speeds
",list of float64,"[149.1, 128.0, 120.0]","[149.1, 128.0, 120.0]"
List the G-force values of the 2 roller coasters with the highest G-force.,,,,ERROR,"[12.0, 6.5]"
What are the heights (in ft) of the top 4 tallest roller coasters?,,,,ERROR,"[377.3, 367.5, 318.2, 306.1]"
Name the introduction years of the 6 oldest roller coasters in the dataset.,,,,ERROR,"[1884, 1895, 1901, 1901, 1902, 1902]"
Is there a rental property with exactly 5 bedrooms?,Are there any rental listings that have precisely 5 bedrooms?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if 'bedrooms' column exists in the dataset
    if 'bedrooms' not in dataset.columns:
        return False
    
    # Check for any rental listings with exactly 5 bedrooms
    result = dataset[dataset['bedrooms'] == 5].empty
    
    return result
",bool,FALSE,TRUE
Is there a rental property listed by a superhost that is instantly bookable?,Are there any Airbnb listings marked as instant bookable that are listed by a superhost?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if both 'instant_bookable' and 'host_is_superhost' columns exist in the dataset
    if 'instant_bookable' in dataset.columns and 'host_is_superhost' in dataset.columns:
        # Filter the dataset to check for listings that are instant bookable and listed by a superhost
        result = dataset[(dataset['instant_bookable'] == 't') & (dataset['host_is_superhost'] == 't')]
        
        # Check if there is any such listing
        return not result.empty

    return False
",bool,TRUE,TRUE
Are there any rental properties that can accommodate more than 10 guests?,Are there any Airbnb listings available that can accommodate more than 10 guests?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    available_listings = dataset[dataset['availability_30'] == 1]
    listings_accommodating_more_than_10_guests = available_listings[available_listings['accommodates'] > 10]
    
    is_available_for_more_than_10_guests = not listings_accommodating_more_than_10_guests.empty

    return is_available_for_more_than_10_guests
",bool,FALSE,TRUE
Is there a rental property that has received a perfect review score?,Are there any rental properties in the dataset that have received a perfect review score of 10?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there is any listing with review_scores_rating equal to 10.0
    has_perfect_review = dataset.loc[dataset[""review_scores_rating""] == 10.0].empty
    
    return not has_perfect_review
",bool,FALSE,FALSE
How many rental properties are there in the dataset?,,,,ERROR,20776
What is the maximum number of bedrooms in a property?,What is the highest value of the bedrooms attribute across all properties listed in the Airbnb dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_bedrooms = dataset[""bedrooms""].max()
    return max_bedrooms
",float64,18,18
What is the highest price per night for a rental property?,,,,ERROR,95150
What is the maximum number of reviews a property has received?,,,,ERROR,870
What is the host response time for the property with the highest number of bedrooms?,What is the response time indicated by the host of the Airbnb property that has the highest number of bedrooms?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the listing with the maximum number of bedrooms
    max_bedrooms_listing = dataset.loc[dataset['bedrooms'].idxmax()]
    
    # Get the host response time for that listing
    host_response_time = max_bedrooms_listing['host_response_time']
    
    return host_response_time
",category,within an hour,within an hour
What type of room is the most expensive property?,,,,ERROR,Entire home/apt
What is the property type of the listing with the most reviews?,,,,ERROR,Entire rental unit
What is the acceptance rate of the host of the property that can accommodate the most number of guests?,What is the host acceptance rate for the property that has the highest capacity to accommodate guests?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the property with the highest 'accommodates' value
    max_accommodates_property = dataset.loc[dataset['accommodates'].idxmax()]
    
    # Return the host acceptance rate for that property
    host_acceptance_rate = max_accommodates_property['host_acceptance_rate']
    
    return host_acceptance_rate
",float64,,100%
Which are the 2 lowest values of host response rates above 0% ?,,,,ERROR,"['5%', '10%']"
Which are the 2 lowest values of host response rates?,,,,ERROR,"['0%', '0%']"
What are the 4 highest values of host acceptance rates?,,,,ERROR,"['99%', '99%', '99%', '99%']"
What are the 2 least common scraping sources?,,,,ERROR,"['previous scrape', 'city scrape']"
What are the 3 prices of the most expensive properties?,,,,ERROR,"[95150.0, 90130.0, 64430.0]"
What are the 2 prices of the least expensive properties?,,,,ERROR,"[0.0, 0.0]"
What are the 2 numbers of reviews received by the 2 most reviewed properties?,,,,ERROR,"[870, 822]"
What are the 5 numbers of guests accommodated by the properties that can accommodate the most guests?,,,,ERROR,"[16, 16, 16, 16, 16]"
Is there a food item with 'Fruits' as its group?,Are there any food items categorized under the group 'Fruits'?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include rows where the GROUP is 'Fruits'
    fruits_df = db.loc[db['GROUP'] == 'Fruits']
    
    # Check if there are any rows in the filtered dataframe
    has_fruits = not fruits_df.empty
    
    return has_fruits
",bool,TRUE,TRUE
Are there food items with 'Nuts' as their sub group?,,,,ERROR,TRUE
Is there a food item with scientific name 'Tilia argentea'?,,,,ERROR,TRUE
Is 'Angelica' listed as a food name in the dataset?,Does the dataset contain 'Angelica' under any of its food name categories?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    contains_angelica = 'Angelica' in dataset['FOOD NAME'].values
    
    return contains_angelica
",bool,TRUE,TRUE
How many food items are there in the dataset?,What is the total count of unique food items in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_food_count = dataset['FOOD NAME'].nunique()
    
    return unique_food_count
",int64,906,906
How many unique food groups are there in the dataset?,,,,ERROR,24
How many unique sub groups are there in the dataset?,,,,ERROR,123
How many unique food items are there in the dataset?,What is the total count of distinct food items in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    distinct_food_count = dataset['FOOD NAME'].nunique()
    
    return distinct_food_count
",int64,906,906
What is the group of the food named 'Kiwi'?,Under which group does the food item 'Kiwi' fall?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get only the row for 'Kiwi'
    kiwi_row = dataset.loc[dataset['FOOD NAME'] == 'Kiwi']
    
    # Extract the group of 'Kiwi'
    group_of_kiwi = kiwi_row['GROUP'].values[0]
    
    return group_of_kiwi
",string,Fruits,Fruits
What is the sub group of the food with scientific name 'Tilia argentea'?,Under which subgroup does the food item with scientific name Tilia argentea fall?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to find the row with the scientific name 'Tilia argentea'
    tilia_row = db.loc[db['SCIENTIFIC NAME'] == 'Tilia argentea']
    
    # Return the subgroup of the filtered row
    answer = tilia_row['SUB GROUP'].values[0]
    
    return answer
",category,Herbs,Herbs
What is the scientific name of the food named 'Colorado pinyon'?,Which is the scientific name associated with the food entry for Colorado pinyon?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to find the entry for 'Colorado pinyon'
    target_entry = db.loc[db['FOOD NAME'] == 'Colorado pinyon']
    
    # Get the associated scientific name
    scientific_name = target_entry['SCIENTIFIC NAME'].iloc[0]
    
    return scientific_name
",string,Pinus edulis,Pinus edulis
What is the food name of the item with scientific name 'Tilia argentea'?,Which food item has the scientific name Tilia argentea?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    matching_food_item = dataset.loc[dataset['SCIENTIFIC NAME'] == 'Tilia argentea', 'FOOD NAME']
    if not matching_food_item.empty:
        return matching_food_item.iloc[0]
    else:
        return None

def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    matching_food_item = dataset.loc[dataset['SCIENTIFIC NAME'] == 'Tilia argentea', 'FOOD NAME']
    if not matching_food_item.empty:
        return matching_food_item.iloc[0]
    else:
        return ""Not Found""
",string,Silver linden,Silver linden
What are the top 3 most common food groups?,Which are the three most frequent food groups present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Count the frequency of each food group
    food_group_counts = dataset['GROUP'].value_counts().head(3)
    
    # Convert the counts to a list of strings
    most_frequent_groups = food_group_counts.index.tolist()
    
    return most_frequent_groups
",list of (string),"['Aquatic foods', 'Vegetables', 'Fruits']","['Aquatic foods', 'Vegetables', 'Fruits']"
What are the top 2 most common groups? If there are two that have the same number of appearances give preference alphabetically.,,,,ERROR,"['Aquatic foods', 'Fruits']"
What are the 5 least common food groups?,Which are the five categories that appear least frequently under the food groups?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Count the frequency of each category in the 'GROUP' column
    group_counts = dataset['GROUP'].value_counts().sort_values(ascending=True)[:5]
    
    # Get the categories that appear least frequently
    least_frequent_categories = list(group_counts.index)
    
    return least_frequent_categories
",list of (string),"['Herbs and spices', 'Baby foods', 'Eggs', 'Unclassified', 'Teas']","['Teas', 'Eggs', 'Baby foods', 'Unclassified', 'Herbs and spices']"
What are the 5 most common sub groups?,,,,ERROR,"['Fishes', 'Herbs', 'Berries', 'Tropical fruits', 'Nuts']"
What are the lengths of the top 5 most common sub group names?,What is the length of each of the top 5 most frequent sub group names?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'SUB GROUP' column from the dataset
    sub_group_column = dataset['SUB GROUP']
    
    # Get the top 5 most frequent sub group names and their counts
    top_5_sub_groups = sub_group_column.value_counts().head(5)
    
    # Calculate the length of each of these top 5 sub group names
    lengths_of_top_5 = top_5_sub_groups.index.map(len).tolist()
    
    return lengths_of_top_5
",list of int64,"[6, 5, 7, 15, 4]","[6, 5, 7, 15, 4]"
What are the number of appearances of the 2 least common groups?,,,,ERROR,"[1, 1]"
What are the number of appearances of the 3 most common groups?,,,,ERROR,"[166, 130, 130]"
What are the three most common group name lengths?,Which are the three most frequent lengths of group names?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'GROUP' column from the dataset
    group_column = dataset['GROUP']
    
    # Get the lengths of each group name
    group_lengths = group_column.str.len()
    
    # Get the value counts of these lengths
    length_counts = group_lengths.value_counts().sort_index()
    
    # Get the three most frequent lengths
    top_three_lengths = length_counts.head(3).index.tolist()
    
    return top_three_lengths
",list of (int64),"[3.0, 4.0, 6.0]","[6.0, 13.0, 10.0]"
Is there a customer with 'Large Business' as their occupation?,Are there any customers whose occupation is listed as 'Large Business'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    result = dataset[dataset[""Occupation""] == ""Large Business""].empty
    return result
",bool,FALSE,TRUE
Are there customers with 'King' as their pitched product?,Do any customers have their pitched product listed as 'King'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    is_product_pitched_king = dataset['ProductPitched'].isin(['King'])
    
    return is_product_pitched_king.any()
",bool,TRUE,TRUE
Is there a customer with designation 'VP'?,Are there any customers having designation VP?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    result = dataset[dataset['Designation'] == 'VP']
    return not result.empty
",bool,TRUE,TRUE
Is 'Unmarried' listed as a marital status in the dataset?,Does the dataset include 'Unmarried' as a value in the MaritalStatus category?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if 'MaritalStatus' is in the dataset columns
    if 'MaritalStatus' in dataset.columns:
        # Check if 'Unmarried' exists in the MaritalStatus column
        is_unmarried_present = 'Unmarried' in dataset['MaritalStatus'].unique()
    else:
        # If 'MaritalStatus' is not a column, assume it's not present
        is_unmarried_present = False
    
    return is_unmarried_present
",bool,TRUE,TRUE
How many customers are there in the dataset?,,,,ERROR,4888
How many unique occupations are there in the dataset?,,,,ERROR,4
How many unique designations are there in the dataset?,What is the total number of distinct designations present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_designations = dataset['Designation'].nunique()
    
    return unique_designations
",int64,5,5
How many unique marital statuses are there in the dataset?,,,,ERROR,4
What is the occupation of the customer with ID 200000?,Which occupation is associated with the customer having ID 200000?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    customer_id = 200000
    occupation = dataset.loc[dataset['CustomerID'] == customer_id]['Occupation'].values[0]
    return occupation
",string,Salaried,Salaried
What is the product pitched to the customer with ID 200001?,,,,ERROR,Deluxe
What is the designation of the customer with ID 200002?,,,,ERROR,Executive
What is the marital status of the customer with ID 200003?,,,,ERROR,Divorced
What are the 3 most common occupations?,Which are the top three most frequent occupations among the customers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    occupation_counts = dataset['Occupation'].value_counts().head(3)
    top_three_occupations = occupation_counts.index.tolist()
    
    return top_three_occupations
",list of string,"['Salaried', 'Small Business', 'Large Business']","['Salaried', 'Small Business', 'Large Business']"
What are the top 2 most common pitched products?,,,,ERROR,"['Basic', 'Deluxe']"
What are the 4 least common occupations?,Which are the least frequently occurring occupations in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    occupation_counts = dataset['Occupation'].value_counts()
    less_frequent_occupations = occupation_counts[occupation_counts == occupation_counts.min()].index.tolist()
    return less_frequent_occupations
",list of string,['Free Lancer'],"['Salaried', 'Small Business', 'Large Business', 'Free Lancer']"
What are the 2 least common pitched products?,,,,ERROR,"['Super Deluxe', 'King']"
What are the ages of the 3 oldest customers?,What are the ages of the customers who are the oldest among the top three?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by age in descending order to get the oldest customers at the top
    sorted_dataset = dataset.sort_values(by='Age', ascending=False)
    
    # Select the ages of the top three customers
    top_three_ages = sorted_dataset.head(3)['Age'].tolist()
    
    return top_three_ages
",list of float64,"[61.0, 61.0, 61.0]","[61, 61, 61]"
What are the ages of the 4 youngest customers?,What are the ages associated with the four customers who have the lowest Age values?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by age in ascending order and get the first four entries
    sorted_customers = dataset.sort_values(by='Age').head(4)
    
    # Extract the ages of these customers
    ages = sorted_customers['Age'].tolist()
    
    return ages
",list of float64,"[18.0, 18.0, 18.0, 18.0]","[18.0, 18.0, 18.0, 18.0]"
What are the top 2 highest monthly incomes of the customers?,,,,ERROR,"[98678, 95000]"
What are the 4 most common duration of pitch?,Which are the four most frequent values of DurationOfPitch in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    answer = db['DurationOfPitch'].value_counts().index.tolist()[:4]
    return answer
",list of (type),"[9.0, 7.0, 8.0, 6.0]","[9.0, 7.0, 8.0, 6.0]"
Is there any entry posted on a weekend?,Are there any entries posted on weekends?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if any entry has a weekday_name of 'Saturday' or 'Sunday'
    weekend_entries = dataset['weekday_name'].isin(['Saturday', 'Sunday'])
    
    return weekend_entries.any()
",bool,TRUE,TRUE
Are there titles with more than 100 characters?,Does the dataset contain any titles that exceed 100 characters in length?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    exceeds_100_characters = dataset[dataset['title_gx_text_length'] > 100]['title_gx_text_length'].notnull().any()
    
    return exceeds_100_characters
",bool,FALSE,FALSE
Do any entries have a negative sentiment according to the Cardiff NLP model?,,,,ERROR,FALSE
"Is the term 'linux' mentioned in the ""Clusters II"" column?","Does the ""Clusters II"" column contain the term 'linux'?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    contains_linux = 'linux' in dataset['Clusters II'].values
    return contains_linux
",bool,FALSE,TRUE
How many entries were posted in the morning?,What is the total number of entries that were posted during the morning?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only entries posted during the morning
    morning_entries = dataset[dataset['partofday'] == 'Morning']
    
    # Count the total number of such entries
    total_morning_entries = len(morning_entries)
    
    return total_morning_entries
",int64,0,1516
What's the highest score received by an entry?,What is the maximum score achieved by any entry?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_score = dataset[""score""].max()
    return max_score
",uint16,6015,6015
"On average, how many descendants does an entry have?",What is the average number of descendants per entry?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    average_descendants = dataset[""descendants""].mean()
    
    return average_descendants
",float64,339.2486205,339.2486205
How many entries are in the Autumn season?,,,,ERROR,2301
Which day of the week has the most entries?,,,,ERROR,Tuesday
What is the predominant language used in titles?,Which language is predominantly used in the titles?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    predominant_language = dataset['title_gx_lang'].mode().iloc[0]
    return predominant_language
",string,en,en
In which season was the entry with the highest score posted?,During which season was the entry having the highest score posted?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_score_entry = dataset.loc[dataset[""score""] == dataset[""score""].max()]
    season_of_max_score = max_score_entry[""season""].values[0]
    
    return season_of_max_score
",string,Spring,Spring
On which part of the day are most entries posted?,During which part of the day are the majority of entries recorded?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the frequency of entries for each part of the day
    part_of_day_counts = dataset['partofday'].value_counts()
    
    # Get the most common part of the day
    majority_part_of_day = part_of_day_counts.idxmax()
    
    return majority_part_of_day
",category,afternoon,afternoon
"List the top 4 most frequent terms in the ""Clusters II"" column.",,,,ERROR,"['year, work, new', 'google, web, firefox, open', 'apple, linux, rust, iphone', 'facebook, twitter, die, account']"
Name the 2 month names which appear less in the dataset.,Which two month names appear the least frequency in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Count the frequency of each month name
    month_counts = dataset['month_name'].value_counts()

    # Find the minimum count
    min_count = month_counts.min()

    # Filter months that have the minimum count
    least_frequent_months = month_counts[month_counts == min_count].index.tolist()

    return least_frequent_months
",list of string,['July'],"['December', 'July']"
Identify the top 3 weekdays based on entry frequency.,,,,ERROR,"['Tuesday', 'Wednesday', 'Thursday']"
Provide the bottom 4 seasons in terms of entry count.,Which are the seasons with the lowest entry count?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by 'season' and count the entries
    season_counts = dataset.groupby('season').size()
    
    # Find the minimum entry count
    min_count = season_counts.min()
    
    # Filter seasons with the minimum entry count
    seasons_with_lowest_entry_count = season_counts[season_counts == min_count].index.tolist()
    
    return seasons_with_lowest_entry_count
",list of category,['Summer'],"['Spring', 'Winter', 'Autumn', 'Summer']"
List the top 3 scores in the dataset.,,,,ERROR,"[6015, 5771, 4338]"
Name the bottom 5 title text lengths.,,,,ERROR,"[1.0, 2.0, 2.0, 2.0, 2.0]"
Identify the top 4 numbers of descendants.,What are the top 4 highest values of descendants?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_four_descendants = dataset['descendants'].nlargest(4).tolist()
    return top_four_descendants
",list of float64,"[4576.0, 3678.0, 3676.0, 3463.0]","[4576.0, 3678.0, 3676.0, 3463.0]"
Provide the bottom 6 scores in the dataset.,,,,ERROR,"[501, 501, 501, 501, 501, 501]"
Are there any employees with more than 7 projects?,,,,ERROR,FALSE
Has any employee worked for more than 300 hours on average per month?,Were there any employees who averaged more than 300 hours per month over their tenure?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the average monthly hours for each employee
    avg_hours_per_month = dataset.groupby('Date Hired')['Average Monthly Hours'].mean()
    
    # Check if there are any averages greater than 300
    result = avg_hours_per_month > 300
    
    return result.any()
",bool,TRUE,TRUE
Are all satisfaction levels above 0.5?,Is it true that every staff member has a satisfaction level greater than 0.5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    is_everyone_satisfied = dataset['Satisfaction Level'].gt(0.5).all()
    
    return is_everyone_satisfied
",bool,FALSE,FALSE
Were there any employees hired in 2019?,Did any employees join the company in the year 2019?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the year from the 'Date Hired' column
    hired_year = dataset['Date Hired'].dt.year
    
    # Check if any employees joined in the year 2019
    joined_2019 = hired_year.isin([2019]).any()
    
    return joined_2019
",bool,TRUE,TRUE
How many unique departments are there?,What is the total number of distinct departments available in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    num_distinct_departments = dataset['Department'].nunique()
    
    return num_distinct_departments
",int64,10,10
What's the maximum number of years an employee has been in the company?,What is the highest value recorded for the number of years an employee has been in the company?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_years_in_company = db[""Years in the Company""].max()
    return max_years_in_company
",uint8,10,10
How many employees have been promoted in the last 5 years?,How many employees have been promoted within the last five years?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataframe to only include employees who were promoted in the last 5 years
    promoted_employees = db.loc[db['Promoted in the last 5 years?'] == 'yes']
    
    # Count the number of unique employees who were promoted
    num_promoted = promoted_employees.shape[0]
    
    return num_promoted
",int64,0,319
"On average, how many hours do employees work monthly?",What is the average number of monthly hours worked by employees?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    average_monthly_hours = dataset[""Average Monthly Hours""].mean()
    
    return average_monthly_hours
",float64,201.0503367,201.05
Which department has the highest number of employees?,What is the department that employs the largest workforce?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Count the number of employees in each department
    department_counts = dataset['Department'].value_counts()
    
    # Get the department with the maximum count
    largest_department = department_counts.idxmax()
    
    return largest_department
",string,sales,sales
What's the most common salary level among employees?,Which is the most frequent salary level among employees?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the mode of the 'salary' column
    most_frequent_salary = dataset['salary'].mode().iloc[0]
    
    return most_frequent_salary
",category,low,low
Which year had the highest number of employees hired?,In which year was the maximum number of employees hired?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Date Hired' column from the dataset
    date_hired = dataset['Date Hired']
    
    # Convert the 'Date Hired' column to year format
    years_hired = date_hired.dt.year
    
    # Find the year with the maximum number of employees hired
    max_year_hired = years_hired.mode()[0]
    
    return max_year_hired
",int64,2017,2017
Which salary level has the least number of employees who had an accident at work?,What is the salary level with the fewest employees who experienced a work accident?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out rows where Work Accident is not 'yes'
    filtered_data = dataset[dataset['Work Accident'] == 'yes']
    
    # Group by salary and count the number of employees who experienced a work accident in each salary category
    grouped_data = filtered_data.groupby('salary').size()
    
    # Find the salary with the minimum count
    min_salary_count = grouped_data.idxmin()
    
    return min_salary_count

",category,low,high
Name the top 4 departments with the most employees.,Which are the four departments having the highest number of employees?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract department names and their corresponding counts
    department_counts = db['Department'].value_counts().head(4)
    
    # Convert the result to a list of strings
    top_departments = list(department_counts.index)
    
    return top_departments
",list of string,"['sales', 'technical', 'support', 'IT']","['sales', 'technical', 'support', 'IT']"
List the 3 departments with the most number of promotions in the last 5 years that have at least one promotion. ,,,,ERROR,"['hr', 'accounting', 'IT']"
Identify the 3 departments with the lowest average satisfaction levels.,Which are the three departments having the lowest average satisfaction levels?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the mean satisfaction level for each department
    dept_satisfaction = dataset.groupby('Department')['Satisfaction Level'].mean().reset_index()
    
    # Sort the departments based on their satisfaction levels in ascending order
    sorted_depts = dept_satisfaction.sort_values(by='Satisfaction Level')
    
    # Select the top 3 departments with the lowest satisfaction levels
    top_three_depts = sorted_depts.head(3)['Department'].tolist()
    
    return top_three_depts
",list of (type),"['accounting', 'hr', 'technical']","['accounting', 'hr', 'technical']"
What are the 2 departments with the lowest average monthly hours worked?,Which are the two departments that have the lowest average monthly hours worked?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by department and calculate the mean of 'Average Monthly Hours'
    avg_hours_by_department = dataset.groupby('Department')['Average Monthly Hours'].mean().reset_index()
    
    # Sort the departments based on average monthly hours in ascending order
    sorted_departments = avg_hours_by_department.sort_values(by='Average Monthly Hours')
    
    # Select the top two departments with the lowest average monthly hours
    top_two_departments = sorted_departments.head(2)['Department'].tolist()
    
    return top_two_departments
",list of (string),"['hr', 'marketing']","['hr', 'marketing']"
Identify the top 3 years with the highest employee hiring.,Which are the three years with the highest number of employee hires?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Date Hired' column
    date_hired = pd.to_datetime(dataset['Date Hired'], utc=True)
    
    # Extract the year from the 'Date Hired' column
    years_hired = date_hired.dt.year
    
    # Group by year and count the number of hires for each year
    hires_by_year = years_hired.value_counts().sort_index(ascending=False).head(3).index.tolist()
    
    return hires_by_year
",list of (int64),"[2019, 2018, 2017]","['2017', '2018', '2016']"
Which are the highest 3 satisfaction levels among employees who left?,What are the top three highest satisfaction levels for employees who have left the company?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter data for those who have left the company
    left_employees = dataset[dataset[""Left""] == ""yes""]
    
    # Extract satisfaction levels for employees who have left
    satisfaction_levels = left_employees[""Satisfaction Level""].dropna()
    
    # Get the top three highest satisfaction levels
    top_three_satisfaction = satisfaction_levels.nlargest(3).tolist()
    
    return top_three_satisfaction
",list of float64,[],"[0.92, 0.92, 0.92]"
List the bottom 5 average monthly hours among employees who were promoted in the last 5 years.,"Can you provide a list of the lowest average monthly hours for employees who were promoted within the last five years, and are limited to the bottom five entries?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for employees who were promoted in the last five years
    promoted_employees = dataset[dataset['Promoted in the last 5 years?'] == 'yes']
    
    # Sort these employees by average monthly hours and select the bottom five
    bottom_five_promoted = promoted_employees.sort_values(by='Average Monthly Hours').head(5)
    
    # Extract the 'Average Monthly Hours' for these bottom five promoted employees
    result = bottom_five_promoted['Average Monthly Hours'].tolist()
    
    return result
",list of int64,[],"[215, 133, 159, 241, 247]"
Whhat are the top 6 last evaluation scores?,What are the highest six Last Evaluation scores recorded in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_six_last_evaluations = dataset['Last Evaluation'].nlargest(6).tolist()
    return top_six_last_evaluations
",list of float64,"[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]","[1, 1, 1, 1, 1, 1]"
Did any incident result in the total destruction of the aircraft?,Were there any incidents where the aircraft was completely destroyed?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if the 'Aircaft_Damage_Type' column exists in the dataset
    if 'Aircaft_Damage_Type' not in dataset.columns:
        raise ValueError(""The column 'Aircaft_Damage_Type' is not available in the provided dataset."")
    
    # Filter incidents where the aircraft was completely destroyed
    completely_destroyed_incidents = dataset[dataset[""Aircaft_Damage_Type""] == ""Completely Destroyed""]
    
    # Check if there are any such incidents
    result = not completely_destroyed_incidents.empty
    
    return result
",bool,FALSE,TRUE
Have there been any incidents where the cause was related to the undercarriage of the aircraft?,,,,ERROR,TRUE
Has there been any instance where the ground casualties were non-zero?,,,,ERROR,TRUE
Are there incidents where the aircraft was involved in a collision?,,,,ERROR,TRUE
How many unique aircraft models are in the dataset?,,,,ERROR,3523
What's the highest number of occupants recorded in an incident?,,,,ERROR,524
How many incidents occurred in January 2022?,,,,ERROR,7
How many incidents resulted in non-zero fatalities?,What is the total number of incidents that had non-zero fatalities?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the total number of incidents with non-zero fatalities
    num_incidents = dataset[dataset['Fatalities'] > 0].shape[0]
    
    return num_incidents
",int64,9231,0
Which aircraft model was involved in the most incidents?,,,,ERROR,Junkers Ju-52/3m
What was the cause of the incident that resulted in the most fatalities?,,,,ERROR,"Airplane - Pressurization, Airplane - Pressurization - Bulkhead failure, Airplane - Pressurization - Explosive decompression, Maintenance - (repair of) previous damage, Result - Loss of control"
What is the most common phase of aircraft during incidents?,,,,ERROR,En route (ENR)
What is the location of the incident with the highest number of onboard occupants?,,,,ERROR,near Ueno Village...
What are the top 3 most common causes of incidents?,,,,ERROR,"['Info-Unavailable', 'Result - Runway excursion', 'Result - Damaged on the ground']"
List the top 5 locations where the most incidents have occurred. If there are two or more with the same number order them alphabetically,What are the top 5 alphabetically ordered locations where the most incidents have occurred?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by Incident_Location and count the occurrences
    location_counts = dataset['Incident_Location'].value_counts()
    
    # Get the top 5 locations alphabetically ordered
    top_locations = location_counts.index[:5].tolist()
    
    return top_locations
",list of string,"['unknown', 'Havana-JosÃ© ...', 'Miami Intern...', 'Rio de Janei...', 'Beirut Inter...']","['Arnhem', 'Beirut International Airport (BEY)', 'Glasgow-Preswick Airport', 'Havana-JosÃ© MartÃ­ International Airport (HAV)', 'Miami International Airport, FL (MIA)']"
Name the 2 most frequently occurring aircraft operators in the dataset.,,,,ERROR,"['USAAF', 'USAF']"
What are the top 2 most common types of aircraft damage?,,,,ERROR,"['Damaged beyond repair', 'Substantial']"
What are the 5 highest numbers of onboard passengers in incidents?,,,,ERROR,"[509.0, 503.0, 497.0, 451.0, 440.0]"
List the 3 highest numbers of onboard crew in incidents.,,,,ERROR,"[32.0, 31.0, 29.0]"
Identify the 4 highest numbers of total onboard occupants in incidents.,What are the top 4 highest numbers of total onboard occupants in incidents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Onboard_Total' column and sort it in descending order
    sorted_onboard_totals = dataset['Onboard_Total'].sort_values(ascending=False)
    
    # Get the top 4 values from the sorted list
    top_four_onboard_totals = sorted_onboard_totals.head(4).tolist()
    
    return top_four_onboard_totals
",list of int64,"['Fatalities: 6 / Occupants: 20', 'Fatalities: 7 / Occupants: 36', 'Fatalities: 26 / Occupants: 34', 'Fatalities: 5 / Occupants: 25']","[524.0, 521.0, 517.0, 469.0]"
What are the 6 highest numbers of ground casualties in incidents?,Which are the six incidents with the highest number of ground casualties?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by Ground_Casualties in descending order and select the top 6
    top_incidents = dataset.sort_values(by='Ground_Casualties', ascending=False).head(6)
    
    # Extract the 'Incident_Date' values from the top incidents
    result = list(top_incidents['Incident_Date'])
    
    return result
",list of int64,"['01-FEB-1963', '24-DEC-1966', '16-MAR-1969', '25-DEC-1976', '13-OCT-1976', '14-MAR-1979']","[1600, 900, 237, 107, 88, 87]"
"Are there any properties with a price over 1,000,000?",,,,ERROR,TRUE
Any property with more than 10 bedrooms?,,,,ERROR,TRUE
Are there properties with zero bathrooms?,Are there any properties listed that have zero bathrooms?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there are any properties with zero bathrooms
    has_zero_bathrooms = dataset['BaÃ±os'].isin([0]).any()
    
    return has_zero_bathrooms
",bool,FALSE,FALSE
Has any property been listed for more than 100 days?,,,,ERROR,TRUE
What's the highest price in the dataset?,What is the maximum value found in the Precio column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_price = dataset[""Precio""].max()
    return max_price
",uint32,17000000,17000000
What's the total number of properties listed?,How many properties are listed in total?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    total_properties = len(dataset)
    
    return total_properties
",uint32,26026,26026
What's the longest duration a property has been listed?,,,,ERROR,2535
What's the largest surface listed?,,,,ERROR,5504
What's the most common type of property listed?,,,,ERROR,Piso
Which advertiser has listed the most properties?,,,,ERROR,housell
Which property has the highest price?,,,,ERROR,GM31-121816
Which property has the largest surface area?,,,,ERROR,IF5563-FINCA VALLE LOZOYA
What are the five types of properties more frequently listed?,Which types of properties are listed most frequently in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Tipo' column from the dataframe
    property_types = db['Tipo']
    
    # Get the value counts of each type
    type_counts = property_types.value_counts()
    
    # Return the most common types as a list of strings
    return type_counts.index.tolist()
",list of string,"['Piso', 'Chalet', 'Apartamento', 'Chalet adosado', 'Chalet unifamiliar', 'DÃºplex', 'Chalet pareado', 'Ãtico', 'Estudio', 'Loft', 'Chalet rÃºstico']","['Piso', 'Chalet', 'Apartamento', 'Chalet adosado', 'Chalet unifamiliar']"
What are the 2 types of properties which are listed more frequently?,,,,ERROR,"['Piso', 'Chalet']"
What are the 2 most common localities for properties listed?,Which are the two most frequent localities for listed properties?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract locality column from the dataset
    localidades = dataset['Localidad']
    
    # Get value counts of each locality
    locality_counts = localidades.value_counts().head(2)
    
    # Convert to a list of strings
    result = locality_counts.index.tolist()
    
    return result
",list of string,"['Madrid Capital', 'TorrejÃ³n de Ardoz']","['Madrid Capital', 'TorrejÃ³n de Ardoz']"
What are the 2 most common districts for properties listed?,Which are the two most frequent districts for listed properties?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Distrito' column from the dataset
    district_column = dataset['Distrito']
    
    # Get the value counts of each district and sort them in descending order
    district_value_counts = district_column.value_counts().index.tolist()
    
    # Return the top two districts
    return district_value_counts[:2]

# Example usage:
# answer = answer_question(real_dataset, schema, question, expectedAnswerType)
# print(answer)  # Output will be a list of two strings representing the most frequent districts
",list of string,"['Centro', 'Salamanca']","['Centro', 'Salamanca']"
What are the 5 highest property prices listed?,,,,ERROR,"[17000000.0, 13600000.0, 13250000.0, 13000000.0, 12000000.0]"
List the 3 longest durations properties have been listed.,Retrieve the top three highest duration properties listed.,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant column for sorting and get top three based on 'DuraciÃ³n'
    top_three_durations = dataset.nlargest(3, 'DuraciÃ³n')['DuraciÃ³n'].tolist()
    
    return top_three_durations
",list of uint16,"[2535, 2534, 2285]","[2535.0, 2534.0, 2285.0]"
Identify the 4 largest surfaces listed.,,,,ERROR,"[5504.0, 3957.0, 2974.0, 2927.0]"
What are the 6 highest numbers of bedrooms in properties listed?,,,,ERROR,"[20, 20, 20, 20, 20, 20]"
Are there more than 2000 customers with a monthly charge higher than $80?,Does the dataset contain more than 2000 customers who have a monthly charge exceeding $80?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include rows where MonthlyCharges > 80
    high_charges_customers = db[db['MonthlyCharges'] > 80]
    
    # Check if the number of such customers is more than 2000
    answer = len(high_charges_customers) > 2000
    
    return answer
",bool,TRUE,TRUE
Do all customers have phone service?,,,,ERROR,TRUE
Are there any customers with no internet service?,Is there at least one customer who does not have any internet service?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there is at least one customer who does not have any internet service
    no_internet_service = dataset[dataset['InternetService'] == 'No internet service']
    
    # Return True if there is at least one such customer, otherwise False
    return not no_internet_service.empty
",bool,FALSE,TRUE
Are there any customers who are senior citizens and have dependents?,Are there any customers who are senior citizens and have dependents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to find customers who are senior citizens and have dependents
    senior_citizens_withdependents = dataset[(dataset[""SeniorCitizen""] == 1) & (dataset[""Dependents""] == ""Yes"")]
    
    # Check if there are any such customers
    result = not senior_citizens_withdependents.empty
    
    return result
",bool,TRUE,TRUE
How many unique customers are there in the dataset?,What is the count of distinct customerID entries in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_customer_ids = dataset['customerID'].nunique()
    
    return unique_customer_ids
",int64,7043,7043
What's the highest monthly charge?,What is the maximum value of the monthly charges?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_monthly_charges = dataset[""MonthlyCharges""].max()
    return max_monthly_charges
",float64,118.75,118.75
What's the total number of customers?,,,,ERROR,7043
What's the longest tenure?,What is the highest tenure value recorded in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_tenure = dataset[""tenure""].max()
    
    return max_tenure
",float64,72,72
What's the most common payment method?,,,,ERROR,Electronic check
What's the most common contract type?,,,,ERROR,Month-to-month
Which customer has the highest total charge?,Who is the customer with the highest total charge?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_total_charge_customer = dataset.loc[dataset[""TotalCharges""] == dataset[""TotalCharges""].max(), 'customerID']
    return max_total_charge_customer.iloc[0]
",category,2889-FPWRM,2889-FPWRM
Which customer has the highest monthly charge?,Who is the customer with the highest MonthlyCharges?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant column name from the question
    column_name = 'MonthlyCharges'
    
    # Find the customer with the highest MonthlyCharges
    max_charges_customer = db[db[column_name] == db[column_name].max()]['customerID'].iloc[0]
    
    return max_charges_customer
",category,7569-NMZYQ,7569-NMZYQ
What are the top 3 most common internet services?,,,,ERROR,"['Fiber optic', 'DSL', 'No']"
Name the 4 most common payment methods.,What are the top 4 most frequent payment methods used by customers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'PaymentMethod' column from the dataset
    payment_methods = dataset['PaymentMethod']
    
    # Get the value counts of each payment method
    method_counts = payment_methods.value_counts().head(4)
    
    # Convert the index (payment methods) to a list
    top_payment_methods = method_counts.index.tolist()
    
    return top_payment_methods
",list of string,"['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)']","['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)']"
What are the 2 most common types of contract?,,,,ERROR,"['Month-to-month', 'Two year']"
What are the 2 most common services for which customers have multiple lines?,Which two services are most frequently associated with multiple lines among customers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only rows where MultipleLines is 'Yes'
    multiple_lines_df = dataset[dataset['MultipleLines'] == 'Yes']
    
    # Group by InternetService and count occurrences
    grouped_services = multiple_lines_df.groupby('InternetService').size().reset_index(name='counts')
    
    # Sort the results in descending order based on counts
    sorted_services = grouped_services.sort_values(by='counts', ascending=False)
    
    # Get the top two services
    top_two_services = sorted_services['InternetService'].head(2).tolist()
    
    return top_two_services
",list of string,"['Fiber optic', 'DSL']","['No', 'Yes']"
What are the 5 highest total charges?,What are the top 5 highest TotalCharges in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_5_highest_total_charges = dataset.nlargest(5, 'TotalCharges')['TotalCharges'].tolist()
    return top_5_highest_total_charges
",list of float64,"[8684.8, 8672.45, 8670.1, 8594.4, 8564.75]","[8684.8, 8672.45, 8670.1, 8594.4, 8564.75]"
What are the 4 highest monthly charges?,What are the top 4 unique monthly charge amounts in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_monthly_charges = dataset[""MonthlyCharges""].unique()
    sorted_unique_charges = sorted(unique_monthly_charges, reverse=True)
    top_4_unique_charges = sorted_unique_charges[:4]
    
    return top_4_unique_charges
",list of float64,"[np.float64(118.75), np.float64(118.65), np.float64(118.6), np.float64(118.35)]","[118.75, 118.65, 118.6, 118.6]"
What are the 6 longest tenures?,,,,ERROR,"[72, 72, 72, 72, 72, 72]"
What are the 3 shortest tenures?,What are the tenure values corresponding to the three shortest customer tenures?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract tenure column from the dataset
    tenure = dataset['tenure']
    
    # Get the three minimum values in the tenure column
    min_tenures = tenure.nsmallest(3)
    
    # Return these values as a list
    return min_tenures.tolist()
",list of int64,"[0, 0, 0]","[0, 0, 0]"
Is there a listing with a review score rating of 100?,Are there any listings that have a review score rating exactly at 100?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    has_perfect_rating = (dataset[""review_scores_rating""] == 100).any()
    
    return has_perfect_rating
",bool,TRUE,TRUE
Are there any hosts who have listed more than 10 properties?,Do any hosts have a host_total_listings_count greater than 10?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    has_many_listings = db['host_total_listings_count'] > 10
    any_hosts_with_many_listings = has_many_listings.any()
    
    return any_hosts_with_many_listings
",bool,TRUE,TRUE
Are all listings instantly bookable?,Is it true that all Airbnb listings are marked as instantly bookable?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if 'instant_bookable' column exists in the dataset
    if 'instant_bookable' not in dataset.columns:
        raise ValueError(""Column 'instant_bookable' does not exist in the dataset."")
    
    # Get unique values from 'instant_bookable' column
    instant_bookable_values = dataset['instant_bookable'].unique()
    
    # Check if all listings are marked as instantly bookable
    is_all_instantly_bookable = len(instant_bookable_values) == 1 and instant_bookable_values[0] == 't'
    
    return is_all_instantly_bookable
",bool,FALSE,FALSE
Is there a listing that requires a minimum of 365 nights?,Are there any listings that have a minimum_nights requirement of 365 or more?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    result = dataset.loc[dataset[""minimum_nights""] >= 365]
    return not result.empty
",bool,TRUE,TRUE
How many unique hosts are there in the dataset?,,,,ERROR,26765
What is the highest number of listings a single host has?,,,,ERROR,2739
How many unique locations are listed by the hosts?,,,,ERROR,1316
What is the average review score rating across all listings?,,,,ERROR,93.767188
What is the most common host location?,,,,ERROR,"New York, New York, United States"
What is the name of the listing with the most bedrooms?,,,,ERROR,"Walk to UN, Macy's & Empire State B"
Which location has the highest number of listings?,,,,ERROR,"New York, New York, United States"
What is the most common property type?,,,,ERROR,Entire apartment
What are the top 6 unique host locations with the most listings?,,,,ERROR,"['New York, New York, United States', 'US', 'Brooklyn, New York, United States', 'Queens, New York, United States', 'Los Angeles, California, United States', 'Bronx, New York, United States']"
What are the 2 unique host locations with the most listings?,,,,ERROR,"['New York, New York, United States', 'US']"
List the 4 most common property types.,What are the top 4 most frequent property types listed on Airbnbs?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'property_type' column from the dataset
    property_types = dataset['property_type']
    
    # Get the top 4 most frequent property types
    top_property_types = property_types.value_counts().index.tolist()[:4]
    
    return top_property_types
",list of string,"['Entire apartment', 'Private room in apartment', 'Private room in house', 'Private room in townhouse']","['Entire apartment', 'Private room in apartment', 'Entire condominium', 'Entire house']"
What are the 2 most common types of properties?.,,,,ERROR,"['Entire apartment', 'Private room in apartment']"
What are the top 3 highest review score ratings?,What are the review score ratings for the top 3 highest-rated listings?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns from the DataFrame
    top_listings = db.sort_values(by='review_scores_rating', ascending=False).head(3)
    
    # Extracting the review score ratings for these top listings
    top_ratings = top_listings['review_scores_rating'].tolist()
    
    return top_ratings
",list of float64,"[100.0, 100.0, 100.0]","[100, 100, 100]"
What are the 5 lowest number of minimum nights required?,,,,ERROR,"[1, 1, 1, 1, 1]"
What are the 4 highest unique number of bedrooms listed?,What are the top 4 distinct values for the number of bedrooms listed?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting unique values from the 'bedrooms' column and sorting them in descending order
    unique_bedrooms = db['bedrooms'].unique().tolist()
    
    # Sorting the unique bedroom values in descending order
    unique_bedrooms.sort(reverse=True)
    
    # Selecting the top 4 distinct values
    top_four_bedrooms = unique_bedrooms[:4]
    
    return top_four_bedrooms
",list of float64,"[nan, 21.0, 14.0, 13.0]","[21, 14, 13, 11]"
What are the 6 lowest review scores given because of locations?,,,,ERROR,"[2, 2, 2, 2, 2, 2]"
Was there a day when the minimum temperature was below zero and it didn't rain?,Was there a day when the minimum temperature was below zero and precipitation did not occur?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    result = dataset[(dataset['tmin'] < 0) & (dataset['prec'] == 0)]
    return result.empty == False
",bool,TRUE,TRUE
Are there records where the solar radiation exceeds 10 but the maximum temperature was below 20?,Are there any records with solar radiation greater than 10 and maximum temperature below 20?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    condition = (dataset['tmax'] < 20) & (dataset['sol'] > 10)
    result = dataset[condition].empty
    
    return result
",bool,FALSE,TRUE
Did any day with maximum wind speed above 15 also have average wind speed below 5?,Were there any days when the maximum wind speed exceeded 15 and the average wind speed was less than 5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    result = dataset[(dataset['racha'] > 15) & (dataset['velmedia'] < 5)]
    return not result.empty
",bool,TRUE,TRUE
Were there days in the summer where the minimum temperature dropped below 10?,Were there any days during the summer season when the minimum temperature fell below 10 degrees?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter data for the summer season (typically June to August)
    summer_months = ['June', 'July', 'August']
    summer_data = dataset[dataset['month_name'].isin(summer_months)]
    
    # Check if there are any days in the summer season with tmin below 10 degrees
    result = summer_data['tmin'] < 10
    
    # Return True if there is at least one day, otherwise False
    return result.any()
",bool,TRUE,TRUE
How many days had a maximum temperature above 30 degrees?,What is the count of days where the maximum temperature exceeded 30 degrees?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter rows where tmax exceeds 30 degrees
    hot_days = dataset[dataset[""tmax""] > 30]
    
    # Count the number of unique days
    count_of_hot_days = hot_days.shape[0]

    return count_of_hot_days
",int64,5500,5500
"On average, what's the minimum temperature during winters?",What is the average minimum temperature during winter months?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Define winter months as season 'invierno' in this context
    winter_months = ['diciembre', 'enero', 'febrero']
    
    # Filter the data for winter months
    winter_data = dataset[dataset['month_name'].isin(winter_months)]
    
    # Calculate the average minimum temperature during these months
    avg_min_temp_winter = winter_data['tmin'].mean()
    
    return avg_min_temp_winter
",float64,,2.719608277
How many unique days had solar radiation measurements?,,,,ERROR,28615
What's the highest wind speed ever recorded?,What is the maximum value recorded for the racha field?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_racha_value = dataset['racha'].max()
    return max_racha_value
",float64,32.2,32.2
On which weekday did the highest temperature ever occur?,What was the weekday on which the highest maximum temperature occurred?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant column for the maximum temperature
    max_temp_day = db.loc[db['tmax'] == db['tmax'].max(), 'weekday_name']
    
    # Return the result as a single string value
    return max_temp_day.item()
",string,Friday,Friday
In which season do we find the highest average solar radiation?,During which season is the average solar radiation highest?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the average solar radiation for each season
    avg_sol_per_season = dataset.groupby('season')['sol'].mean()
    
    # Find the season with the highest average solar radiation
    max_avg_sol_season = avg_sol_per_season.idxmax()
    
    return max_avg_sol_season
",category,Summer,Summer
Which month had the lowest average wind speed?,,,,ERROR,October
On what date was the highest pressure ever recorded?,,,,ERROR,2016-12-22T00:00:00Z
What are the top 3 months with the highest average maximum temperatures?,Which are the three months with the highest average tmax values?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the mean tmax for each month
    monthly_tmax_mean = dataset.groupby('month_name')['tmax'].mean().reset_index()
    
    # Sort the months based on their average tmax in descending order
    sorted_monthly_tmax = monthly_tmax_mean.sort_values(by='tmax', ascending=False)
    
    # Get the top three month names with highest average tmax
    top_three_months = sorted_monthly_tmax.head(3)['month_name'].tolist()
    
    return top_three_months
",list of (type),"['July', 'August', 'June']","['July', 'August', 'June']"
"Which are the 5 weekdays with the most rain, ranked from highest to lowest?","What are the names of the top 5 weekdays with the highest rainfall, ordered from greatest to least?","def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns
    relevant_data = db[['fecha', 'prec', 'weekday_name']]
    
    # Group by weekday_name and sum the rainfall
    grouped_data = relevant_data.groupby('weekday_name')['prec'].sum().reset_index()
    
    # Sort the data in descending order of rainfall
    sorted_data = grouped_data.sort_values(by='prec', ascending=False)
    
    # Get the top 5 weekdays with the highest rainfall
    top_5_weekdays = sorted_data.head(5)['weekday_name'].tolist()
    
    return top_5_weekdays
",list of strings,"['Friday', 'Sunday', 'Saturday', 'Thursday', 'Wednesday']","['Friday', 'Sunday', 'Saturday', 'Thursday', 'Wednesday']"
"List the 4 seasons ranked by average solar radiation, from highest to lowest.",,,,ERROR,"['Summer', 'Spring', 'Autumn', 'Winter']"
Which 2 months recorded the lowest average minimum temperatures?,,,,ERROR,"['January', 'December']"
List the top 5 recorded maximum temperatures.,,,,ERROR,"[40.7, 40.6, 40.0, 40.0, 40.0]"
What are the 4 lowest wind speeds ever recorded?,What are the velocities with the four smallest recorded values in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'velmedia' column from the dataset
    velocities = dataset['velmedia']
    
    # Get the four smallest values in the 'velmedia' column
    smallest_four_velocities = velocities.nsmallest(4)
    
    return list(smallest_four_velocities.values)
",list of float64,"[np.float64(0.0), np.float64(0.0), np.float64(0.0), np.float64(0.0)]","[0.0, 0.0, 0.0, 0.0]"
Rank the highest 3 solar radiation measurements.,What are the top 3 solar radiation measurements ranked in descending order?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    sorted_data = dataset.sort_values(by='sol', ascending=False).head(3)
    top_three_solar_measurements = sorted_data['sol'].tolist()
    
    return top_three_solar_measurements
",list of float64,"[14.9, 14.8, 14.7]","[14.9, 14.8, 14.7]"
Which 6 days of the year (numbered from 1 to 365/366) had the highest average temperatures?,,,,ERROR,"[209, 210, 208, 207, 211, 205]"
"Are there records where the RETRINOIN_xRZI exceeds 10,000?","Are there any entries in the dataset where the RETRINOIN_xRZI value is greater than 10,000?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there are any entries in the dataset where RETRINOIN_xRZI value is greater than 10,000
    result = dataset['RETRINOIN_xRZI'] > 10000
    
    # Return True if there exists at least one entry with RETRINOIN_xRZI greater than 10,000, otherwise False
    return result.any()
",bool,TRUE,TRUE
Are there any female respondents who belong to the ESTE NUTS1 region?,Are there any female respondents in the ESTE NUTS1 region?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the 'NUTS1' column value equal to 'ESTE'
    este_nuts1_filter = dataset[dataset['NUTS1'] == 'ESTE']
    
    # Check if there are any female respondents in the filtered dataset
    is_female_present = any(este_nuts1_filter['SEXO'] == 'F')
    
    return is_female_present
",bool,FALSE,TRUE
Do we have respondents who fall under both PRIVADO control and NACIONAL market?,Are there any respondents that belong to the PRIVADO control group and are in the NACIONAL market category?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for respondents in the PRIVADO control group and NACIONAL market category
    filtered_data = dataset[(dataset['CONTROL'] == 'PRIVADO') & (dataset['MERCADO'] == 'NACIONAL')]
    
    # Check if there are any such respondents
    result = not filtered_data.empty
    
    return result
",bool,TRUE,TRUE
"Are there records with RETRINOIN_WwQk less than 5,000?","Are there any entries where the RETRINOIN_WwQk value is less than 5,000?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    result = dataset['RETRINOIN_WwQk'] < 5000
    return result.any()
",bool,TRUE,TRUE
How many unique respondents belong to the ESTE NUTS1 region?,,,,ERROR,58852
"On average, what's the RETRINOIN value for male respondents?",,,,ERROR,29370.2437
What's the highest value for RETRINOIN_ac1q in the dataset?,What is the maximum value of RETRINOIN_ac1q in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_value = dataset[""RETRINOIN_ac1q""].max()
    
    return max_value
",float64,199496.34,199496.34
How many unique clusters are present in the 'umap_cluster' column?,,,,ERROR,73
Which 'ANOS2' category has the most number of respondents?,What is the 'ANOS2' category that has the highest number of respondents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by ANOS2 and count the number of respondents in each category
    group_by_ANOS2 = dataset.groupby('ANOS2').size()
    
    # Find the category with the maximum number of respondents
    max_respondents_category = group_by_ANOS2.idxmax()

    return max_respondents_category
",category,DE 40 A 49,DE 40 A 49
In which 'NUTS1' region do we find the highest average RETRINOIN?,,,,ERROR,COMUNIDAD DE MADRID
Which 'MERCADO' category is the least common in the dataset?,,,,ERROR,UNIÃ“N EUROPEA
Which 'umap_cluster' is the most dominant in the dataset?,,,,ERROR,Cluster 1
Which are the 2 least common age categories in the dataset?,,,,ERROR,"['MENOS 19 AÃ‘OS', 'MÃS DE 59']"
Which are the 3 least common 'ANOS2' categories in the dataset?,What are the three least frequent categories for ANOS2 in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the column name from the question
    column_name = question.split('for ')[1].split(' in')[0].strip()
    
    # Get the value counts for the specified column
    value_counts = dataset[column_name].value_counts().index.tolist()
    
    # Return the three least frequent categories as a list of strings
    return value_counts[-3:]

",list of string,"['DE 20 A 29', 'MÃS DE 59', 'MENOS 19 AÃ‘OS']","['MENOS 19 AÃ‘OS', 'MÃS DE 59', 'DE 20 A 29']"
List the top 5 'NUTS1' regions by frequency.,Which are the top 5 NUTS1 regions based on frequency?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the NUTS1 column from the dataset
    nuts1_column = dataset['NUTS1']
    
    # Get the value counts of each unique NUTS1 region and sort them in descending order
    nuts1_value_counts = nuts1_column.value_counts().sort_values(ascending=False)
    
    # Retrieve the top 5 NUTS1 regions based on frequency
    top_5_nuts1_regions = nuts1_value_counts.index.tolist()[:5]
    
    return top_5_nuts1_regions
",list of string,"['ESTE', 'COMUNIDAD DE MADRID', 'NORESTE', 'SUR', 'CENTRO']","['ESTE', 'COMUNIDAD DE MADRID', 'NORESTE', 'SUR', 'CENTRO']"
Which 2 'umap_cluster' categories are the least represented?,What are the two 'umap_cluster' categories that have the smallest representation in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the frequency of each umap_cluster category
    cluster_counts = dataset['umap_cluster'].value_counts()

    # Get the categories with the smallest representation
    smallest_categories = cluster_counts.nsmallest(2).index.tolist()

    return smallest_categories
",list of category,"['Cluster 71', 'Cluster 73']","['Cluster 71', 'Cluster 73']"
List the top 5 recorded RETRINOIN values.,,,,ERROR,"[4225998.36, 4153877.05, 4021902.63, 3903390.45, 2192967.2]"
What are the 4 lowest x values in the dataset?,What are the x values corresponding to the four smallest RETRINOIN_xRZI in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by RETRINOIN_xRZI in ascending order and get the first four values
    sorted_dataset = dataset.sort_values(by='RETRINOIN_xRZI').head(4)
    
    # Extract the x values corresponding to these entries
    x_values = sorted_dataset['x'].tolist()
    
    return x_values
",list of float64,"[7686.3, 27848.854, 5506.062, -1476.8634]","[-23714.217, -23706.5, -23698.271, -23697.166]"
Rank the highest 3 y values in the dataset.,What are the top 3 highest values in the y column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_three_y_values = dataset['y'].nlargest(3)
    return top_three_y_values.tolist()
",list of float64,"[28352.02, 28313.926, 28283.78]","[28352.02, 28313.926, 28283.78]"
What are the largest 2 y values in the dataset?.,What are the top 2 highest values in the y column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extracting the 'y' column from the dataset
    y_values = dataset['y']
    
    # Sorting the values in descending order and taking the top 2 values
    top_y_values = y_values.sort_values(ascending=False).head(2)
    
    return top_y_values.tolist()
",list of float64,"[28352.02, 28313.926]","[28352.02, 28313.926]"
Is the most visited URL related to 'no code data science'?,Is the URL with the highest ranking associated with the keyword 'no code data science'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the keyword 'no code data science'
    filtered_data = dataset[dataset['Keyword'] == 'no code data science']
    
    # Check if there is any entry with the highest ranking
    if not filtered_data.empty:
        max_ranking_entry = filtered_data.loc[filtered_data['Ranking'] == filtered_data['Ranking'].max()]
        return not max_ranking_entry.empty
    else:
        return False

# Note: The expected answer type is bool, so we directly return the boolean result.
",bool,TRUE,TRUE
Does any URL have a competition level of 'Low'?,Are there any URLs in the dataset that have a competition level marked as 'Low'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    low_competition_urls = dataset.loc[dataset[""Competition""] == ""Low"", ""URLs""]
    
    # Check if there are any URLs with 'Low' competition level
    result = not low_competition_urls.empty
    
    return result
",bool,TRUE,TRUE
Are there any URLs with an average monthly searches above 1000?,,,,ERROR,FALSE
Is the URL with the lowest ranking also the one with the highest monthly searches?,Does the URL that has the lowest ranking also have the highest average monthly searches?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    url_with_lowest_ranking = dataset.loc[dataset[""Ranking""] == dataset[""Ranking""].min()]
    is_answer_true = url_with_lowest_ranking[""Avg. monthly searches""].max() == dataset[""Avg. monthly searches""].max()

    return is_answer_true
",bool,TRUE,TRUE
How many unique URLs are in the dataset?,What is the count of distinct URLs in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    distinct_urls_count = dataset['URLs'].nunique()
    
    return distinct_urls_count
",int64,28,28
What is the lowest ranking value in the dataset?,What is the minimum value present in the Ranking column of the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_ranking_value = dataset[""Ranking""].min()
    
    return min_ranking_value
",uint8,1,11
What is the minimum average monthly searches in the dataset?,,,,ERROR,50
How many unique keywords are present in the dataset?,What is the count of distinct keywords in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    distinct_keyword_count = dataset['Keyword'].nunique()
    
    return distinct_keyword_count
",int64,6,6
What is the competition level of the highest-ranked URL?,Which is the competition level associated with the URL that has the highest ranking?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the DataFrame to get rows where 'Ranking' is equal to max('Ranking')
    max_ranking_row = db.loc[db['Ranking'] == db['Ranking'].max()]
    
    # Extract the 'Competition' value from the filtered row
    competition_level = max_ranking_row['Competition'].iloc[0]
    
    return competition_level
",category,Low,Medium
What keyword has the highest average monthly searches?,Which keyword has the highest mean value of average monthly searches?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by Keyword and calculate the mean of Avg. monthly searches
    keyword_searches = dataset.groupby('Keyword')['Avg. monthly searches'].mean().reset_index()
    
    # Find the keyword with the highest mean value of average monthly searches
    max_mean_keyword = keyword_searches.loc[keyword_searches['Avg. monthly searches'] == keyword_searches['Avg. monthly searches'].max(), 'Keyword']
    
    # Return the result as a single string
    return max_mean_keyword.iloc[0]

",category,no code data science,no code data science
What is the competition level for the URL with the highest ranking?,Which is the competition level associated with the URL that has the highest ranking?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the row with the maximum ranking
    max_ranking_row = dataset.loc[dataset[""Ranking""] == dataset[""Ranking""].max()]
    
    # Return the competition level associated with that URL
    competition_level = max_ranking_row[""Competition""].iloc[0]
    
    return competition_level
",category,Low,Low
What keyword is associated with the URL with the lowest ranking?,Which keyword is linked to the URL that has the lowest ranking?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns from the DataFrame
    urls_df = db[['URLs', 'Ranking']]
    
    # Finding the URL with the lowest ranking
    min_rank_url = urls_df.loc[urls_df['Ranking'] == urls_df['Ranking'].min(), 'URLs'].iloc[0]
    
    # Joining back to the main dataset to find the keyword associated with this URL
    result_df = db[['URLs', 'Keyword']]
    keyword_for_min_rank_url = result_df.loc[result_df['URLs'] == min_rank_url, 'Keyword'].iloc[0]
    
    return keyword_for_min_rank_url
",category,no code data science,no code data science
What are the top 3 URLs with the highest average monthly searches?,Which are the three URLs that have the highest average monthly search volume?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by 'Avg. monthly searches' in descending order and get the top 3 URLs
    top_urls = dataset.nlargest(3, columns='Avg. monthly searches')['URLs'].tolist()
    
    return top_urls
",list of (string),"['https://www.obviously.ai/', 'https://venturebeat.com/2021/10/12/no-code-ai-analytics-may-soon-automate-data-science-jobs/', 'https://hbr.org/2021/11/how-no-code-platforms-can-bring-ai-to-small-and-midsize-businesses']","['https://www.obviously.ai/', 'https://venturebeat.com/2021/10/12/no-code-ai-startup-obviously-ai-raises-4-7m/', 'https://hbr.org/2021/11/how-no-code-platforms-could-disrupt-the-it-industry']"
List the bottom 2 competition levels of URLs with ranking better than 5.,,,,ERROR,"['Medium', 'Unknown']"
Which are the 4 keywords associated with the URLs of lowest rankings?,,,,ERROR,"['no code data science', 'no code data analytics', 'no code data science', 'no code data science']"
Enumerate the 3 URLs with the highest ranking.,What are the URLs that have the top three rankings?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant columns from the DataFrame
    urls_df = db[['URLs', 'Ranking']]
    
    # Sort the dataframe by Ranking in ascending order to get top rankings at the bottom
    sorted_urls_df = urls_df.sort_values(by='Ranking')
    
    # Get the top three URLs based on ranking
    top_three_urls = sorted_urls_df.head(3)['URLs'].tolist()
    
    return top_three_urls
",list of (string),"['https://www.obviously.ai/', 'https://hbr.org/2021/11/how-no-code-platforms-can-bring-ai-to-small-and-midsize-businesses', 'https://www.obviously.ai/']","['https://www.obviously.ai/', 'https://www.obviously.ai/', 'https://venturebeat.com/2021/10/12/no-code-ai-startup-obviously-ai-raises-4-7m/']"
What are the lowest 4 rankings associated with the keyword 'no code data science'?,Which are the four lowest Ranking values associated with the Keyword 'no code data science'?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataframe for the keyword 'no code data science'
    filtered_data = db[db['Keyword'] == 'no code data science']
    
    # Sort the data by Ranking in ascending order and get the top 4 lowest values
    lowest_rankings = filtered_data.sort_values(by='Ranking')[:4]['Ranking'].tolist()
    
    return lowest_rankings
",list of int64,"[1, 2, 3, 4]","[10, 9, 8, 7]"
List the bottom 3 average monthly searches for URLs with medium competition.,"Which are the least popular URLs with medium competition based on average monthly searches, and what are their respective search volumes?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for URLs with medium competition
    medium_competition_urls = dataset[dataset['Competition'] == 'medium']
    
    # Sort by 'Avg. monthly searches' in ascending order to get the least popular ones
    least_popular_urls = medium_competition_urls.sort_values(by='Avg. monthly searches', ascending=True)
    
    # Extract the URLs and their respective search volumes
    result = list(least_popular_urls[['URLs', 'Avg. monthly searches']].values.flatten())
    
    return result
",list of int64,[],"[50, 50, 50]"
Provide the lowest 5 rankings of URLs with low competition (if any).,Which are the five URLs with the lowest rankings and low competition?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include entries where Competition is 'low'
    low_competition_data = db.loc[db['Competition'] == 'low']
    
    # Sort the dataset by Ranking in ascending order and take the top 5
    result = low_competition_data.sort_values(by='Ranking').head(5)
    
    # Extract the URLs from the result
    urls = result['URLs'].tolist()
    
    return urls
",list of uint8,[],"[11, 10, 10, 9, 9]"
Specify the bottom 2 average monthly searches for URLs with the highest rankings.,,,,ERROR,"[50, 50]"
Is there any wine with a quality rating of 10?,Are there any wines with a quality rating exactly equal to 10?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if the 'quality' column exists in the dataset
    if ""quality"" not in dataset.columns:
        return False
    
    # Check for any wines with a quality rating exactly equal to 10
    result = dataset[""quality""].eq(10).any()
    
    return result
",bool,FALSE,FALSE
Are there any wines with residual sugar above 15g/dm^3?,Do any wines have a residual sugar content exceeding 15g/dmÂ³?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there are any wines with residual sugar exceeding 15g/dmÂ³
    has_high_residual_sugar = dataset[""residual sugar""] > 15.0
    
    # Get the result as a boolean
    answer = has_high_residual_sugar.any()
    
    return answer
",bool,TRUE,TRUE
Is the highest alcohol content wine also the one with the highest quality rating?,Does the wine with the highest alcohol content also receive the highest quality rating?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_alcohol_wine = dataset.loc[dataset[""alcohol""] == dataset[""alcohol""].max()]
    is_highest_quality = max_alcohol_wine[""quality""].eq(max_alcohol_wine[""quality""].max()).bool()

    return is_highest_quality
",bool,TRUE,FALSE
Does any wine have a pH level below 2.5?,Are there any wines with a pH level less than 2.5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there are any wines with pH less than 2.5
    wines_with_low_pH = dataset.loc[dataset[""pH""] < 2.5]
    
    # Return True if there is at least one wine with pH less than 2.5, otherwise False
    return not wines_with_low_pH.empty
",bool,FALSE,FALSE
How many unique quality ratings are there in the dataset?,What is the total number of distinct quality ratings present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_qualities = dataset[""quality""].nunique()
    
    return unique_qualities
",int64,6,6
What is the maximum fixed acidity level found in the dataset?,What is the highest fixed acidity value recorded in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_acidity = dataset[""fixed acidity""].max()
    
    return max_acidity
",float64,15.9,15.9
What is the minimum volatile acidity level in the dataset?,What is the lowest value of volatile acidity recorded in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_volatile_acidity = dataset[""volatile acidity""].min()
    return min_volatile_acidity
",float64,0.12,0.12
How many wines have free sulfur dioxide above 50 mg/dm^3?,What is the count of wines with free sulfur dioxide exceeding 50 mg/dm^3?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    count_wines = dataset.loc[dataset[""free sulfur dioxide""] > 50][""free sulfur dioxide""].count()
    return count_wines
",int64,16,16
What is the quality rating of the wine with the highest alcohol content?,What is the quality rating associated with the wine having the highest alcohol content?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_alcohol_wine = dataset.loc[dataset[""alcohol""] == dataset[""alcohol""].max()]
    quality_rating = max_alcohol_wine[""quality""].iloc[0]
    
    return quality_rating
",uint8,5,5
What is the quality rating of the wine with the highest fixed acidity?,What is the quality rating associated with the wine that has the highest fixed acidity?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_acidity_wine = dataset.loc[dataset[""fixed acidity""] == dataset[""fixed acidity""].max()]
    quality_rating = max_acidity_wine[""quality""].values[0]
    
    return quality_rating
",uint8,5,5
What is the quality rating of the wine with the lowest volatile acidity?,What is the quality rating associated with the wine having the minimum volatile acidity?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to find the row with the minimum volatile acidity
    min_volatile_acidity_wine = db.loc[db[""volatile acidity""].idxmin()]
    
    # Extract the quality rating associated with this wine
    quality_rating = min_volatile_acidity_wine[""quality""]
    
    return quality_rating
",uint8,7,7
What is the quality rating of the wine with the highest pH level?,What is the quality rating of the wine having the maximum pH level?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_ph_level_wine = db.loc[db[""pH""] == db[""pH""].max()]
    quality_rating = max_ph_level_wine[""quality""].values[0]
    
    return quality_rating
",uint8,6,6
List the quality ratings of the top 3 wines with the highest alcohol content.,What are the quality ratings for the top 3 wines with the highest alcohol content?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by alcohol in descending order and get the top 3 entries
    top_wines = dataset.nlargest(3, 'alcohol')
    
    # Extract the quality ratings of these top wines
    qualities = list(top_wines['quality'])
    
    return qualities
",list of uint8,"[5, 6, 6]","['5', '6', '6']"
Enumerate the quality ratings of the bottom 2 wines with the lowest residual sugar.,,,,ERROR,"['6', '6']"
Which are the quality ratings of the top 5 wines with the highest density?,"What are the quality ratings for wines that have the highest density, limited to the top 5?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the maximum density value
    max_density = dataset[""density""].max()
    
    # Filter the dataset to only include rows with the maximum density
    densest_wines = dataset[dataset[""density""] == max_density]
    
    # Get the top 5 entries based on density (though there should be only one as we are filtering by max density)
    top_5_densest = densest_wines.head(5)
    
    # Extract the quality ratings for these wines
    qualities = list(top_5_densest[""quality""])
    
    return qualities
",list of uint8,"[6, 6]","['6', '6', '7', '5', '5']"
List the quality ratings of the bottom 4 wines with the lowest pH level.,What are the quality ratings for the 4 wines with the lowest pH levels?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by pH in ascending order to get the wines with the lowest pH levels
    sorted_wines = dataset.sort_values(by='pH', ascending=True)
    
    # Select the top 4 wines based on pH
    top_4_wines = sorted_wines.head(4)
    
    # Extract the quality ratings for these top 4 wines
    quality_ratings = list(top_4_wines['quality'])
    
    return quality_ratings
",list of uint8,"[4, 6, 6, 8]","['4', '6', '6', '8']"
What are the alcohol contents of the top 4 wines with the highest quality ratings?,What are the alcohol contents for the top 4 wines ranked by quality?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by 'quality' in descending order and select the top 4 rows
    top_wines = dataset.sort_values(by='quality', ascending=False).head(4)
    
    # Extract the 'alcohol' values from these top wines
    alcohol_contents = top_wines['alcohol'].tolist()
    
    return alcohol_contents
",list of float64,"[11.0, 10.0, 12.9, 12.5]","['12.8', '12.6', '12.9', '9.8']"
List the volatile acidity levels of the bottom 3 wines with the lowest quality ratings.,What are the volatile acidity levels for the 3 wines with the lowest quality ratings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    low_quality_wines = dataset.nsmallest(3, 'quality')
    volatile_acidity_levels = low_quality_wines['volatile acidity'].tolist()
    
    return volatile_acidity_levels
",list of float64,"[0.58, 0.61, 1.185]","['0.58', '0.61', '1.185']"
Enumerate the fixed acidity levels of the top 5 wines with the highest quality ratings.,What are the fixed acidity levels for the top 5 wines with the highest quality ratings?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Load the dataset into a DataFrame
    df = pd.DataFrame(db)
    
    # Sort the wines by quality in descending order and get the top 5
    top_wines = df.sort_values(by='quality', ascending=False).head(5)
    
    # Extract the fixed acidity levels for these top 5 wines
    fixed_acidity_levels = list(top_wines['fixed acidity'])
    
    return fixed_acidity_levels
",list of float64,"[10.7, 7.2, 5.6, 9.1, 8.6]","['7.9', '10.3', '5.6', '12.6', '11.3']"
Provide the residual sugar levels of the bottom 2 wines with the lowest quality ratings.,What are the residual sugar levels for the two wines with the lowest quality ratings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by quality in ascending order and get the top two rows
    low_quality_wines = dataset.loc[dataset['quality'].sort_values().head(2).index]
    
    # Extract the residual sugar levels for these wines
    answer = low_quality_wines['residual sugar'].tolist()
    
    return answer
",list of float64,"[5.7, 1.5]","['2.2', '2.1']"
Is there any purchase with a total cost above 1000?,,,,ERROR,TRUE
Are there any customers who made a purchase using cash?,,,,ERROR,TRUE
Is the customer with the highest total purchase cost a 'Member'?,Does the customer who has made the highest total purchase cost belong to the 'Member' category?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_total_customer = dataset.loc[dataset[""Total""].idxmax()][""Customer type""]
    is_member = max_total_customer == ""Member""
    
    return is_member
",bool,TRUE,TRUE
Does any customer with a rating strictly above 9 use 'Ewallet' as their payment method?,Are there any customers who rated the product with a score higher than 9 and used 'Ewallet' as their payment method?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    result = dataset[(dataset['Rating'] > 9) & (dataset['Payment'] == 'Ewallet')]
    return not result.empty
",bool,TRUE,TRUE
How many unique branches are there in the dataset?,What is the total number of distinct branches present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    num_distinct_branches = len(dataset['Branch'].unique())
    
    return num_distinct_branches
",int64,3,3
What is the maximum quantity of products bought in a single purchase?,What is the highest value found in the 'Quantity' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_quantity = dataset[""Quantity""].max()
    return max_quantity
",uint8,10,10
What is the minimum total cost of a purchase in the dataset?,What is the smallest value of the total cost in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    min_total_cost = db['Total'].min()
    return min_total_cost
",float64,10.6785,10.6785
How many purchases were made in Yangon city?,What is the total number of purchases made in Yangon?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for purchases made in Yangon
    yangon_purchases = dataset[dataset['City'] == 'Yangon']
    
    # Get the total number of purchases made in Yangon
    total_purchases = len(yangon_purchases)
    
    return total_purchases
",int64,340,340
What is the payment method used for the purchase with the highest total cost?,Which payment method was used for the purchase that had the highest total cost?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the row with the maximum total cost
    max_total_purchase = dataset.loc[dataset[""Total""] == dataset[""Total""].max()]
    
    # Return the payment method used for this purchase
    payment_method = max_total_purchase[""Payment""].values[0]
    
    return payment_method
",category,Credit card,Credit card
What is the product line of the purchase with the highest total cost?,Which product line had the highest total cost in any purchase?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include relevant columns
    relevant_data = dataset[['Product line', 'Total']]
    
    # Group by product line and sum the total cost for each product line
    grouped_data = relevant_data.groupby('Product line')['Total'].sum().reset_index()
    
    # Find the product line with the highest total cost
    max_cost_product_line = grouped_data.loc[grouped_data['Total'] == grouped_data['Total'].max(), 'Product line']
    
    # Return the result as a single string value
    return max_cost_product_line.iloc[0]

",string,Food and beverages,Fashion accessories
What is the customer type of the purchase with the lowest total cost?,Which customer type made the purchase with the lowest total cost?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the row with the minimum total value
    min_total_row = dataset.loc[dataset['Total'] == dataset['Total'].min()]
    
    # Return the 'Customer type' from that row
    customer_type = min_total_row['Customer type'].iloc[0]
    
    return customer_type
",category,Member,Member
What is the gender of the customer with the highest total purchase cost?,Which gender corresponds to the customer who spent the highest amount at the supermarket?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for the row with the maximum total spending
    max_spending_row = dataset.loc[dataset['Total'].idxmax()]
    
    # Extract the gender of this customer
    customer_gender = max_spending_row['Gender']
    
    return customer_gender
",category,Female,Female
List the payment methods of the top 3 purchases with the highest total cost.,What are the payment methods used for the top three most expensive purchases?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by total in descending order to get the top three most expensive purchases
    top_three_expensive = dataset.sort_values(by='Total', ascending=False).head(3)
    
    # Extract the payment methods for these top three purchases
    payments = top_three_expensive['Payment'].tolist()
    
    return payments
",list of (category),"['Credit card', 'Credit card', 'Ewallet']","['Credit card', 'Credit card', 'Ewallet']"
Enumerate the product lines of the bottom 2 purchases with the lowest total cost.,What are the product lines associated with the two purchases that have the lowest total cost?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by 'Total' in ascending order to get the lowest totals first
    sorted_by_total = dataset.sort_values(by='Total', ascending=True)
    
    # Get the product lines for the first two rows (lowest total costs)
    product_lines_lowest_totals = sorted_by_total['Product line'].head(2).tolist()
    
    return product_lines_lowest_totals
",list of (category),"['Sports and travel', 'Fashion accessories']","['Sports and travel', 'Fashion accessories']"
Which are the customer types of the top 5 purchases with the highest total cost?,What are the customer types associated with the top 5 most expensive purchases?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by total in descending order to get the top 5 most expensive purchases
    top_expensive_purchases = dataset.sort_values(by='Total', ascending=False).head(5)
    
    # Extract the customer types for these top purchases
    customer_types = top_expensive_purchases['Customer type'].tolist()
    
    return customer_types
",list of (category),"['Member', 'Normal', 'Member', 'Normal', 'Normal']","['Member', 'Normal', 'Member', 'Normal', 'Normal']"
List the genders of the bottom 4 purchases with the lowest total cost.,Which genders are associated with the 4 customers who spent the least amount?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for total sales and sort in ascending order
    sorted_customers = dataset.sort_values(by='Total', ascending=True).head(4)
    
    # Extract the genders associated with these customers
    result_genders = sorted_customers['Gender'].tolist()
    
    return result_genders
",list of string,"['Male', 'Female', 'Female', 'Male']","['Male', 'Female', 'Female', 'Male']"
What are the quantities of products bought in the top 4 purchases with the highest total cost?,What are the quantities purchased for the top 4 most expensive products?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract relevant columns
    product_line = db[['Product line', 'Unit price']]
    
    # Sort by unit price in descending order and get the top 4 most expensive products
    top_expensive_products = product_line.sort_values(by='Unit price', ascending=False).head(4)
    
    # Get the quantities for these top 4 most expensive products from the original dataset
    quantities = db.loc[db['Product line'].isin(top_expensive_products['Product line']), 'Quantity']
    
    return list(quantities.values)

",list of int64,"[np.uint8(7), np.uint8(7), np.uint8(8), np.uint8(7), np.uint8(10), np.uint8(2), np.uint8(4), np.uint8(10), np.uint8(6), np.uint8(7), np.uint8(6), np.uint8(2), np.uint8(3), np.uint8(2), np.uint8(3), np.uint8(8), np.uint8(1), np.uint8(2), np.uint8(9), np.uint8(5), np.uint8(9), np.uint8(8), np.uint8(2), np.uint8(1), np.uint8(5), np.uint8(8), np.uint8(8), np.uint8(1), np.uint8(2), np.uint8(6), np.uint8(2), np.uint8(9), np.uint8(10), np.uint8(4), np.uint8(1), np.uint8(2), np.uint8(2), np.uint8(8), np.uint8(10), np.uint8(3), np.uint8(6), np.uint8(9), np.uint8(10), np.uint8(4), np.uint8(10), np.uint8(2), np.uint8(6), np.uint8(10), np.uint8(1), np.uint8(10), np.uint8(9), np.uint8(9), np.uint8(9), np.uint8(5), np.uint8(6), np.uint8(5), np.uint8(7), np.uint8(5), np.uint8(1), np.uint8(6), np.uint8(4), np.uint8(10), np.uint8(7), np.uint8(9), np.uint8(1), np.uint8(10), np.uint8(6), np.uint8(1), np.uint8(9), np.uint8(7), np.uint8(6), np.uint8(6), np.uint8(2), np.uint8(3), np.uint8(7), np.uint8(9), np.uint8(9), np.uint8(3), np.uint8(5), np.uint8(1), np.uint8(2), np.uint8(7), np.uint8(9), np.uint8(8), np.uint8(8), np.uint8(7), np.uint8(5), np.uint8(9), np.uint8(9), np.uint8(7), np.uint8(6), np.uint8(4), np.uint8(6), np.uint8(3), np.uint8(6), np.uint8(10), np.uint8(8), np.uint8(10), np.uint8(10), np.uint8(10), np.uint8(6), np.uint8(6), np.uint8(10), np.uint8(4), np.uint8(8), np.uint8(8), np.uint8(4), np.uint8(7), np.uint8(9), np.uint8(8), np.uint8(5), np.uint8(9), np.uint8(6), np.uint8(1), np.uint8(2), np.uint8(8), np.uint8(10), np.uint8(10), np.uint8(7), np.uint8(5), np.uint8(9), np.uint8(7), np.uint8(3), np.uint8(7), np.uint8(10), np.uint8(8), np.uint8(7), np.uint8(8), np.uint8(4), np.uint8(1), np.uint8(4), np.uint8(3), np.uint8(2), np.uint8(4), np.uint8(1), np.uint8(2), np.uint8(1), np.uint8(4), np.uint8(6), np.uint8(10), np.uint8(5), np.uint8(9), np.uint8(10), np.uint8(3), np.uint8(5), np.uint8(3), np.uint8(7), np.uint8(1), np.uint8(5), np.uint8(8), np.uint8(1), np.uint8(2), np.uint8(9), np.uint8(8), np.uint8(2), np.uint8(9), np.uint8(4), np.uint8(10), np.uint8(2), np.uint8(5), np.uint8(5), np.uint8(1), np.uint8(2), np.uint8(2), np.uint8(4), np.uint8(8), np.uint8(8), np.uint8(5), np.uint8(10), np.uint8(2), np.uint8(4), np.uint8(8), np.uint8(4), np.uint8(6), np.uint8(4), np.uint8(4), np.uint8(10), np.uint8(1), np.uint8(7), np.uint8(4), np.uint8(4), np.uint8(10), np.uint8(5), np.uint8(2), np.uint8(9), np.uint8(2), np.uint8(6), np.uint8(7), np.uint8(10), np.uint8(4), np.uint8(10), np.uint8(10), np.uint8(8), np.uint8(1), np.uint8(1), np.uint8(6), np.uint8(4), np.uint8(5), np.uint8(1), np.uint8(9), np.uint8(7), np.uint8(10), np.uint8(6), np.uint8(4), np.uint8(1), np.uint8(2), np.uint8(1), np.uint8(7), np.uint8(8), np.uint8(2), np.uint8(6), np.uint8(2), np.uint8(9), np.uint8(7), np.uint8(4), np.uint8(1), np.uint8(6), np.uint8(5), np.uint8(6), np.uint8(4), np.uint8(4), np.uint8(9), np.uint8(5), np.uint8(5), np.uint8(9), np.uint8(6), np.uint8(7), np.uint8(7), np.uint8(3), np.uint8(9), np.uint8(8), np.uint8(10), np.uint8(10), np.uint8(7), np.uint8(9), np.uint8(10), np.uint8(10), np.uint8(1), np.uint8(6), np.uint8(4), np.uint8(4), np.uint8(10), np.uint8(2), np.uint8(6), np.uint8(6), np.uint8(5), np.uint8(5), np.uint8(9), np.uint8(7), np.uint8(4), np.uint8(4), np.uint8(1), np.uint8(10), np.uint8(9), np.uint8(3), np.uint8(10), np.uint8(10), np.uint8(1), np.uint8(5), np.uint8(9), np.uint8(6), np.uint8(4), np.uint8(1), np.uint8(5), np.uint8(7), np.uint8(4), np.uint8(4), np.uint8(4), np.uint8(5), np.uint8(10), np.uint8(2), np.uint8(5), np.uint8(3), np.uint8(8), np.uint8(1), np.uint8(4), np.uint8(1), np.uint8(2), np.uint8(10), np.uint8(8), np.uint8(1), np.uint8(9), np.uint8(7), np.uint8(5), np.uint8(10), np.uint8(2), np.uint8(7), np.uint8(1), np.uint8(9), np.uint8(4), np.uint8(6), np.uint8(8), np.uint8(9), np.uint8(1), np.uint8(7), np.uint8(1), np.uint8(3), np.uint8(1), np.uint8(1), np.uint8(1), np.uint8(5), np.uint8(4), np.uint8(10), np.uint8(7), np.uint8(6), np.uint8(6), np.uint8(4), np.uint8(10), np.uint8(8), np.uint8(3), np.uint8(5), np.uint8(10), np.uint8(5), np.uint8(10), np.uint8(10), np.uint8(4), np.uint8(10), np.uint8(4), np.uint8(1), np.uint8(9), np.uint8(2), np.uint8(10), np.uint8(8), np.uint8(10), np.uint8(2), np.uint8(8), np.uint8(1), np.uint8(8), np.uint8(1), np.uint8(1), np.uint8(2), np.uint8(2), np.uint8(1), np.uint8(3), np.uint8(5), np.uint8(6), np.uint8(7), np.uint8(5), np.uint8(7), np.uint8(7), np.uint8(1), np.uint8(5), np.uint8(5), np.uint8(2), np.uint8(5), np.uint8(6), np.uint8(6), np.uint8(2), np.uint8(5), np.uint8(4), np.uint8(2), np.uint8(9), np.uint8(6), np.uint8(8), np.uint8(5), np.uint8(7), np.uint8(1), np.uint8(1), np.uint8(4), np.uint8(3), np.uint8(1), np.uint8(4), np.uint8(4), np.uint8(10), np.uint8(9), np.uint8(5), np.uint8(3), np.uint8(9), np.uint8(9), np.uint8(3), np.uint8(2), np.uint8(3), np.uint8(2), np.uint8(10), np.uint8(9), np.uint8(7), np.uint8(7), np.uint8(5), np.uint8(10), np.uint8(5), np.uint8(7), np.uint8(4), np.uint8(2), np.uint8(4), np.uint8(2), np.uint8(4), np.uint8(3), np.uint8(4), np.uint8(5), np.uint8(10), np.uint8(5), np.uint8(6), np.uint8(7), np.uint8(1), np.uint8(3), np.uint8(3), np.uint8(3), np.uint8(9), np.uint8(5), np.uint8(2), np.uint8(1), np.uint8(6), np.uint8(7), np.uint8(4), np.uint8(7), np.uint8(1), np.uint8(3), np.uint8(1), np.uint8(9), np.uint8(6), np.uint8(6), np.uint8(7), np.uint8(10), np.uint8(1), np.uint8(2), np.uint8(10), np.uint8(3), np.uint8(1), np.uint8(10), np.uint8(3), np.uint8(10), np.uint8(7), np.uint8(3), np.uint8(9), np.uint8(6), np.uint8(1), np.uint8(2), np.uint8(6), np.uint8(10), np.uint8(9), np.uint8(4), np.uint8(3), np.uint8(5), np.uint8(1), np.uint8(3), np.uint8(7), np.uint8(6), np.uint8(2), np.uint8(4), np.uint8(4), np.uint8(6), np.uint8(2), np.uint8(10), np.uint8(3), np.uint8(8), np.uint8(2), np.uint8(7), np.uint8(10), np.uint8(1), np.uint8(6), np.uint8(2), np.uint8(6), np.uint8(2), np.uint8(2), np.uint8(10), np.uint8(2), np.uint8(9), np.uint8(10), np.uint8(7), np.uint8(5), np.uint8(4), np.uint8(4), np.uint8(10), np.uint8(8), np.uint8(10), np.uint8(9), np.uint8(9), np.uint8(7), np.uint8(8), np.uint8(3), np.uint8(4), np.uint8(9), np.uint8(8), np.uint8(5), np.uint8(7), np.uint8(3), np.uint8(6), np.uint8(7), np.uint8(9), np.uint8(3), np.uint8(8), np.uint8(3), np.uint8(10), np.uint8(4), np.uint8(7), np.uint8(4), np.uint8(3), np.uint8(1), np.uint8(10), np.uint8(7), np.uint8(9), np.uint8(7), np.uint8(2), np.uint8(2), np.uint8(8), np.uint8(10), np.uint8(5), np.uint8(9), np.uint8(7), np.uint8(4), np.uint8(5), np.uint8(3), np.uint8(8), np.uint8(6), np.uint8(8), np.uint8(5), np.uint8(4), np.uint8(8), np.uint8(3), np.uint8(6), np.uint8(6), np.uint8(4), np.uint8(7), np.uint8(7), np.uint8(7), np.uint8(1), np.uint8(5), np.uint8(8), np.uint8(4), np.uint8(1), np.uint8(8), np.uint8(5), np.uint8(5), np.uint8(3), np.uint8(7), np.uint8(1), np.uint8(4), np.uint8(10), np.uint8(2), np.uint8(1), np.uint8(10), np.uint8(1), np.uint8(5), np.uint8(6), np.uint8(7), np.uint8(9), np.uint8(4), np.uint8(2), np.uint8(1), np.uint8(10), np.uint8(8), np.uint8(5), np.uint8(7), np.uint8(4), np.uint8(2), np.uint8(1), np.uint8(3), np.uint8(7), np.uint8(4), np.uint8(9), np.uint8(3), np.uint8(4), np.uint8(8), np.uint8(1), np.uint8(7), np.uint8(1), np.uint8(5), np.uint8(6), np.uint8(6), np.uint8(3), np.uint8(2), np.uint8(1), np.uint8(1), np.uint8(6), np.uint8(1), np.uint8(2), np.uint8(7), np.uint8(5), np.uint8(9), np.uint8(4), np.uint8(6), np.uint8(1), np.uint8(2), np.uint8(9), np.uint8(7), np.uint8(3), np.uint8(8), np.uint8(2), np.uint8(4), np.uint8(1), np.uint8(6), np.uint8(4), np.uint8(8), np.uint8(1), np.uint8(8), np.uint8(10), np.uint8(6), np.uint8(7), np.uint8(8), np.uint8(10), np.uint8(5), np.uint8(5), np.uint8(8), np.uint8(7), np.uint8(7), np.uint8(4), np.uint8(5), np.uint8(2), np.uint8(4), np.uint8(10), np.uint8(5), np.uint8(10), np.uint8(8), np.uint8(8), np.uint8(1), np.uint8(4), np.uint8(3), np.uint8(9), np.uint8(6), np.uint8(2), np.uint8(7), np.uint8(6), np.uint8(1), np.uint8(9), np.uint8(2), np.uint8(6), np.uint8(2), np.uint8(7), np.uint8(6), np.uint8(3), np.uint8(7), np.uint8(5), np.uint8(3), np.uint8(9), np.uint8(10), np.uint8(5), np.uint8(7), np.uint8(1), np.uint8(5), np.uint8(3), np.uint8(3), np.uint8(6), np.uint8(7), np.uint8(10), np.uint8(1), np.uint8(1), np.uint8(9), np.uint8(3), np.uint8(3), np.uint8(7), np.uint8(3), np.uint8(2), np.uint8(2), np.uint8(4), np.uint8(9), np.uint8(7), np.uint8(5), np.uint8(2), np.uint8(8), np.uint8(8), np.uint8(10), np.uint8(10), np.uint8(1), np.uint8(10), np.uint8(1), np.uint8(7)]","[10, 10, 10, 10]"
List the unit prices of the bottom 3 purchases with the lowest total cost.,What are the unit prices for the three purchases with the lowest total cost?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by 'Total' in ascending order to get the lowest totals first
    sorted_by_total = dataset.sort_values(by='Total')
    
    # Select the top 3 entries with the lowest total cost
    top_three_lowest_totals = sorted_by_total.head(3)
    
    # Extract the unit prices for these top three entries
    unit_prices = top_three_lowest_totals['Unit price'].tolist()
    
    return unit_prices
",list of float64,"[10.17, 12.09, 12.54]","[10.17, 12.09, 12.54]"
Enumerate the ratings of the top 5 purchases with the highest total cost.,What are the ratings associated with the top 5 most expensive purchases?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Load the dataset into a DataFrame
    df = pd.DataFrame(db)
    
    # Sort the dataframe based on the 'Unit price' column in descending order
    top_expensive_purchases = df.sort_values(by='Unit price', ascending=False).head(5)
    
    # Extract the 'Rating' for these top 5 purchases
    ratings = top_expensive_purchases['Rating'].tolist()
    
    return ratings
",list of float64,"[6.1, 4.2, 7.1, 7.1, 8.5]","[6.6, 8.7, 4.5, 8.0, 4.4]"
Provide the gross incomes of the bottom 2 purchases with the lowest total cost.,What are the gross incomes for the two purchases with the lowest total cost?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by 'Total' in ascending order to get the lowest totals first
    sorted_dataset = dataset.sort_values(by='Total', ascending=True)
    
    # Select the top two rows based on total cost
    top_two_purchases = sorted_dataset.head(2)
    
    # Extract gross income for these two purchases
    gross_incomes = top_two_purchases['gross income'].tolist()
    
    return gross_incomes
",list of float64,"[0.5085, 0.6045]","[0.5085, 0.6045]"
Are there any individuals in the dataset who are above 60 years of age?,Do any individuals in the dataset have an age greater than 60?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    has_age_over_60 = dataset['Age'] > 60
    result = has_age_over_60.any()
    
    return result
",bool,TRUE,FALSE
Does anyone have a Diabetes Pedigree Function score above 2.5?,Is there any individual in the dataset with a Diabetes Pedigree Function score exceeding 2.5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there is any individual with a DiabetesPedigreeFunction score exceeding 2.5
    exceeds_threshold = dataset['DiabetesPedigreeFunction'].max() > 2.5
    
    return exceeds_threshold
",bool,FALSE,TRUE
Does the person with the highest glucose level also have diabetes?,,,,ERROR,TRUE
Is there anyone who has zero pregnancies and is diabetic?,Are there any individuals in the dataset who have not experienced any pregnancies and are diagnosed as diabetic?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to find individuals who have not experienced any pregnancies and are diagnosed as diabetic
    condition_met = (dataset['Pregnancies'] == 0) & (dataset['Outcome'] == 1)
    
    result = dataset[condition_met]
    
    # Check if there is any row that meets the condition
    has_diabetic_individuals = not result.empty
    
    return has_diabetic_individuals
",bool,TRUE,TRUE
What is the maximum number of pregnancies recorded in the dataset?,What is the highest value recorded for pregnancies in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_pregnancies = db[""Pregnancies""].max()
    return max_pregnancies
",uint8,17,17
What is the minimum blood pressure level recorded in the dataset?,What is the lowest recorded value of blood pressure in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    lowest_blood_pressure = db[""BloodPressure""].min()
    return lowest_blood_pressure
",uint8,0,0
What is the average BMI recorded in the dataset?,What is the mean value of BMI recorded in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    answer = db[""BMI""].mean()
    return answer
",float64,31.99257812,31.99257812
How many individuals have an insulin level above 150?,What is the count of individuals with an insulin level greater than 150?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    count_individuals = dataset.loc[dataset[""Insulin""] > 150].shape[0]
    
    return count_individuals
",int64,153,187
What is the diabetes outcome for the person with the highest BMI?,What is the diabetes outcome for the individual with the highest BMI value?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_bmi_individual = db.loc[db[""BMI""] == db[""BMI""].max()]
    outcome = max_bmi_individual[""Outcome""].values[0]
    
    return outcome
",uint8,1,1
What is the diabetes outcome for the person with the lowest blood pressure?,What is the diabetes outcome for the individual with the lowest blood pressure reading?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the DataFrame to get the row with the lowest BloodPressure
    min_blood_pressure_row = db.loc[db['BloodPressure'].idxmin()]
    
    # Get the diabetes outcome for that individual
    outcome = min_blood_pressure_row['Outcome']
    
    return outcome
",uint8,0,0
What is the diabetes outcome for the person with the highest insulin level?,What is the diabetes outcome for the individual having the highest insulin level?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_insulin_individual = db.loc[db[""Insulin""] == db[""Insulin""].max()]
    outcome = max_insulin_individual[""Outcome""].values[0]
    
    return outcome
",uint8,1,1
What is the diabetes outcome for the person with the lowest glucose level?,What is the diabetes outcome for the individual with the minimum glucose level?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_glucose_individual = dataset.loc[dataset[""Glucose""] == dataset[""Glucose""].min()]
    outcome_for_min_glucose = min_glucose_individual[""Outcome""].values[0]
    
    return outcome_for_min_glucose
",uint8,0,0
List the diabetes outcomes of the top 3 individuals with the highest number of pregnancies.,What are the diabetes outcomes for the top 3 individuals who have had the most pregnancies?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant columns from the dataframe
    relevant_data = db[['Pregnancies', 'Outcome']]
    
    # Sort the data by Pregnancies in descending order and select top 3 rows
    top_3_pregnant_individuals = relevant_data.sort_values(by='Pregnancies', ascending=False).head(3)
    
    # Extract the outcomes for these individuals
    outcomes = top_3_pregnant_individuals['Outcome'].tolist()
    
    return outcomes
",list of (uint8),"[1, 1, 1]","[1, 1, 1]"
List the diabetes outcomes of the bottom 2 individuals with the lowest BMI.,What are the diabetes outcomes for the two individuals having the lowest BMI?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by BMI in ascending order and select the top 2
    sorted_dataset = dataset.sort_values(by='BMI', ascending=True).head(2)
    
    # Extract the 'Outcome' values for these two individuals
    outcomes = sorted_dataset['Outcome'].tolist()
    
    return outcomes
",list of uint8,"[0, 1]","[0, 0]"
List the diabetes outcomes of the top 5 individuals with the highest insulin levels.,What are the diabetes outcomes for the individuals with the top 5 highest insulin levels?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by 'Insulin' in descending order and select the top 5 rows
    top_insulin_individuals = dataset.sort_values(by='Insulin', ascending=False).head(5)
    
    # Extract the 'Outcome' for these individuals
    outcomes = top_insulin_individuals['Outcome'].tolist()
    
    return outcomes
",list of (uint8),"[1, 0, 0, 1, 1]","[1, 1, 1, 1, 1]"
List the diabetes outcomes of the bottom 4 individuals with the lowest blood pressure.,What are the diabetes outcomes for the four individuals with the lowest blood pressure?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by BloodPressure in ascending order and select the top 4
    low_blood_pressure_outcomes = dataset.sort_values(by='BloodPressure')[:4]['Outcome'].tolist()
    
    return low_blood_pressure_outcomes
",list of uint8,"[0, 0, 0, 0]","[0, 0, 0, 0]"
What are the ages of the top 4 individuals with the highest number of pregnancies?,,,,ERROR,"[51, 67, 67, 67]"
List the BMI of the bottom 3 individuals with the lowest glucose levels.,What is the BMI of the individuals with the three lowest glucose levels?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Get the individuals with the three lowest glucose levels
    sorted_data = dataset.sort_values(by='Glucose', ascending=True).head(3)
    
    # Extract their BMI values
    bmi_values = sorted_data['BMI'].tolist()
    
    return bmi_values
",list of float64,"[24.7, 39.0, 41.0]","[32.0, 32.0, 32.0]"
Enumerate the blood pressure levels of the top 5 individuals with the highest Diabetes Pedigree Function scores.,What are the blood pressure levels of the top 5 individuals with the highest Diabetes Pedigree Function scores?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataframe by DiabetesPedigreeFunction in descending order
    sorted_df = db.sort_values(by='DiabetesPedigreeFunction', ascending=False)
    
    # Get the top 5 individuals with the highest DiabetesPedigreeFunction scores
    top_5_individuals = sorted_df.head(5)
    
    # Extract their BloodPressure levels
    blood_pressure_levels = list(top_5_individuals['BloodPressure'])
    
    return blood_pressure_levels
",list of (uint8),"[78, 70, 40, 82, 66]","[0, 0, 0, 0, 0]"
Provide the glucose levels of the 2 individuals with the highest insulin levels.,,,,ERROR,"[189, 197]"
Are there any articles that have the material type 'Op-Ed'?,Does the dataset contain any articles with a material type of 'Op-Ed'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    contains_op_ed = ('Op-Ed' in dataset['material_type'].unique())
    return contains_op_ed
",bool,TRUE,TRUE
Does the article with the longest headline contain the keyword 'United States Politics and Government'?,,,,ERROR,FALSE
Is there any article published on '2021-01-05'?,,,,ERROR,TRUE
Does any article contain more than 10 keywords?,,,,ERROR,TRUE
How many unique material types are there in the dataset?,What is the total number of distinct material types present in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    unique_material_types = db['material_type'].nunique()
    return unique_material_types
",int64,16,16
What is the longest length of a headline in the dataset?,What is the maximum length of any headline in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_headline_length = dataset['headline'].str.len().max()
    return max_headline_length
",int64,145,147
How many articles were published on '2021-01-02'?,What is the count of articles published on 2021-01-02?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    filtered_data = dataset[dataset['date'].dt.date == pd.to_datetime('2021-01-02').date()]
    count_articles = len(filtered_data)
    
    return count_articles
",int64,56,52
What is the highest number of keywords associated with a single article?,,,,ERROR,45
What is the material type of the article with the longest headline?,Which material type is associated with the article having the longest headline?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the article with the longest headline
    max_headline_article = dataset.loc[dataset['headline'].str.len() == dataset['headline'].str.len().max()]
    
    # Return the material type of that article
    return max_headline_article['material_type'].iloc[0]
",string,Interactive Feature,News
What is the material type of the article with the shortest headline that is not news or video?,Which material type does the articleæ‹¥æœ‰zzle,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns from the dataset
    articles = dataset[['headline', 'material_type']]
    
    # Getting the headline of the first article (assuming we need just one material type)
    first_article_headline = articles.iloc[0]['headline']
    
    # Fetching the material type for the first article
    material_type = articles.loc[articles['headline'] == first_article_headline, 'material_type'].iloc[0]
    
    return material_type
",string,News,Slideshow
What is the material type of the non-editorial article with the most number of keywords?,Which material type does the non-editorial articleæ‹¥æœ‰printStats,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only non-editorial articles
    non_editorial_articles = dataset[dataset['material_type'] != 'editorial']
    
    # Extract the material type of the first non-editorial article
    material_type = non_editorial_articles.iloc[0]['material_type']
    
    return material_type
",category,News,News
What is the most common material amongst articles with the least number of keywords?,,,,ERROR,News
List the material types of the top 3 articles with the longest headlines.,What are the material types of the three articles having the longest headlines?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant columns and sort by headline length
    sorted_headlines = db.sort_values(by='headline', key=lambda col: col.str.len(), ascending=False).head(3)
    
    # Get the material types of the top 3 articles
    material_types = sorted_headlines['material_type'].tolist()
    
    return material_types
",list of (category),"['Interactive Feature', 'News', 'News']","['News', 'News', 'News']"
List the material types of the bottom 2 articles with the shortest headlines that are not videos or slides.,,,,ERROR,"['News', 'News']"
List the material types of the top 5 articles with the most number of keywords.,,,,ERROR,"['News', 'News', 'News', 'News', 'News']"
List the material types of the bottom 4 articles with the least number of keywords.,,,,ERROR,"['News', 'News', 'News', 'News']"
What are the lengths of the headlines of the top 4 articles with the most number of keywords?,What is the length of the headlines for the top 4 articles that have the highest number of keywords?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include rows with non-null keywords
    filtered_df = db[pd.notnull(db['keywords'])]
    
    # Split the keywords into individual keyword strings and explode the column
    exploded_keywords = filtered_df.explode('keywords')
    
    # Group by headline and count the number of keywords for each headline
    headline_keyword_counts = exploded_keywords.groupby('headline')['keywords'].count().reset_index(name='keyword_count')
    
    # Sort headlines by keyword count in descending order and select top 4
    top_articles = headline_keyword_counts.sort_values(by='keyword_count', ascending=False).head(4)
    
    # Get the lengths of the headlines for these top articles
    headline_lengths = db.loc[top_articles['headline'].index, 'headline'].apply(len).tolist()
    
    return headline_lengths
",list of int64,"[61, 66, 72, 60]","[86, 85, 84, 84]"
List the number of keywords in the bottom 3 articles with the shortest headlines.,How many keywords are present in the three articles that have the shortest headlines?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get only the rows with the shortest headlines
    sorted_headlines = db.sort_values(by='headline', key=lambda col: col.str.len())
    three_shortest_articles = sorted_headlines.head(3)
    
    # Count the number of keywords in these three articles
    num_keywords = three_shortest_articles['keywords'].str.split(',').explode().count()
    
    return num_keywords
",int64,0,"[1, 1, 1]"
Enumerate the lengths of the headlines of the top 5 articles with the longest headlines.,,,,ERROR,"[96, 96, 95, 95, 95]"
Provide the number of keywords in the bottom 2 articles with the least number of keywords.,,,,ERROR,"[1, 1]"
Is the 'USA' the most common entry in the 'Geographies' column?,Is 'USA' the most frequent entry in the 'Geographies' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    frequencies = dataset['Geographies'].value_counts()
    is_most_frequent_usa = frequencies['USA'] == frequencies.max() if 'USA' in frequencies else False
    
    return is_most_frequent_usa
",bool,FALSE,FALSE
Are there any participants who are unemployed with a bachelor's degree from Africa?,,,,ERROR,FALSE
Do all participants recommend Python as the first programming language?,,,,ERROR,FALSE
Are there more than 1000 participants who hope to become familiar with AWS in the next 2 years?,,,,ERROR,FALSE
How many unique job titles are represented in the dataset?,How many distinct job titles are present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_titles = dataset['Select the title most similar to your current role (or most recent title if retired)'].nunique()
    
    return unique_titles
",int64,14,14
What's the median of the average number of years participants have used machine learning methods?,,,,ERROR,1.5
How many participants are from the United Kingdom?,,,,ERROR,450
What is the most common number of programming languages used by participants on a regular basis?,,,,ERROR,2
What's the most common computing platform used for data science projects?,,,,ERROR,A laptop
What's the most common programming language used on a regular basis?,,,,ERROR,Python
Which country has the second highest number of participants?,,,,ERROR,United States of America
Which title is the most common among participants?,,,,ERROR,Data Scientist
What are the top 4 geographies represented in the dataset?,Which are the four most frequently occurring geographies represented in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Geographies' column from the dataset
    geographies = dataset['Geographies']
    
    # Get the value counts of each geography and sort them in descending order
    geography_counts = geographies.value_counts().head(4)
    
    # Return the index of the top 4 most frequent geographies as a list of strings
    return list(geography_counts.index)
",list of string,"[array(['India'], dtype=object), array(['USA'], dtype=object), array(['Western Europe'], dtype=object), array(['China - Japan - Korea'], dtype=object)]","['India', 'USA', 'Western Europe', 'China - Japan - Korea']"
Name the top 3 general segments of participants.,,,,ERROR,"['Analysts', 'Data Scientists', 'Academics']"
list the top 4 most common job titles.,,,,ERROR,"['Data Scientist', 'Software Engineer', 'Other', 'Data Analyst']"
Identify the top 6 programming languages used regularly.,,,,ERROR,"['Python', 'SQL', 'R', 'Javascript', 'C++', 'Java']"
Report the top 4 age ranges of participants by frequency,,,,ERROR,"['25-29', '30-34', '22-24', '35-39']"
list the highest average 3 years of machine learning experience.,,,,ERROR,"[19.83, 19.74, 19.68]"
Identify the 5 highest yearly compensations.,,,,ERROR,"[1000000, 1000000, 1000000, 1000000, 1000000]"
Report the 5 most common sizes of the company where participants work.,,,,ERROR,"['0-49 employees', '10,000 or more employees', '1000-9,999 employees', '50-249 employees', '250-999 employees']"
Are there more reviews with rating 5 from 'GB' than 'US'?,Does the dataset show a higher count of reviews with a rating of 5 for 'GB' compared to 'US'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    gb_reviews = dataset[dataset['country_code'] == 'GB']['rating'].value_counts().get(5, 0)
    us_reviews = dataset[dataset['country_code'] == 'US']['rating'].value_counts().get(5, 0)
    
    return gb_reviews > us_reviews
",bool,TRUE,TRUE
Is the average rating for 'Wise' in 'GB' above 4?,Does the average rating for entries with title 'Wise' and country_code 'GB' exceed 4?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    filtered_data = dataset[(dataset['title'] == 'Wise') & (dataset['country_code'] == 'GB')]
    average_rating = filtered_data['rating'].mean()

    return average_rating > 4
",bool,TRUE,TRUE
Do any reviews originate from 'AO'?,Are there any reviews with a country code of 'AO'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there are any reviews with a country code of 'AO'
    has_reviews_with_AO = dataset['country_code'].isin(['AO']).any()

    return has_reviews_with_AO
",bool,TRUE,TRUE
Did any reviews receive a rating of 1?,Were there any reviews that received a rating of 1?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    reviews_with_rating_1 = dataset.loc[dataset[""rating""] == 1]
    
    # Check if there are any rows in the filtered dataframe
    is_any_review_rating_1 = not reviews_with_rating_1.empty

    return is_any_review_rating_1
",bool,TRUE,TRUE
What's the total number of reviews for 'Wise'?,How many total reviews are there for the company named 'Wise'?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for reviews related to the company 'Wise'
    wise_reviews = db[db['Company'] == 'Wise']
    
    # Count the total number of reviews for the company 'Wise'
    total_reviews = len(wise_reviews)
    
    return total_reviews
",int64,3840,3840
How many unique countries gave 'Wise' a rating of 5?,How many distinct countries provided a rating of 5 for the company Wise?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    filtered_data = dataset[(dataset['Company'] == 'Wise') & (dataset['rating'] == 5)]
    distinct_countries = filtered_data['country_code'].nunique()
    
    return distinct_countries
",int64,120,120
What is the highest rating received?,What is the maximum rating received in the reviews?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_rating = dataset[""rating""].max()
    return max_rating
",uint8,5,5
What's the average rating across all reviews?,Can you calculate the mean value of ratings from all reviews?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    mean_rating = dataset['rating'].mean()

    return mean_rating
",float64,4.097755611,4.097755611
Which company received the most 5-star reviews?,What is the name of the company that has received the highest number of 5-star reviews?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for 5-star reviews
    five_star_reviews = dataset[dataset[""rating""] == 5]
    
    # Group by Company and count the number of reviews for each company
    company_reviews_count = five_star_reviews.groupby(""Company"").size()
    
    # Get the company with the maximum number of reviews
    max_reviews_company = company_reviews_count.idxmax()
    
    return max_reviews_company
",string,Wise,Wise
From which country did 'Wise' receive the most reviews?,In which country did the company 'Wise' receive the highest number of reviews?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for reviews related to the company 'Wise'
    wise_reviews = dataset[dataset[""Company""] == ""Wise""]
    
    # Group by country_code and count the number of reviews for each country
    country_review_counts = wise_reviews.groupby(""country_code"").size()
    
    # Find the country with the maximum number of reviews
    max_reviews_country = country_review_counts.idxmax()
    
    return max_reviews_country

",string,GB,GB
Which country had the lowest representation in the reviews?,What is the country code that has the minimum number of reviews?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns from the DataFrame
    reviews_by_country = db.groupby('country_code').size()
    
    # Finding the country code with the minimum number of reviews
    min_reviews_country_code = reviews_by_country.idxmin()
    
    return min_reviews_country_code
",string,AI,CW
Which company received the lowest rating?,What is the name of the company that received the lowest rating?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the entry with the lowest rating
    min_rating_entry = dataset.loc[dataset['rating'] == dataset['rating'].min()]
    
    # Extract the company name from this entry
    company_name = min_rating_entry['Company'].iloc[0]
    
    return company_name
",string,Wise,N26
Which are the top 3 countries with the most 5-star reviews for 'Wise'?,What are the top 3 countries receiving the highest number of 5-star reviews for the product 'Wise'?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter data for the company 'Wise'
    wise_reviews = db[db['Company'] == 'Wise']
    
    # Filter reviews with a rating of 5 stars
    five_star_reviews = wise_reviews[wise_reviews['rating'] == 5]
    
    # Group by country code and count the number of reviews for each country
    country_counts = five_star_reviews.groupby('country_code').size().reset_index(name='count')
    
    # Sort the countries based on the count of 5-star reviews in descending order
    sorted_countries = country_counts.sort_values(by='count', ascending=False)
    
    # Get the top 3 countries
    top_three_countries = sorted_countries.head(3)['country_code'].tolist()
    
    return top_three_countries
",list of string,"['GB', 'US', 'ES']","['GB', 'US', 'ES']"
Which are the 2 companies represented in the dataset?,,,,ERROR,"['Wise', 'N26']"
Which are the bottom 4 countries in terms of review count? If two or more have the same number order them alphabetically.,Can you list the countries with the lowest review counts in alphabetical order if there are ties?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns from the DataFrame
    reviews_df = db[['country_code', 'title']]
    
    # Count the number of reviews per country
    review_counts = reviews_df.groupby('country_code').size().reset_index(name='review_count')
    
    # Find the minimum review count
    min_review_count = review_counts['review_count'].min()
    
    # Filter countries with the lowest review counts
    low_review_countries = review_counts[review_counts['review_count'] == min_review_count]['country_code']
    
    # Return countries in alphabetical order
    return list(low_review_countries.sort_values())

",list of string,"['AI', 'KR', 'FO', 'PY', 'MN', 'FK', 'IQ', 'AZ', 'KY', 'BL', 'EC', 'KN', 'ML', 'PG', 'BW', 'CI', 'SX', 'GA', 'PE', 'BB', 'TG', 'GU', 'AW', 'KZ', 'NE', 'MD', 'BH', 'BQ', 'MG', 'MM', 'KH', 'TL', 'SV', 'BO', 'MO', 'IR', 'MC', 'KG', 'CW', 'NU']","['CW', 'FO', 'KZ', 'NE']"
What are the 3 most common countries? If two or more have the same number order them alphabetically.,"Which are the three countries with the highest frequency in the dataset, and if there is a tie, order them alphabetically?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract country_code column from the dataset
    countries = dataset['country_code']
    
    # Count the frequency of each country code
    country_counts = countries.value_counts().reset_index()
    country_counts.columns = ['country_code', 'frequency']
    
    # Sort the countries by frequency in descending order and then alphabetically for ties
    sorted_countries = country_counts.sort_values(by=['frequency', 'country_code'], ascending=[False, True])
    
    # Select the top three countries (or fewer if there are not enough)
    top_three_countries = sorted_countries.head(3)['country_code'].tolist()
    
    return top_three_countries
",list of string,"['GB', 'DE', 'FR']","['GB', 'DE', 'FR']"
What are the 3 most common ratings?,,,,ERROR,"[5, 1, 4]"
What are the 2 least common ratings?,Which are the ratings that appear least frequently in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Count the frequency of each rating
    rating_counts = dataset['rating'].value_counts()
    
    # Find the minimum frequency
    min_frequency = rating_counts.min()
    
    # Get the ratings that have this minimum frequency
    least_frequent_ratings = list(rating_counts[rating_counts == min_frequency].index)
    
    return least_frequent_ratings
",list of (int64),[3],"[3, 2]"
What are the best 4 unique ratings given to 'Wise'?,,,,ERROR,"[5, 4, 2, 1]"
What are the bottom 5 unique ratings given to 'N26'?,,,,ERROR,"[1, 2, 3, 4, 5]"
Is there any customer with a PhD education level?,Are there any customers in the dataset who have an education level of PhD?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if 'Education' column exists in the dataset
    if 'Education' not in dataset.columns:
        return False
    
    # Check if there are any customers with education level as PhD
    has_phd = dataset['Education'].isin(['PhD']).any()
    
    return has_phd
",bool,TRUE,TRUE
Do we have any customers who are married?,,,,ERROR,TRUE
Is there any customer with income higher than 100000?,Are there any customers having an income greater than 100000?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Load the dataset into a DataFrame
    dataset = pd.DataFrame(db)
    
    # Filter customers with income greater than 100000
    high_income_customers = dataset[dataset[""Income""] > 100000]
    
    # Check if there are any such customers
    result = not high_income_customers.empty
    
    return result
",bool,TRUE,TRUE
Has any customer made more than 10 web purchases?,Were there any customers who made more than 10 web purchases?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Load the data into a DataFrame
    df = pd.DataFrame(db)
    
    # Extract the relevant column for web purchases
    num_web_purchases = df['NumWebPurchases']
    
    # Check if there are any customers who made more than 10 web purchases
    result = num_web_purchases.any() and num_web_purchases.max() > 10
    
    return result
",bool,TRUE,TRUE
How many customers do we have in the dataset?,,,,ERROR,2240
What's the average income of our customers?,What is the mean value of the income for our customers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    mean_income = dataset[""Income""].mean()
    
    return mean_income
",float64,52247.25135,52247.25135
What's the maximum number of web purchases made by a customer?,What is the highest value of NumWebPurchases for any customer?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_web_purchases = dataset[""NumWebPurchases""].max()
    return max_web_purchases
",uint8,27,27
What's the minimum recency of purchase among the customers?,What is the smallest value of recency for any customer in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_recency = dataset[""Recency""].min()
    return min_recency
",uint8,0,0
What's the most common education level among our customers?,,,,ERROR,Graduation
What's the most common marital status among our customers?,Which is the most frequent Marital_Status among our customers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant column for the given question
    marital_status_column = [column for column in dataset.columns if 'Marital_Status' in column][0]
    
    # Find the most frequent Marital_Status using value_counts and sort_values
    most_frequent_marital_status = dataset[marital_status_column].value_counts().idxmax()
    
    return most_frequent_marital_status

",category,Married,Married
Who is the customer with the highest income?,,,,ERROR,9432
Who is the customer with the most recent purchase?,,,,ERROR,4047
Who are the 3 customers with the highest income?,Which are the three customers with the highest income?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant information from the dataset table schema
    column_names = [col[0] for col in datasetTableSchema]
    
    # Find the customers with the highest income
    top_customers = dataset.nlargest(3, 'Income')
    
    # Extract the ID of these customers
    customer_ids = top_customers['ID'].tolist()
    
    return customer_ids
",list of string,"[9432, 1503, 1501]","[9432, 1503, 1501]"
What are the 2 most common education levels among our customers?,Which are the two most frequent education levels among our customers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Education' column from the dataset
    education_column = dataset['Education']
    
    # Get the value counts of each unique education level
    education_value_counts = education_column.value_counts()
    
    # Sort by frequency and get the top two most frequent education levels
    top_two_education_levels = education_value_counts.head(2).index.tolist()
    
    return top_two_education_levels
",list of (category),"['Graduation', 'PhD']","['Graduation', 'PhD']"
What are the 3 most common marital statuses among our customers?,,,,ERROR,"['Married', 'Together', 'Single']"
Who are the 3 customers with the most web purchases?,,,,ERROR,"[5255, 4619, 10311]"
What are the top 3 income values among our customers?,What are the three highest income values among our customers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_three_incomes = dataset.nlargest(3, 'Income')['Income'].tolist()
    return top_three_incomes
",list of float64,"[666666.0, 162397.0, 160803.0]","[666666.0, 162397.0, 160803.0]"
What are the top 2 recency values among our customers?,,,,ERROR,"[99, 99]"
What are the bottom 3 income values among our customers?,What are the three smallest income values for our customers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    smallest_incomes = dataset['Income'].sort_values().head(3)
    return list(smallest_incomes)

",list of float64,"[1730.0, 2447.0, 3502.0]","[1730.0, 2447.0, 3502.0]"
What are the bottom 2 recency values among our customers?,,,,ERROR,"[0, 0]"
Is there any customer with a high salary?,Are there any customers having a high salary?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if the 'salary' column exists in the dataset and is of category type
    if 'salary' in dataset.columns and dataset['salary'].dtype == 'category':
        high_salary_customers = dataset[dataset['salary'] == 'high']['salary']
        return bool(high_salary_customers.size > 0)
    else:
        return False

",bool,TRUE,TRUE
Do we have any employees who suffered a work accident?,Are there any employees who have experienced a work accident?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataframe to get only rows where Work Accident is not null and not 'No'
    work_accident_df = db[pd.notnull(db['Work Accident']) & (db['Work Accident'] != 'No')]
    
    # Check if there are any such employees
    has_work_accident = work_accident_df.shape[0] > 0
    
    return has_work_accident
",bool,TRUE,TRUE
Is there any employee with more than 100 hours per month on average?,Does any employee have an average monthly working hours exceeding 100 hours per month?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the column name for 'Average Monthly Hours'
    avg_monthly_hours_column = [col for col in dataset.columns if 'Average Monthly Hours' in col][0]
    
    # Check if there is any employee with average monthly hours exceeding 100
    answer = dataset[avg_monthly_hours_column] > 100
    
    return any(answer)
",bool,TRUE,TRUE
Does any employee have a satisfaction level above 0.9?,Is there any employee with a satisfaction level exceeding 0.9?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    result = dataset['Satisfaction Level'] > 0.9
    return result.any()
",bool,TRUE,TRUE
How many employees do we have in the dataset?,What is the total number of employees present in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Assuming db is a pandas DataFrame containing the dataset
    total_employees = len(db.index)
    
    return total_employees
",int64,14999,14999
What's the median satisfaction level of our employees?,What is the middle value of the satisfaction levels reported by our employees?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    satisfaction_levels = dataset[""Satisfaction Level""]
    median_satisfaction_level = satisfaction_levels.median()

    return median_satisfaction_level
",float64,0.64,0.64
What's the highest number of projects for a given employee?,What is the maximum number of projects assigned to any employee?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_projects = dataset[""Number of Projects""].max()
    return max_projects
",uint8,7,7
What's the most common marital status among the employees?,Which is the most frequent marital status among the employees?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the mode of the 'Marital_Status' column
    most_frequent_marital_status = dataset['Marital_Status'].mode().iloc[0]
    
    return most_frequent_marital_status
",category,Together,Together
What's the most common education level among our employees?,,,,ERROR,Graduation
What's the most common marital status in the database?,,,,ERROR,Married
"Among the employees who have left the company in sales, what's the most common salary level?",,,,ERROR,low
"Among the employees who have had a work accident in sales, what's the most common salary level?",,,,ERROR,low
What are the top 3 satisfaction levels?,What are the three highest satisfaction levels among employees?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant column for sorting and get the top three unique values
    top_three_satisfaction_levels = db['Satisfaction Level'].drop_duplicates().sort_values(ascending=False).head(3)
    
    return list(top_three_satisfaction_levels)
",list of float64,"[1.0, 0.99, 0.98]","[1, 1, 1]"
What are the top 2 most common Work Accident statuses among our employees?,Which are the two most frequent Work Accident statuses reported by our employees?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Load the dataset into a DataFrame
    dataset = pd.DataFrame(db)
    
    # Extract the 'Work Accident' column
    work_accident_column = dataset['Work Accident']
    
    # Get the value counts of the Work Accident statuses
    value_counts = work_accident_column.value_counts().head(2)
    
    # Convert the index (statuses) to a list
    most_frequent_statuses = value_counts.index.tolist()
    
    return most_frequent_statuses
",list of (category),"['No', 'Yes']","['No', 'Yes']"
What are the top 3 most common marital statuses among our employees?,Which are the three most frequent marital statuses present among our employees?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extracting the 'Marital_Status' column from the dataset
    marital_statuses = dataset['Marital_Status']
    
    # Getting the value counts of each marital status
    status_counts = marital_statuses.value_counts().head(3)
    
    # Converting the index (marital statuses) to a list
    most_frequent_marital_statuses = status_counts.index.tolist()
    
    return most_frequent_marital_statuses

",list of (type),"['Together', 'Single', 'Married']","['Together', 'Single', 'Married']"
What are the highest 3 years spent in the company? ,Which are the top 3 years an employee has spent with the company?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_years = dataset['Years in the Company'].unique()
    top_3_years = sorted(unique_years)[-3:]
    
    return top_3_years
",list of int64,"[np.uint8(7), np.uint8(8), np.uint8(10)]","[10, 10, 10]"
What are the 3 departments with more 'medium' salary levels?,,,,ERROR,"['sales', 'technical', 'support']"
"For the 2 employees with the top satisfaction levels who belong to the sales department, what are their salary levels?",What are the salary levels of the two employees with the highest satisfaction levels who work in the sales department?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for employees in the Sales department
    sales_department = dataset[dataset['Department'] == 'sales']
    
    # Sort by satisfaction level in descending order and select top 2
    top_employees = sales_department.sort_values(by='Satisfaction Level', ascending=False).head(2)
    
    # Extract salary levels of these employees
    salaries = top_employees['salary'].tolist()
    
    return salaries
",list of float64,"['medium', 'medium']","['low', 'low']"
What are the top 3 average monthly hours worked among the employees in the top 3 departments with the most employees?,,,,ERROR,"[200.91135265700484, 202.49742647058824, 200.75818752803949]"
What are the lowest 2 satisfaction levels among the employees who have not had a work accident?,Which are the two lowest satisfaction levels among employees who have not experienced any work accident?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out employees who have experienced a work accident
    filtered_data = dataset[dataset['Work Accident'] == 'No']
    
    # Sort the data by satisfaction level and select the two lowest values
    sorted_data = filtered_data.sort_values(by='Satisfaction Level').head(2)
    
    # Extract the satisfaction levels as a list of floats
    answer = list(sorted_data['Satisfaction Level'])
    
    return answer
",list of float64,"[0.09, 0.09]","[0.09, 0.09]"
"Is there any country with a Ladder score above 7.5, a Generosity score above 0.2, and a Social support score above 0.7?","Are there any countries in the dataset with a Ladder score greater than 7.5, a Generosity score higher than 0.2, and a Social support score exceeding 0.7?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    filtered_data = dataset[(dataset['Ladder score'] > 7.5) & 
                            (dataset['Generosity'] > 0.2) & 
                            (dataset['Social support'] > 0.7)]
    
    # Check if there is any row that meets the criteria
    result = not filtered_data.empty
    
    return result
",bool,TRUE,TRUE
"Are there any countries in Western Europe with a Perceptions of corruption score above 0.5, a Ladder score above 7, and a Social support score above 0.7?","Are there any countries in Western Europe with a Perceptions of corruption score greater than 0.5, a Ladder score exceeding 7, and a Social support score surpassing 0.7?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    western_europe_countries = dataset[(dataset['Regional indicator'] == 'Western Europe') & 
                                        (dataset['Perceptions of corruption'] > 0.5) & 
                                        (dataset['Ladder score'] > 7) & 
                                        (dataset['Social support'] > 0.7)]
    
    return not western_europe_countries.empty
",bool,TRUE,TRUE
Are there any countries in Western Europe with a Perceptions of corruption score above 0.5?,,,,ERROR,TRUE
Is there any country with a Social support score below 0.5?,,,,ERROR,TRUE
What's the average Ladder score among the countries in Western Europe with a Generosity score above 0.2 and a Social support score above 0.7?,What is the mean Ladder score for countries categorized as Western Europe where the Generosity score exceeds 0.2 and Social support score surpasses 0.7?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset based on the conditions
    filtered_data = dataset[(dataset['Generosity'] > 0.2) & (dataset['Social support'] > 0.7)]
    
    # Extract countries categorized as Western Europe
    western_europe_countries = ['Western Europe']
    
    # Further filter the data for countries in Western Europe
    western_europe_data = filtered_data[filtered_data['Regional indicator'].isin(western_europe_countries)]
    
    # Calculate the mean Ladder score for the filtered dataset
    mean_ladder_score = western_europe_data['Ladder score'].mean()
    
    return mean_ladder_score
",float64,7.222675085,7.222675085
What's the average Perceptions of corruption score among the countries in Sub-Saharan Africa with a Ladder score below 5 and a Social support score below 0.5?,What is the mean score for perceptions of corruption in countries classified as Sub-Saharan Africa that have a Ladder score less than 5 and a Social support score less than 0.5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    sub_saharan_africa = dataset[(dataset[""Regional indicator""] == ""Sub-Saharan Africa"") & 
                                 (dataset[""Ladder score""] < 5) & 
                                 (dataset[""Social support""] < 0.5)]
    
    if not sub_saharan_africa.empty:
        mean_corruption_score = sub_saharan_africa[""Perceptions of corruption""].mean()
    else:
        mean_corruption_score = float('nan')
    
    return mean_corruption_score
",float64,0.749370605,0.749370605
What's the maximum Generosity score among the countries?,What is the highest value of the Generosity score across all countries?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_generosity_score = dataset['Generosity'].max()
    return max_generosity_score
",float64,0.560663998,0.560663998
What's the minimum Social support score among the countries?,What is the lowest Social support score across all countries?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_social_support = dataset['Social support'].min()
    return min_social_support
",float64,0.319459856,0.319459856
Which region has the highest number of countries with a Ladder score above 7 and a Generosity score above 0.2?,In which region are there the most countries having a Ladder score greater than 7 and a Generosity score exceeding 0.2?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter countries with Ladder score > 7 and Generosity > 0.2
    filtered_countries = dataset[(dataset['Ladder score'] > 7) & (dataset['Generosity'] > 0.2)]
    
    # Group by Regional indicator and count the number of countries in each region
    region_counts = filtered_countries.groupby('Regional indicator').size()
    
    # Find the region with the maximum number of countries
    most_countries_region = region_counts.idxmax()
    
    return most_countries_region

",category,Western Europe,Western Europe
Which region accounts for the most countries with a Generosity score above 0.2?,,,,ERROR,Western Europe
In which region are the majority of countries with a Perceptions of corruption score below 0.5 located?,What is the predominant region for countries having a Perceptions of corruption score less than 0.5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include rows where 'Perceptions of corruption' is less than 0.5
    filtered_data = dataset[dataset['Perceptions of corruption'] < 0.5]
    
    # Get the predominant region by using mode which returns the most common value in a category column
    predominant_region = filtered_data['Regional indicator'].mode().iloc[0]

    return predominant_region
",category,Western Europe,Western Europe
In which region can you find the majority of countries with a Social support score above 0.7?,Which region contains the largest number of countries having a Social support score greater than 0.7?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only rows where 'Social support' is greater than 0.7
    filtered_dataset = dataset[dataset['Social support'] > 0.7]
    
    # Group by 'Regional indicator' and count the number of countries in each region
    regional_counts = filtered_dataset.groupby('Regional indicator').size()
    
    # Find the region with the maximum count of countries
    max_region = regional_counts.idxmax()
    
    return max_region

",string,Western Europe,Western Europe
Can you name the three regions that have the most countries with a Ladder score above 7 and a Generosity score above 0.2?,Which are the three regions that contain the highest number of countries having a Ladder score greater than 7 and a Generosity score higher than 0.2?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    filtered_data = dataset[(dataset['Ladder score'] > 7) & (dataset['Generosity'] > 0.2)]
    region_counts = filtered_data.groupby('Regional indicator')['Country name'].count()
    top_regions = region_counts.nlargest(3).index.tolist()
    
    return top_regions
",list of string,"['Western Europe', 'North America and ANZ', 'Middle East and North Africa']",['Western Europe']
What are the top 3 regions with the most countries with a Generosity score above 0.2?,,,,ERROR,"['Western Europe', 'Southeast Asia', 'Sub-Saharan Africa']"
Identify the three highest Ladder scores from countries in Western Europe that have a Generosity score above 0.2 and a Social support score above 0.7.,What are the top three Ladder scores for countries in Western Europe with a Generosity score greater than 0.2 and a Social support score greater than 0.7?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset based on the given conditions for Western Europe, Generosity > 0.2, and Social support > 0.7
    filtered_data = dataset[(dataset['Regional indicator'] == 'Western Europe') & 
                            (dataset['Generosity'] > 0.2) & 
                            (dataset['Social support'] > 0.7)]
    
    # Sort the data by Ladder score in descending order and get the top three scores
    top_three_ladder_scores = filtered_data['Ladder score'].nlargest(3).tolist()
    
    return top_three_ladder_scores
",list of float64,"[7.504499912, 7.448900223, 7.164500237]","[7.504499912, 7.448900223, 7.164500237]"
What are the top 3 Perceptions of corruption scores among the countries in Sub-Saharan Africa?,,,,ERROR,"[0.891806662, 0.861874342, 0.861330688]"
What are the top 3 Generosity scores among the countries in Western Europe?,,,,ERROR,"[0.263732493, 0.246944219, 0.214965805]"
What are the top 3 Social support scores among the countries in Sub-Saharan Africa?,Which are the three countries in Sub-Saharan Africa with the highest Social support scores?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include countries in Sub-Saharan Africa
    sub_saharan_countries = dataset[dataset['Regional indicator'] == 'Sub-Saharan Africa']
    
    # Sort the filtered dataset by Social support scores in descending order
    sorted_by_social_support = sub_saharan_countries.sort_values(by='Social support', ascending=False)
    
    # Select the top 3 countries based on Social support scores
    top_three_countries = sorted_by_social_support.head(3)
    
    # Extract the 'Country name' for these top three countries
    country_names = top_three_countries['Country name'].tolist()
    
    return country_names
",list of (float64),"['Mauritius', 'South Africa', 'Namibia']","[0.910357833, 0.852532268, 0.846880972]"
Which are the three lowest Ladder scores in Western Europe?,What are the three smallest Ladder scores for countries in Western Europe?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only countries in Western Europe
    western_europe_countries = dataset[dataset['Regional indicator'] == 'Western Europe']
    
    # Sort the dataset by Ladder score in ascending order and select the top three smallest scores
    smallest_ladder_scores = western_europe_countries.nsmallest(3, 'Ladder score')
    
    # Extract the Ladder scores from the selected rows
    answer = list(smallest_ladder_scores['Ladder score'])
    
    return answer
",list of float64,"[5.514999866, 5.53550005, 5.910900116]","[5.514999866, 5.53550005, 5.910900116]"
Which are the three lowest Perceptions of corruption scores in Sub-Saharan Africa?,,,,ERROR,"[0.183541179, 0.606934547, 0.619799435]"
Is the song with the highest rank from 1965?,Does the song having the highest rank in 1965 exist?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the year 1965
    filtered_data = dataset[dataset['Year'] == 1965]
    
    # Check if there is any entry in the filtered data
    if not filtered_data.empty:
        # Get the song with the highest rank in 1965
        max_rank_song = filtered_data.loc[filtered_data['Rank'] == filtered_data['Rank'].min()]
        
        # Check if such a song exists
        if not max_rank_song.empty:
            return True
    
    return False
",bool,TRUE,TRUE
Does the song with the lowest rank contain the word 'love' in its lyrics?,Is the song having the lowest rank number in the Billboard dataset one that contains the word 'love' in its lyrics?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter for the song with the lowest rank
    min_rank_song = db.loc[db['Rank'] == db['Rank'].min()]
    
    # Check if the lyrics of this song contain the word 'love'
    contains_love = 'love' in min_rank_song['Lyrics'].values
    
    return contains_love
",bool,FALSE,TRUE
Is the artist of the song with the highest rank the same as the artist of the song with the lowest rank?,Do the artists having the top and bottom ranks in the song chart match?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_rank_artist = dataset.loc[dataset[""Rank""] == dataset[""Rank""].min(), ""Artist""].iloc[0]
    bottom_rank_artist = dataset.loc[dataset[""Rank""] == dataset[""Rank""].max(), ""Artist""].iloc[0]
    
    return top_rank_artist == bottom_rank_artist
",bool,FALSE,FALSE
Are there songs without lyrics?,Is there any song in the dataset that does not have lyrics?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there is any song with empty lyrics
    has_empty_lyrics = dataset['Lyrics'].str.strip().isnull().any()
    
    return has_empty_lyrics
",bool,TRUE,TRUE
How many songs were produced in 1965?,In how many entries does the year 1965 appear in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    answer = db.loc[db['Year'] == 1965].shape[0]
    return answer
",int64,100,100
In which year was the song with the highest rank produced?,What is the year of release for the song with the highest rank?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant information from the dataset table schema
    columns = {col[0:-2]: col[-1] for col in datasetTableSchema}
    
    # Filtering the DataFrame to get only the song with the highest rank
    max_rank_song = db.loc[db[""Rank""] == db[""Rank""].max()]

    # Extracting the year of release for that song
    answer = max_rank_song[""Year""].values[0]

    return answer
",uint16,1965,1965
What's the rank of the song with the longest lyrics?,Which rank corresponds to the song having the longest lyrics?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter out rows with NaN or empty lyrics
    valid_lyrics = db.dropna(subset=['Lyrics'])
    
    # Find the song with the longest lyrics
    longest_lyrics_song = valid_lyrics.loc[valid_lyrics['Lyrics'].str.len().idxmax()]['Song']
    
    # Get the rank corresponding to this song
    corresponding_rank = db.loc[db['Song'] == longest_lyrics_song, 'Rank'].iloc[0]
    
    return corresponding_rank
",uint8,19,19
How many unique artists are there in the dataset?,What is the total number of distinct artists present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    num_distinct_artists = dataset['Artist'].nunique()
    
    return num_distinct_artists
",int64,2473,2473
Who is the artist of the song with the highest rank?,Which artist created the song that has the highest rank?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the song with the highest rank
    max_rank_song = dataset.loc[dataset[""Rank""] == dataset[""Rank""].min()]
    
    # Return the artist of that song
    artist_of_max_rank_song = max_rank_song[""Artist""].iloc[0]

    return artist_of_max_rank_song
",category,sam the sham and the pharaohs,sam the sham and the pharaohs
What is the title of the song with the lowest rank?,Which song has the lowest rank according to the Billboard dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant column for ranking from the DataFrame
    ranks = db.loc[:, 'Rank']
    
    # Find the minimum rank value
    min_rank_value = ranks.min()
    
    # Filter the DataFrame to get the song with this minimum rank
    song_with_min_rank = db.loc[ranks == min_rank_value, 'Song'].iloc[0]
    
    return song_with_min_rank
",string,wooly bully,how sweet it is to be loved by you
Which song's lyrics contain the word 'love' the most times?,,,,ERROR,the way you love me
What is the title of the top song produced in the earliest year?,Which song was ranked first in the earliest year according to the Billboard dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for the earliest year
    earliest_year_data = dataset.loc[dataset['Year'] == dataset['Year'].min()]
    
    # Find the song ranked first in that year
    first_ranked_song = earliest_year_data.loc[earliest_year_data['Rank'] == 1, 'Song']
    
    # Return the result as a single string value
    return first_ranked_song.iloc[0]
",string,wooly bully,wooly bully
Who are the artists of the top 5 ranked songs?,Which artists have songs ranked in the top 5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_5_songs = dataset[dataset['Rank'] <= 5]
    artist_list = top_5_songs['Artist'].tolist()
    
    return artist_list
",list of (category),"['sam the sham and the pharaohs', 'four tops', 'the rolling stones', 'we five', 'the righteous brothers', 'ssgt barry sadler', 'the association', 'the righteous brothers', 'the four tops', '  the mysterians', 'lulu', 'the box tops', 'bobbie gentry', 'the association', 'the monkees', 'the beatles', 'paul mauriat', 'bobby goldsboro', 'otis redding', 'the rascals', 'the archies', 'the 5th dimension', 'the temptations', 'the rolling stones', 'sly  the family stone', 'simon  garfunkel', 'the carpenters', 'the guess who', 'bj thomas', 'edwin starr', 'three dog night', 'rod stewart', 'carole king', 'the osmonds', 'bee gees', 'roberta flack', 'gilbert osullivan', 'don mclean', 'harry nilsson', 'sammy davis jr', 'tony orlando and dawn', 'jim croce', 'roberta flack', 'marvin gaye', 'paul mccartney  wings', 'barbra streisand', 'terry jacks', 'love unlimited orchestra', 'redbone', 'the jackson 5', 'captain  tennille', 'glen campbell', 'elton john', 'freddy fender', 'frankie valli', 'wings', 'elton john  kiki dee', 'johnnie taylor', 'the four seasons', 'wild cherry', 'rod stewart', 'andy gibb', 'the emotions', 'barbra streisand', 'hot', 'andy gibb', 'bee gees', 'debby boone', 'bee gees', 'exile', 'the knack', 'donna summer', 'chic', 'rod stewart', 'peaches  herb', 'blondie', 'pink floyd', 'olivia newtonjohn', 'michael jackson', 'captain  tennille', 'kim carnes', 'diana ross  lionel richie', 'kenny rogers', 'john lennon', 'rick springfield', 'olivia newtonjohn', 'survivor', 'joan jett and the blackhearts', 'paul mccartney and stevie wonder', 'the j geils band', 'the police', 'michael jackson', 'irene cara', 'men at work', 'michael jackson', 'prince', 'tina turner', 'paul mccartney and michael jackson', 'kenny loggins', 'phil collins', 'wham featuring george michael', 'madonna', 'wham', 'foreigner', 'chaka khan', 'dionne and friends dionne warwick gladys knight elton john and stevie wonder', 'lionel richie', 'klymaxx', 'patti labelle and michael mcdonald', 'mr mister', 'the bangles', 'heart', 'gregory abbott', 'whitney houston', 'starship', 'george michael', 'inxs', 'george harrison', 'rick astley', 'guns n roses', 'chicago', 'bobby brown', 'poison', 'paula abdul', 'janet jackson', 'wilson phillips', 'roxette', 'sinead oconnor', 'bell biv devoe', 'madonna', 'bryan adams', 'color me badd', 'cc music factory', 'paula abdul', 'timmy t', 'boyz ii men', 'sir mixalot', 'kris kross', 'vanessa williams', 'tlc', 'whitney houston', 'tag team', 'ub40', 'janet jackson', 'silk', 'ace of base', 'all4one', 'boyz ii men', 'celine dion', 'mariah carey', 'coolio featuring lv', 'tlc', 'tlc', 'seal', 'boyz ii men', ""los del r'io"", 'mariah carey and boyz ii men', 'celine dion', 'the tony rich project', 'mariah carey', 'elton john', 'jewel', 'puff daddy featuring faith evans and 112', 'toni braxton', 'puff daddy featuring mase', 'next', 'brandy and monica', 'shania twain', 'savage garden', 'leann rimes', 'cher', 'tlc', 'monica', 'whitney houston featuring faith evans and kelly price', 'britney spears', 'faith hill', 'santana featuring rob thomas', 'santana featuring the product gb', 'joe', 'vertical horizon', 'lifehouse', 'alicia keys', 'janet', 'train', 'jennifer lopez featuring ja rule', 'nickelback', 'ashanti', 'nelly', 'nelly featuring kelly rowland', 'the calling', '50 cent', 'r kelly', 'sean paul', 'beyonce featuring jayz', '3 doors down', 'usher featuring lil jon and ludacris', 'usher', 'alicia keys', 'maroon 5', 'outkast featuring sleepy brown', 'mariah carey', 'gwen stefani', 'mario', 'kelly clarkson', 'ciara and missy elliott', 'daniel powter', 'sean paul', 'nelly furtado featuring timbaland', 'james blunt', 'shakira featuring wyclef jean', 'beyonce', 'rihanna featuring jayz', 'gwen stefani featuring akon', 'fergie', 'tpain featuring yung joc', 'flo rida featuring tpain', 'leona lewis', 'alicia keys', 'lil wayne featuring static major', 'timbaland featuring onerepublic', 'the black eyed peas', 'lady gaga', 'lady gaga featuring colby odonis', 'the black eyed peas', 'taylor swift', 'keha', 'lady antebellum', 'train', 'katy perry featuring snoop dogg', 'usher featuring william', 'adele', 'lmfao featuring lauren bennett and goonrock', 'katy perry', 'katy perry featuring kanye west', 'pitbull featuring neyo afrojack and nayer', 'gotye featuring kimbra', 'carly rae jepsen', ""fun featuring janelle mon'ae"", 'maroon 5 featuring wiz khalifa', 'ellie goulding', 'macklemore and ryan lewis featuring wanz', 'robin thicke featuring ti and pharrell williams', 'imagine dragons', 'baauer', 'macklemore and ryan lewis featuring ray dalton', 'pharrell williams', 'katy perry featuring juicy j', 'john legend', 'iggy azalea featuring charli xcx', 'onerepublic', 'mark ronson featuring bruno mars', 'ed sheeran', 'wiz khalifa featuring charlie puth', 'fetty wap', 'maroon 5']","['sam the sham and the pharaohs', 'ssgt barry sadler', 'the beach boys', 'the beatles', 'the beatles']"
What are the titles of the 3 songs with the shortest lyrics?,,,,ERROR,"['girl youll be a woman soon', 'papa dont preach', 'breathe']"
What are the top 4 songs by rank produced in the most recent year?,Which are the four songs with the highest rank that were released in the most recent year?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant columns from the DataFrame
    billboard_df = db.rename(columns={'Rank': 'rank', 'Song': 'song', 'Artist': 'artist'})
    
    # Filter songs released in the most recent year
    latest_year = billboard_df['Year'].max()
    filtered_songs = billboard_df[billboard_df['Year'] == latest_year]
    
    # Sort by rank and select top 4 songs
    top_four_songs = filtered_songs.nlargest(4, 'rank')['song'].tolist()
    
    return top_four_songs
",list of string,"['how deep is your love', 'back to back', 'night changes', 'she knows']","['uptown funk', 'thinking out loud', 'see you again', 'trap queen']"
Who are the artists of the bottom 5 ranked songs?,Which artists have songs ranked in the bottom 5 positions?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the rank column from the DataFrame
    ranks = db.loc[:, 'Rank']
    
    # Getting the bottom 5 positions
    bottom_five_positions = ranks.nsmallest(5)
    
    # Filtering artists based on their songs in bottom five positions
    artists_in_bottom_five = db.loc[bottom_five_positions.index, 'Artist'].tolist()
    
    return artists_in_bottom_five
",list of (category),"['sam the sham and the pharaohs', 'ssgt barry sadler', 'lulu', 'the beatles', 'the archies']","['marvin gaye', 'wilson pickett', 'neil diamond', 'jerry butler', 'the beatles']"
What are the ranks of the top 3 songs with the most occurrences of the word 'love' in their lyrics?,,,,ERROR,"[64, 41, 28]"
What are the years of production of the bottom 4 ranked songs?,Which years correspond to the songs ranked last four in terms of production?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extracting the last four entries based on rank
    last_four_entries = dataset.nlargest(4, 'Rank')
    
    # Extracting the corresponding years for these songs
    years = last_four_entries['Year'].tolist()
    
    return years
",list of uint16,"[1965, 1966, 1967, 1968]","[1965, 1966, 1967, 1968]"
What are the ranks of the 2 songs produced in the earliest year?,,,,ERROR,"[1, 2]"
What are the years of production of the top 5 songs with the longest lyrics?,,,,ERROR,"[1998, 2009, 2010, 2007, 2002]"
Is the song with the highest rank from 1965 by the Beatles?,Does a song by The Beatles that was released in 1965 have the highest rank?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    beatles_songs_1965 = db[(db['Artist'] == 'The Beatles') & (db['Year'] == 1965)]
    highest_rank_song = beatles_songs_1965.loc[beatles_songs_1965['Rank'] == beatles_songs_1965['Rank'].min()]
    
    return highest_rank_song.empty
",bool,TRUE,FALSE
Which artist has the song with the highest rank in 1965?,Who is the artist of the song that had the highest rank in the year 1965?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the year 1965
    filtered_data = db[db['Year'] == 1965]
    
    # Find the song with the highest rank in that filtered data
    max_rank_song = filtered_data.loc[filtered_data['Rank'] == filtered_data['Rank'].min()]
    
    # Return the artist of that song
    artist_name = max_rank_song['Artist'].iloc[0]
    
    return artist_name
",string,sam the sham and the pharaohs,sam the sham and the pharaohs
Who are the artists of the top 3 songs in 1965?,,,,ERROR,"['sam the sham and the pharaohs', 'four tops', 'the beach boys']"
What are the years of production of the top 3 songs with the word 'love' in their lyrics by the Beatles?,Which are the years in which the top 3 songs by the Beatles featuring the word 'love' in their lyrics were produced?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter for songs by The Beatles
    beatles_songs = db[db['Artist'] == 'The Beatles']
    
    # Filter for lyrics containing the word 'love'
    love_lyrics_songs = beatles_songs[beatles_songs['Lyrics'].str.contains('love', na=False)]
    
    # Get the top 3 songs based on rank
    top_3_songs = love_lyrics_songs.nlargest(3, 'Rank')
    
    # Extract the years of these top 3 songs
    years_of_top_3 = top_3_songs['Year'].tolist()
    
    return years_of_top_3
",list of uint16,[],"[1967, 1965, 1966]"
"Are there records where the 'count' exceeds 20,000?","Are there any entries in the dataset where the count value is greater than 20,000?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if there are any entries with count greater than 20,000
    result = dataset['count'] > 20000
    is_any_greater_than_20k = result.any()

    return is_any_greater_than_20k
",bool,TRUE,TRUE
Do we have any records originating from 'Jefferson'?,Are there any records in the dataset where the origin place is named 'Jefferson'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    result = dataset[dataset[""name_origin""] == ""Jefferson""]
    return not result.empty
",bool,TRUE,TRUE
Are there destinations with the name 'Baldwin'?,Do any destinations have the name Baldwin?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    has_baldwin = 'Baldwin' in dataset['name_dest'].unique()
    
    return has_baldwin
",bool,TRUE,TRUE
Are there records where the latitude of the destination is greater than 60?,Are there any destinations with a latitude greater than 60?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    result = dataset[dataset[""lat_dest""] > 60]
    is_any_destination = not result.empty

    return is_any_destination
",bool,TRUE,TRUE
How many unique destinations are there in the dataset?,What is the total number of distinct destinations in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the 'name_dest' column from the DataFrame
    destination_names = db['dest']
    
    # Calculate the number of distinct destinations using unique() and then taking the length
    num_distinct_destinations = len(destination_names.unique())
    
    return num_distinct_destinations
",uint32,3219,3219
"On average, how many times is each origin-destination pair reported?",What is the average count of reports for each unique origin-destination pair?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Create a groupby object on 'origin' and 'name_dest'
    grouped_data = db.groupby(['origin', 'name_dest'])['count'].mean()
    
    # Calculate the average count of reports for each unique origin-destination pair
    average_count = grouped_data.mean()

    return average_count
",float64,61.64097018,67.74537981
What's the highest count value in the dataset?,What is the maximum value found in the 'count' column of the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_count = db[""count""].max()
    return max_count
",uint16,40580,40580
How many unique origin names are there in the dataset?,What is the total number of distinct name_origin entries in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    num_distinct_name_origin = dataset['name_origin'].nunique()
    
    return num_distinct_name_origin
",int64,1904,1904
From which origin do we have the highest 'count' recorded?,Which origin has the highest recorded count?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant column for grouping and counting
    grouped_data = db.groupby('name_origin')['count'].sum().reset_index()
    
    # Find the origin with the highest recorded count
    max_count_origin = grouped_data.loc[grouped_data['count'] == grouped_data['count'].max(), 'name_origin'].iloc[0]
    
    return max_count_origin
",string,Los Angeles,
To which destination do we find the highest 'count' reported?,Which destination has the highest reported count?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant column for the destination names and the count
    destinations = db.sort_values(by='count', ascending=False).reset_index(drop=True)
    
    # Getting the name of the destination with the highest count
    destination_with_max_count = destinations.loc[destinations['count'] == destinations['count'].max(), 'name_dest'].iloc[0]

    return destination_with_max_count
",string,Los Angeles,Los Angeles
Which origin has the lowest latitude?,What is the origin with the minimum latitude value?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    min_lat_origin = db.loc[db['lat_origin'] == db['lat_origin'].min()]['name_origin'].iloc[0]
    return min_lat_origin
",string,GuÃƒÂ¡nica,GuÃ¡anica
Which destination has the highest longitude?,What is the name of the destination with the highest longitude?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant table from the database or DataFrame
    df = db
    
    # Finding the row with the maximum longitude in the 'lon_dest' column
    max_lon_row = df.loc[df['lon_dest'].idxmax()]
    
    # Returning the name of the destination
    return max_lon_row['name_dest']
",string,Fajardo,Fajardo
What are the 3 origins with the highest average count?,Which are the three name_origins with the highest average count?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Group by 'name_origin' and calculate the mean of 'count'
    grouped_data = db.groupby('name_origin')['count'].mean().reset_index()
    
    # Sort the data in descending order based on the mean count
    sorted_data = grouped_data.sort_values(by='count', ascending=False)
    
    # Select the top 3 name_origins
    top_three_name_origins = sorted_data['name_origin'].head(3).tolist()
    
    return top_three_name_origins
",list of (string),"['Los Angeles', 'New York', 'San Francisco']","['Los Angeles', 'New York', 'San Francisco']"
Which are the 4 destinations with the lowest average count?,,,,ERROR,"['Kalawao', 'Loving', 'Kenedy', 'Wheatland']"
List the 5 origins with the highest average latitude values.,Which are the five origins with the highest mean latitudes?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the mean latitude for each origin
    mean_lat_by_origin = dataset.groupby('name_origin')['lat_dest'].mean()
    
    # Get the indices of the top 5 origins with the highest mean latitudes
    top_5_indices = mean_lat_by_origin.argsort()[-5:][::-1]
    
    # Extract the names of these top 5 origins
    top_5_origins = list(mean_lat_by_origin.iloc[top_5_indices].index)
    
    return top_5_origins
",list of (string),"['Kusilvak', 'Dillingham', 'Aleutians East', 'Lake and Peninsula', 'Hoonah-Angoon']","['North Slope', 'Northwest Arctic', 'Yukon-Koyukuk', 'Nome', 'Fairbanks North Star']"
Which 2 origins have the lowest non-null average longitude values?,What are the two origins with the smallest non-null average longitude values?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter out any null values in the 'lon_origin' column
    filtered_data = db.dropna(subset=['lon_origin'])
    
    # Group by 'name_origin' and calculate the mean of 'lon_origin'
    grouped_lon = filtered_data.groupby('name_origin')['lon_origin'].mean().reset_index()
    
    # Sort the results to get the smallest non-null average longitude values
    sorted_grouped_lon = grouped_lon.sort_values(by='lon_origin')
    
    # Get the top two origins with the smallest non-null average longitude values
    top_two_origins = sorted_grouped_lon.head(2)['name_origin'].tolist()
    
    return top_two_origins
",list of (string),"['Aleutians West', 'Nome']","['Aleutians West', 'Nome']"
List the highest 5 count values.,Retrieve the top 5 most frequent count values.,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_counts = dataset['count'].value_counts().head(5).index.tolist()
    return top_counts
",list of int64,"[5, 4, 8, 6, 7]","[40580, 39899, 38430, 28524, 24452]"
What are the 3 highest latitude values for destinations?,What are the top 3 highest latitude values for destination locations?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract destination latitudes from the dataset
    dest_latitudes = db['lat_dest']
    
    # Get the top 3 highest latitude values for destination locations
    top_3_highest_latitudes = dest_latitudes.nlargest(3).tolist()
    
    return top_3_highest_latitudes
",list of float64,"[69.42718361, 69.42718361, 69.42718361]","[69.42718361, 69.42718361, 69.42718361]"
Rank the lowest 4 longitude values for origins.,,,,ERROR,"[-167.08526, -167.08526, -167.08526, -167.08526]"
Which 6 destination IDs have the highest average counts?,,,,ERROR,"[6037, 36061, 48201, 6059, 6071, 6085]"
Are there talks with more than a million views?,Is there any talk that has received more than a million views?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if the ""views"" column exists in the dataset
    if 'views' not in dataset.columns:
        return False
    
    # Check if the values in the ""views"" column are greater than a million (1,000,000)
    has_more_than_a_million_views = any(dataset[""views""] > 1_000_000)
    
    return has_more_than_a_million_views
",bool,TRUE,TRUE
Is there a talk by 'Elon Musk'?,Does the dataset contain a talk given by Elon Musk?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if 'speaker_1' column exists in the dataset
    if 'speaker_1' not in dataset.columns:
        return False
    
    # Check if Elon Musk is present in the 'speaker_1' column
    elon_musk_talk = dataset[dataset['speaker_1'] == 'Elon Musk']
    
    # Return True if there is at least one talk by Elon Musk, otherwise False
    return not elon_musk_talk.empty
",bool,TRUE,TRUE
Are there any TEDx events included?,Does the dataset contain any entries for TEDx events?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if 'event' column exists and contains 'TEDx'
    event_column_exists = 'event' in dataset.columns
    contains_tedx_events = False
    
    if event_column_exists:
        contains_tedx_events = any(event.lower() == 'tedx' for event in dataset['event'])
    
    return contains_tedx_events
",bool,FALSE,TRUE
Are there talks available in more than 10 languages?,,,,ERROR,TRUE
How many unique speakers are there in the dataset?,,,,ERROR,3274
What's the average number of views for the talks?,Can you calculate the mean value of views for all talks?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    mean_views = dataset[""views""].mean()
    
    return mean_views
",float64,2148005.574,2148005.574
What's the maximum duration of a talk (in seconds)?,What is the highest duration recorded for any talk in seconds?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_duration = dataset[""duration""].max()
    return max_duration * 60  # Convert minutes to seconds
",uint16,38712,3922
How many talks have more than 500 comments?,What is the count of talks that have received more than 500 comments?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    answer = db[db['comments'] > 500].shape[0]
    return answer
",int64,186,186
Which event has the highest average views?,What is the event with the highest average number of views?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by event and calculate the mean number of views for each event
    event_views = dataset.groupby('event')['views'].mean().reset_index()
    
    # Find the event with the highest average number of views
    max_avg_views_event = event_views.loc[event_views['views'] == event_views['views'].max(), 'event']
    
    # Return the result as a single string value
    return max_avg_views_event.iloc[0]

",string,TEDxPuget Sound,TEDxPuget Sound
Which speaker's talk has the most comments?,Which speaker's talk received the highest number of comments?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the column names from the dataset schema
    columns = [col[0] for col in datasetTableSchema]
    
    # Filtering to get only the talks with comments
    talks_with_comments = db.loc[db['comments'].notnull()]
    
    # Finding the talk with the maximum number of comments
    max_comments_talk = talks_with_comments.loc[talks_with_comments['comments'] == talks_with_comments['comments'].max()]

    # Return the speaker's name from the talk with the maximum comments
    return max_comments_talk['speaker_1'].iloc[0]
",string,Richard Dawkins,Richard Dawkins
Which talk's title has the least views?,What is the title of the talk with the minimum number of views?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_views_talk = dataset.loc[dataset[""views""] == dataset[""views""].min(), ""title""]
    return min_views_talk.iloc[0]
",string,Por quÃ© necesitamos proteger el alta mar,Por quÃ© necesitamos proteger el alta mar
In which event was the longest talk held?,Which event had the longest talk duration?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the maximum duration for each event
    max_duration_per_event = dataset.groupby('event')['duration'].transform('max')
    
    # Filter rows where the duration matches the group's maximum duration
    longest_talks = dataset[dataset['duration'] == max_duration_per_event]
    
    # Get the unique events with the longest talk duration
    event_with_longest_duration = longest_talks['event'].unique()
    
    # Return the result as a single string if there is only one, otherwise as a list of strings
    return event_with_longest_duration.tolist() if len(event_with_longest_duration) > 1 else event_with_longest_duration[0]
",string,"['TED2006', 'TED2005', 'TED2003', 'TEDSalon 2006', 'TED2007', 'TEDSalon 2007 Hot Science', 'Skoll World Forum 2007', 'TED1984', 'TED1990', 'DLD 2007', 'TED2008', 'TED2002', 'TED1998', 'LIFT 2007', 'EG 2007', 'TEDGlobal 2007', 'TED Prize Wish', 'Chautauqua Institution', 'TEDSalon 2009 Compassion', 'Serious Play 2008', 'TED2004', 'TEDGlobal 2005', 'Taste3 2008', 'EG 2008', 'TED2001', 'Elizabeth G. Anderson School', 'TED@State', 'TEDGlobal 2009', 'TEDSalon London 2009', 'TEDxTC', 'TED2009', 'TEDxSMU', 'TEDxBoston 2009', 'TEDMED 2009', 'TEDxBerlin', 'TEDxNASA', 'TED2010', 'TEDxPuget Sound', 'TED in the Field', 'TEDxNYED', 'Mission Blue Voyage', 'TEDxEdmonton', 'TEDxAtlanta', 'TEDxOilSpill', 'TEDGlobal 2010', 'TEDxBoston 2010', 'TEDIndia 2009', 'Business Innovation Factory', 'TED@Cannes', 'TED Senior Fellows at TEDGlobal 2010', 'TEDxDU 2010', 'TEDxTelAviv 2010', 'TEDxNextGenerationAsheville', 'TEDxMidwest', 'TEDxRotterdam 2010', 'TEDxHouston', 'TEDSalon NY2011', 'TEDWomen 2010', 'TEDxGreatPacificGarbagePatch', 'TEDxGÃ¶teborg 2010', 'TEDSalon London 2010', 'TEDMED 2010', 'TEDxPennQuarter', 'TEDPrize@UN', 'TED@MotorCity', 'TED2011', 'TEDxDubai', 'TEDActive 2011', 'TEDxPSU', 'TEDxSiliconValley', 'TEDxNorthwesternU', 'TEDxMaastricht', 'TEDxBG', 'Full Spectrum Auditions', 'INK Conference', 'TEDxParis 2010', 'TEDGlobal 2011', 'TEDxBoston 2011', 'TEDxUIUC', 'TEDSalon London Spring 2011', ""TEDxO'Porto"", 'TEDxSantaCruz', 'TEDxWaterloo', 'TEDxKids@Brussels', 'TEDxBoulder 2011', 'TEDxOrangeCoast', 'TEDxYYC', 'TEDxDU 2011', 'TEDxDirigo', 'TEDxRC2', 'TEDxZurich 2011', 'TEDxWomen 2011', 'TEDxMIA', 'TEDxNASA@SiliconValley', 'TEDMED 2011', 'TEDxToronto 2010', 'TEDxAmsterdam', 'TEDxBloomington', 'TED1994', 'TEDxSanMigueldeAllende', 'TEDxEast', 'TEDxVancouver', 'TEDxIslay', 'TEDxAmericanRiviera', 'TEDxDublin', 'TEDxVictoria', 'TEDxRainier', 'TEDxAsheville', 'TEDxUW', 'TED-Ed', 'TEDxPortofSpain', 'TEDxNewy', 'TED2012', 'TEDxOslo', 'TEDxChange', 'TEDxKrakow', 'TEDSalon London Fall 2011', 'TEDxConcordiaUPortland', 'TEDSalon NY2012', 'TEDxPhoenix', 'TED@SXSWi', 'TEDxMonterey', 'TEDxBerkeley', 'TEDxHogeschoolUtrecht', 'TEDxSanJoseCA', 'TEDxSussexUniversity', 'TEDxSummit', 'TEDxPeachtree', 'TEDMED 2012', 'TEDxGrandRapids', 'TEDxABQ', 'TEDxAustin', 'TEDxSanDiego', 'TEDxImperialCollege', 'TEDSalon London Spring 2012', 'TEDxObserver', 'TEDxManhattan', 'TEDxUCL', 'TEDxMaui', 'TEDxBoston 2012', 'TEDxUSC', 'TEDGlobal 2012', 'TEDxHousesOfParliament', 'TEDxToronto 2011', 'TED@London', 'TEDxWinnipeg', 'TED@Bangalore', 'TEDxCHUV', 'TEDxEQChCh', 'TEDxHelvetia', 'TEDxKC', 'TED@Nairobi', 'TEDxGeorgetown', 'TED@Johannesburg', 'TEDYouth 2011', 'TEDxWitsUniversity', 'TEDxJaffa 2012', 'TEDSalon London Fall 2012', 'TEDxHampshireCollege', 'TEDxGoodenoughCollege', 'TEDxGlasgow', 'TEDxWomen 2012', 'TEDxZurich 2012', 'TEDxSeoul', 'TEDxCaltech', 'TEDxConcorde', 'TED2013', 'TEDYouth 2012', 'TEDxSeattleU', 'TEDxRiodelaPlata', 'TED@Intel', 'TEDActive 2013', 'TEDxMiamiUniversity', 'TED Talks Education', 'TEDxFiDiWomen', 'TEDMED 2013', 'TEDxSydney', 'TEDSalon NY2013', 'TEDxDeExtinction', 'TED@New York', 'TEDxNijmegen', 'TEDxColbyCollege', 'TEDxWarwick', 'TEDxDanubia', 'TEDxTokyo', 'TEDGlobal 2013', 'TEDxKids@Ambleside', 'TEDxUdeM', 'TEDYouth 2013', 'TEDxMet', 'TEDxMarin', 'TEDxBeirut', 'TEDxCaFoscariU', 'TED@BCG Singapore', 'TEDWomen 2013', 'TEDxJaffa 2013', 'TEDxZurich 2013', 'TED Fellows Retreat 2013', 'TEDxParis 2012', 'TED@State Street Boston', 'TED@BCG San Francisco', 'TED2014', 'TEDxUMKC', 'TEDxLeuvenSalon', 'TEDActive 2014', 'TEDxUofM', 'TEDxCMU', 'TEDxStanford', 'TEDxColumbus', 'TEDxKyoto', 'TEDxClaremontColleges', 'TEDSalon NY2014', 'TEDxMonroeCorrectionalComplex', 'TEDCity2.0', 'TEDxBrighton', 'TEDxSonomaCounty', 'TEDxAmazonia', 'TED@Unilever', 'TEDMED 2014', 'TEDSalon Berlin 2014', 'TED@NYC', 'TEDGlobal 2014', 'TEDxBoston', 'TED@BCG Berlin', 'TEDxArendal', 'TEDxBeaconStreet', 'TEDxBrussels', 'TEDxNorrkoping', 'TEDYouth 2014', 'TED@State Street London', 'TEDxCanberra', 'TEDxYouth@Manchester', 'TEDxBinghamtonUniversity', 'TEDxLinnaeusUniversity', 'TEDxPlaceDesNations', 'TEDxSBU', 'TEDxMuncyStatePrison', 'TEDxSouthBank', 'TED2015', 'TEDSalon NY2015', 'TEDxBoulder', 'TEDGlobalLondon', 'TEDxIndianapolis', 'TED@BCG London', 'TEDxChapmanU', 'TEDxGoldenGatePark 2012', 'TEDWomen 2015', 'TEDxUF', 'TEDxPenn', 'TEDxProvidence', 'TEDGlobal>London', 'TED Fellows Retreat 2015', 'TEDxThessaloniki', 'TED Fellows 2015', 'TEDxCannes', 'Mission Blue II', 'TEDxToulouse', 'TEDYouth 2015', 'TEDxGroningen', 'TEDGlobal>Geneva', 'TEDxYouth@Sydney', 'TEDxAmoskeagMillyard', 'TEDxUM', 'TEDxCreativeCoast', 'TED2016', 'TEDMED 2015', 'TEDxDelft', 'Global Witness', 'TEDActive 2015', 'TEDxGatewayWomen', 'TEDxEastEnd', 'TED Talks Live', 'TED@BCG Paris', 'TEDxDesMoines', 'TEDxColoradoSprings', 'TEDSummit', 'TEDxMontreal', 'TEDxIndianaUniversity', 'TEDNYC', 'TEDWomen 2016', 'TEDxMtHood', 'TEDxGhent', 'TEDxSaltLakeCity', 'TEDxNewYork', 'TEDxCambridge', 'TEDxOmaha', 'TEDxSFU', 'TEDxVienna', 'TEDxExeter', 'TEDxManhattanBeach', 'TED Dialogues', 'TEDxNatick', 'TEDxFrankfurt', 'TEDxColumbusWomen', 'TEDMED 2016', 'TEDxEuston', 'TEDxPerth', 'TEDxSanQuentin', 'TEDxVirginiaTech', 'TED2017', 'TEDxSkoll', 'TEDLagos Ideas Search', 'TEDNairobi Ideas Search', 'TEDxFulbrightDublin', 'TEDxOrcasIsland', 'TEDxCrenshaw', 'TEDxHamburg', 'TEDxZurich', 'TEDxCharlottesville', 'TEDGlobal 2017', 'TEDGlobal>NYC', 'TEDxBend', 'TEDxBratislava', 'TEDxPasadena', 'TEDxMileHighWomen', 'TED Salon Brightline Initiative', 'TEDxYouth@Bath', 'TED Studio', 'TEDWomen 2017', 'TEDxStormontWomen', 'TEDxPennsylvaniaAvenue', 'TEDxLeuven', 'TED Talks India', 'TED@IBM', 'TEDxVermilionStreet', 'TED@Tommy', 'TED@Westpac', 'TEDxPaloAlto', 'TEDxYorkU', 'TEDxOhioStateUniversity', 'TEDMED 2017', 'TEDxSnoIsleLibraries', 'TEDxUppsalaUniversity', 'TEDxUniversityofMississippi', 'Small Thing Big Idea', 'TEDxMalagueta', 'TED@BCG Milan', 'TEDxCoconutGrove', 'TEDxUniversityofNevada', 'TEDxSF', 'TEDxTysons', 'TEDxMidAtlantic 2013', 'TEDxBerkleeValencia', 'TEDxHull', 'TEDxMileHigh', 'Torchbearers', 'TEDxMidAtlantic', 'TED2018', 'TEDxMidAtlantic 2017', 'TEDxLincolnSquare', 'TED Residency', 'TEDxMadrid', 'TEDxParis', 'DIY Neuroscience', 'TEDxPortland', 'TEDxAustinWomen', 'TEDxFIU', 'TEDxUCDavis', 'TEDxUIdaho', 'TEDxVCU', 'TEDxKakumaCamp', 'TEDxOrlando', 'TEDxFondduLac', 'TED en EspaÃ±ol en NYC', 'TED@UPS', 'TEDxMemphis', 'TEDxLivoniaCCLibrary', 'TEDxGalway', 'TEDxBroadway', 'TED Salon Optum', 'TEDxDePaulUniversity', 'TEDxUofT', 'TEDxPittsburgh', 'We the Future', 'TEDxVeniceBeach', 'TEDxLondonBusinessSchool', 'TEDxGateway', 'TEDxTeen', 'TEDxUWLaCrosse', 'TED@BCG Toronto', 'TED Salon Zebra Technologies', 'TEDxUGA', 'TED Salon Samsung', 'TEDWomen 2018', 'TEDxBrisbane', 'TED Salon: Belonging', 'TEDxPurdueU', 'TED@Merck KGaA, Darmstadt, Germany', 'TEDxStockholm', 'TED Salon: Radical Craft', 'TED Salon Verizon', 'TEDxSalford', 'TEDxCoventGardenWomen', 'TEDxToronto', 'The Way We Work', 'TED Salon Doha Debates', 'TEDxCERN', 'TEDxNantes', 'TEDxAthens', 'TEDxLSU', 'TEDxManchester', 'TEDxUHasselt', 'TEDxProvincetown', 'TED Salon: Education Everywhere', 'TEDxAmsterdamWomen', 'TED-Ed Weekend', 'TEDxAarhus', 'TEDxSeattle', 'TEDxAuckland', 'TEDxShimizu', 'TED2019', 'Arbejdsglaede Live', 'TEDxCreightonU', 'TED Salon U.S. Air Force', 'TEDxAlbertopolis', 'TEDxYouth@Beaconstreet', 'TEDxRapidCity', 'TEDxCuauhtÃ©moc', 'TEDxTaipei', 'TEDxLondon', 'TEDxBeaconStreetSalon', 'TEDxJacksonHole', 'TEDxMÃ¼nchen', 'TEDxKlagenfurt', 'TEDxSanFrancisco', 'TEDxWanChai', 'TED Salon The Macallan', 'TEDxYouth@MÃ¼nchen', 'TEDSummit 2019', 'TEDxFergusonLibrary', 'TED Salon Border Stories', 'TEDxYouth@Valladolid', 'TEDxBasel', 'TEDxJacksonville', 'TED@BCG Mumbai', 'TED@DuPont', 'TEDMED 2018', 'TED Talks India: Nayi Baat', 'TEDxSantaClaraUniversity', 'Countdown', 'TEDWomen 2019', 'TED@NAS', 'TEDxChristchurch', 'TEDxNashville', 'TED Masterclass', 'TED@WellsFargo', 'Currently', 'TEDxUCLA', 'TEDxEasthamptonWomen', 'TEDxCordoba', 'The TED Interview', 'TEDxStCloud', 'TED Connects', 'TEDxEindhoven', 'TEDxQueensU', 'TEDxDetroit', 'TEDxTufts', 'TED2020: The Prequel', 'TEDxRiga']",Countdown
Which are the top 4 events with the highest average number of comments?,What are the titles of the top 4 events that have the highest average number of comments?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by event and calculate the mean number of comments for each event
    avg_comments_per_event = dataset.groupby('event')['comments'].mean().sort_values(ascending=False)
    
    # Get the top 4 events with the highest average number of comments
    top_4_events = avg_comments_per_event.index[:4].tolist()
    
    # Retrieve the titles of these top 4 events from the dataset
    top_titles = dataset.loc[dataset['event'].isin(top_4_events), 'title'].drop_duplicates().tolist()
    
    return top_titles
",list of string,"['How great leaders inspire action', 'Creative houses from reclaimed stuff', 'The power of vulnerability', 'Why you will fail to have a great career', ""Violence against women -- it's a men's issue""]","['TEDxPuget Sound', 'TEDxHouston', 'TEDxFiDiWomen', 'TEDxUW']"
List the top 3 most frequent speakers in the dataset. If two have the same count go by alphabetical order. ,,,,ERROR,"['Alex Gendler', 'Iseult Gillespie', 'Emma Bryce']"
Which 5 events have the shortest average talk durations?,,,,ERROR,"['TEDxConcorde', 'Small Thing Big Idea', 'The TED Interview', 'TEDxConcordiaUPortland', 'The Way We Work']"
List 2 events with the most number of talks.,Which two events have the highest number of talks?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by event and count the number of talks
    event_counts = dataset['event'].value_counts()
    
    # Get the top two events with the highest number of talks
    top_two_events = event_counts.head(2).index.tolist()
    
    return top_two_events
",list of string,"['TED-Ed', 'TED2018']","['TED-Ed', 'TED2018']"
What are the top 4 most viewed talks' view counts?,,,,ERROR,"[65051954, 57074270, 56932551, 49730580]"
List the 3 shortest talk durations in the dataset.,What are the durations of the three shortest talks in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the three shortest talk durations
    shortest_durations = dataset['duration'].nlargest(3).sort_values().values
    
    return list(shortest_durations)
",list of int64,"[np.uint16(3740), np.uint16(3760), np.uint16(3922)]","[60, 78, 78]"
What are the 5 highest number of comments?,Which are the five talks with the highest number of comments?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_five_talks = dataset.nlargest(5, 'comments')
    return top_five_talks['comments'].tolist()
",list of float64,"[6449.0, 4931.0, 3424.0, 3006.0, 2984.0]","[6449.0, 4931.0, 3424.0, 3006.0, 2984.0]"
List the view counts of the 6 least viewed talks.,Retrieve the view counts for the six talks with the lowest number of views.,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by views in ascending order and select the top 6
    six_lowest_views = dataset.sort_values(by='views').head(6)
    
    # Extract the view counts for these six talks
    lowest_view_counts = six_lowest_views['views'].tolist()
    
    return lowest_view_counts
",list of uint32,"[0, 0, 0, 0, 0, 0]","[0, 0, 0, 0, 0, 0]"
Is it true that the oldest person in the dataset has a stroke?,,,,ERROR,TRUE
Do all smokers have hypertension?,Is it true that all individuals with a smoking status marked as smoker also have hypertension?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include individuals with smoking_status 'smoker'
    smokers = db[db['smoking_status'] == 'smoker']
    
    # Check if all individuals in this subset have hypertension (hypertension should be 1 for hypertension)
    result = smokers['hypertension'].all()
    
    return result
",bool,TRUE,FALSE
Are all people with heart diseases married?,Is it true that all individuals with heart disease status marked as 1 are married according to the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for individuals with heart disease marked as 1
    heart_disease_individuals = dataset[dataset[""heart_disease""] == 1]
    
    # Check if all these individuals are married (ever_married == 'Yes')
    all_married = heart_disease_individuals[""ever_married""].eq('Yes').all()
    
    return all_married
",bool,FALSE,FALSE
Is the average glucose level higher for males than females?,Does the average avg_glucose_level for males exceed that of females?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Separate male and female data
    male_data = dataset[dataset[""gender""] == ""Male""]
    female_data = dataset[dataset[""gender""] == ""Female""]
    
    # Calculate the average glucose level for males and females
    avg_glucose_male = male_data[""avg_glucose_level""].mean()
    avg_glucose_female = female_data[""avg_glucose_level""].mean()
    
    # Compare the averages
    does_exceed = avg_glucose_male > avg_glucose_female
    
    return does_exceed
",bool,TRUE,TRUE
How many people in the dataset have a stroke?,,,,ERROR,249
What is the average age of people who smoke?,What is the mean age of individuals who smoke according to the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for individuals who smoke
    smokers = db[db['smoking_status'] == 'smokes']
    
    # Calculate the mean age of these individuals
    mean_age_of_smokers = smokers['age'].mean()
    
    return mean_age_of_smokers
",float64,47.09632446,47.09632446
What is the highest glucose level recorded in the dataset?,What is the maximum value of the avg_glucose_level recorded in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_avg_glucose_level = db[""avg_glucose_level""].max()
    return max_avg_glucose_level
",float64,271.74,271.74
How many unique 'work_type' categories are there in the dataset?,What is the total number of distinct work_type categories present in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    unique_work_types = db['work_type'].unique()
    num_unique_work_types = len(unique_work_types)
    
    return num_unique_work_types
",int64,5,5
What is the most common work type among stroke patients?,Which is the most frequent work type for individuals who have experienced a stroke?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only individuals who have experienced a stroke
    stroke_cases = dataset[dataset[""stroke""] == 1]
    
    # Find the most frequent work type among those who have experienced a stroke
    most_frequent_work_type = stroke_cases[""work_type""].mode().iloc[0]

    return most_frequent_work_type
",category,Private,Private
What is the smoking status of the youngest person in the dataset?,What is the smoking status of the person with the minimum age in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_age_individual = dataset.loc[dataset[""age""].idxmin()]
    smoking_status = min_age_individual[""smoking_status""]

    return smoking_status
",category,Unknown,Unknown
What is the residence type of the person with the highest BMI?,What is the type of residence for the individual having the highest BMI?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataframe to get the row with the maximum BMI
    max_bmi_individual = db.loc[db['bmi'] == db['bmi'].max()]
    
    # Return the 'Residence_type' for that individual
    residence_type = max_bmi_individual['Residence_type'].iloc[0]
    
    return residence_type
",category,Rural,Rural
What is the gender of the person with the lowest glucose level?,Which gender corresponds to the individual with the lowest avg_glucose_level?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to find the individual with the lowest avg_glucose_level
    min_glucose_individual = db.loc[db[""avg_glucose_level""] == db[""avg_glucose_level""].min()]

    # Extract the gender of this individual
    gender_of_min_glucose = min_glucose_individual[""gender""].iloc[0]

    return gender_of_min_glucose
",string,Female,Female
What are the top 3 work types among people with heart diseases?,Which are the three most common work types for individuals who have experienced a stroke?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only individuals who have experienced a stroke
    stroke_cases = dataset[dataset[""stroke""] == 1]
    
    # Group by work type and count the occurrences
    work_type_counts = stroke_cases['work_type'].value_counts()
    
    # Get the top three most common work types
    top_three_work_types = work_type_counts.head(3).index.tolist()
    
    return top_three_work_types
",list of string,"['Private', 'Self-employed', 'Govt_job']","['Private', 'Self-employed', 'Govt_job']"
What are the 5 most common smoking statuses among people with a stroke?,Which are the five most frequent smoking statuses among individuals who have experienced a stroke?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only individuals who have experienced a stroke
    stroke_cases = dataset[dataset[""stroke""] == 1]
    
    # Group by smoking_status and count the occurrences
    smoking_status_counts = stroke_cases[""smoking_status""].value_counts()
    
    # Get the top 5 most frequent smoking statuses
    top_five_smoking_statuses = smoking_status_counts.head(5).index.tolist()
    
    return top_five_smoking_statuses
",list of string,"['never smoked', 'formerly smoked', 'Unknown', 'smokes']","['never smoked', 'formerly smoked', 'Unknown', 'smokes']"
What are the top 2 residence types of people with hypertension?,Which are the most common residence types for individuals who have hypertension?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only individuals with hypertension
    hypertensive_individuals = db[db['hypertension'] == 1]
    
    # Group by 'Residence_type' and count the occurrences
    residence_counts = hypertensive_individuals['Residence_type'].value_counts()
    
    # Convert the counts to a list of strings
    most_common_residences = residence_counts.index.tolist()
    
    return most_common_residences
",list of string,"['Rural', 'Urban']","['Rural', 'Urban']"
What are the top 2 work types among people who have never married?,Which are the two most common work types for individuals who have never married?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for individuals who have never married
    never_married = dataset[dataset['ever_married'] == 'No']
    
    # Group by work_type and count occurrences
    work_type_counts = never_married.groupby('work_type').size().reset_index(name='counts')
    
    # Sort the counts in descending order
    sorted_work_types = work_type_counts.sort_values(by='counts', ascending=False)
    
    # Get the top two most common work types
    top_two_work_types = sorted_work_types['work_type'].head(2).tolist()
    
    return top_two_work_types

",list of string,"['Private', 'children']","['Private', 'children']"
What are the oldest 5 ages of people with strokes?,What are the ages of the top 5 oldest individuals who have experienced a stroke?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for individuals who have experienced a stroke
    stroke_cases = dataset[dataset[""stroke""] == 1]
    
    # Sort the filtered data by age in descending order to get the oldest first
    sorted_ages = stroke_cases.sort_values(by='age', ascending=False)
    
    # Select the top 5 oldest individuals
    top_oldest = sorted_ages.head(5)
    
    # Extract and return their ages as a list of floats
    ages_of_top_oldest = top_oldest['age'].tolist()
    
    return ages_of_top_oldest
",list of float64,"[82.0, 82.0, 82.0, 82.0, 82.0]","[82.0, 82.0, 82.0, 82.0, 82.0]"
What are the 3 lowest BMIs among people who smoke?,Which are the three smallest BMIs for individuals who smoke?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    smoking_individuals = dataset[dataset[""smoking_status""] == ""smokes""]
    smallest_bmis = smoking_individuals.nsmallest(3, 'bmi')['bmi'].tolist()
    
    return smallest_bmis
",list of float64,"[15.7, 16.7, 16.7]","[15.7, 16.7, 16.7]"
What are the top 4 glucose levels of people who have heart diseases?,What are the highest glucose levels for individuals diagnosed with heart disease among the first four?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only individuals diagnosed with heart disease
    filtered_data = dataset[dataset['heart_disease'] == 1]
    
    # Sort the data by glucose levels in descending order and take the first four entries
    top_four = filtered_data.nlargest(4, 'avg_glucose_level')
    
    # Extract the 'avg_glucose_level' values from these top four entries
    answer = list(top_four['avg_glucose_level'])
    
    return answer
",list of float64,"[271.74, 254.63, 254.6, 252.72]","[271.74, 254.63, 254.6, 252.72]"
What are the 6 highest ages of people who have never married?,"What are the ages of individuals who have never married, sorted in descending order, and what are the top 6 highest among them?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter individuals who have never married
    never_married = dataset[dataset['ever_married'] == 'No']
    
    # Sort the ages in descending order
    sorted_ages = never_married.sort_values(by='age', ascending=False)['age']
    
    # Get the top 6 highest ages
    top_6_ages = sorted_ages.head(6).tolist()
    
    return top_6_ages
",list of float64,"[82.0, 82.0, 82.0, 82.0, 82.0, 82.0]","[82.0, 82.0, 82.0, 82.0, 82.0, 82.0]"
Are there any reflections with more than 10 sentences?,Do any reflections contain more than 10 sentences?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    contains_more_than_10_sentences = any(dataset[""num_sentence""] > 10)
    
    return contains_more_than_10_sentences
",bool,TRUE,TRUE
Is there a reflection from 'USA' with over 5 sentences?,Does the dataset contain any reflection from individuals in the USA who have written more than five sentences?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to find individuals in the USA who have written more than five sentences
    filtered_data = dataset[(dataset['country'] == 'USA') & (dataset['num_sentence'] > 5)]
    
    # Check if there is any such individual
    contains_reflection = not filtered_data.empty

    return contains_reflection
",bool,TRUE,TRUE
Are there any reflections categorized as 'affection'?,Were there any reflections categorized as 'affection'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    reflection_affection = dataset.loc[dataset[""reflection_period""] == ""affection""]
    
    return not reflection_affection.empty
",bool,FALSE,TRUE
Are there any married individuals who reflected on 'exercise'?,Do any married individuals have their reflection period set to 'exercise'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    result = dataset[(dataset['marital'] == 'married') & (dataset['reflection_period'] == 'exercise')]
    return not result.empty
",bool,FALSE,TRUE
How many unique reflection periods are there?,,,,ERROR,2
"On average, how many sentences are there in the reflections?",What is the average number of sentences found in the reflections?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    average_num_sentences = dataset[""num_sentence""].mean()

    return average_num_sentences
",float64,1.340766897,1.340766897
What's the highest age of an individual in the dataset?,What is the maximum age recorded for an individual in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_age = dataset[""age""].max()
    
    return max_age
",float64,233,233
How many reflections are from 'IND'?,,,,ERROR,16729
Which country has the highest average number of sentences in their reflections?,"In which country are the reflections, on average, composed of the highest number of sentences?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the average number of sentences per reflection for each country
    avg_sentences_per_country = dataset.groupby('country')['num_sentence'].mean()
    
    # Find the country with the highest average number of sentences
    max_avg_country = avg_sentences_per_country.idxmax()
    
    return max_avg_country
",string,UKR,UKR
Which gender has the most reflections categorized as 'affection'?,What is the gender with the highest count of reflections categorized as 'affection'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for reflections categorized as 'affection'
    affection_reflections = dataset[dataset['ground_truth_category'] == 'affection']
    
    # Count the occurrences of each gender in these reflections
    gender_counts = affection_reflections['gender'].value_counts()
    
    # Get the gender with the highest count
    most_common_gender = gender_counts.idxmax()
    
    return most_common_gender
",category,m,f
From which country is the oldest individual who reflected?,,,,ERROR,USA
Which marital status has the most reflections on 'bonding'?,What is the marital status that appears most frequently in reflections on 'bonding'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for reflections on 'bonding'
    bonding_reflections = dataset[dataset['reflection_period'] == 'bonding']
    
    # Group by marital status and count occurrences
    marital_counts = bonding_reflections.groupby('marital').size()
    
    # Get the marital status with the maximum count
    most_common_marital = marital_counts.idxmax()
    
    return most_common_marital
",category,single,single
Which are the top 3 countries with the highest average number of sentences in their reflections?,What are the three countries with the highest average number of sentences in their reflections?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the mean number of sentences per reflection for each country
    mean_sentences_per_country = dataset.groupby('country')['num_sentence'].mean().reset_index()
    
    # Sort the countries based on their average number of sentences in descending order
    sorted_countries = mean_sentences_per_country.sort_values(by='num_sentence', ascending=False)
    
    # Select the top 3 countries
    top_3_countries = sorted_countries.head(3)['country'].tolist()
    
    return top_3_countries
",list of (string),"['UKR', 'CRI', 'HKG']","['UKR', 'CRI', 'HKG']"
List the 4 most common predicted categories in the dataset.,,,,ERROR,"['affection', 'achievement', 'enjoy_the_moment', 'bonding']"
Which 5 countries have the youngest average age of reflectors?,What are the 5 countries with the lowest average age of reflectors?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the average age for each country
    avg_age_by_country = dataset.groupby('country')['age'].mean().reset_index()
    
    # Sort the countries by their average age in ascending order
    sorted_avg_age = avg_age_by_country.sort_values(by='age')
    
    # Get the top 5 countries with the lowest average age
    top_5_countries = sorted_avg_age.head(5)['country'].tolist()
    
    return top_5_countries
",list of string,"['KAZ', 'ALB', 'LKA', 'SLV', 'MAR']","['KAZ', 'ALB', 'LKA', 'MAR', 'SLV']"
List 2 genders with the most number of reflections.,Which two genders have the highest frequency of reflections?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    gender_counts = dataset['gender'].value_counts().head(2).index.tolist()
    return gender_counts
",list of (string),"['m', 'f']","['m', 'f']"
What are the lowest 4 number of sentences?,Which are the four smallest values in the num_sentence column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    sorted_values = dataset['num_sentence'].sort_values().head(4)
    answer = sorted_values.tolist()
    
    return answer
",list of int64,"[1, 1, 1, 1]","[1, 1, 1, 1]"
List the 3 highest ages in the dataset.,What are the top three highest ages present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_ages = dataset[""age""].unique()
    sorted_ages = sorted(unique_ages, reverse=True)
    top_three_ages = sorted_ages[:3]
    
    return top_three_ages
",list of float64,"[np.float64(79.0), np.float64(66.0), np.float64(64.0)]","[233.0, 233.0, 233.0]"
Which are the highest 5 number of sentences?,,,,ERROR,"[69, 60, 58, 56, 53, 51]"
List the age of the 6 youngest individuals in the dataset.,,,,ERROR,"[2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]"
Is it true that the youngest participant has met their match?,Has the participant with the lowest age value met someone?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the participant with the lowest age
    min_age_participant = dataset.loc[dataset[""age""].idxmin()]
    
    # Check if this participant has met someone
    has_met = min_age_participant[""met""]
    
    return has_met
",bool,0,FALSE
Do all people who got a match have the same race as their partner?,Are all individuals who found a match of the same race as their partner?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only rows where a match was found
    matched_individuals = dataset[dataset['match'] == 1]
    
    # Check if all individuals in the matched group have the same race as their partner's race
    all_same_race = (matched_individuals['race'] == matched_individuals['race_o']).all()
    
    return all_same_race
",bool,FALSE,FALSE
Are all participants who expected more than 5 matches male?,Are there only male participants who expected more than 5 matches?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only rows where decision_o is 1 (matched)
    matched_participants = dataset[dataset['decision_o'] == 1]
    
    # Check if all participants in these matched rows are male and have more than 5 expected matches
    is_male_and_more_than_five_matches = (matched_participants['gender'] == 'M') & (matched_participants['expected_num_matches'] > 5)
    
    # The result should be a boolean indicating whether all conditions are met
    return is_male_and_more_than_five_matches.all()
",bool,FALSE,TRUE
Is the average age of participants who got a match higher than those who didn't?,Is the mean age of individuals who have matched higher than those who haven't?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter data for those who have matched and those who haven't
    matched = dataset[dataset['match'] == 1]['age']
    not_matched = dataset[dataset['match'] == 0]['age']
    
    # Calculate the mean age for both groups
    mean_age_matched = matched.mean()
    mean_age_not_matched = not_matched.mean()
    
    # Compare the means and return boolean result
    is_higher = mean_age_matched > mean_age_not_matched
    
    return is_higher
",bool,FALSE,FALSE
How many participants had a match?,,,,ERROR,1380
What is the average age of participants who have the same race as their partner?,,,,ERROR,26.39023651
What is the highest number of matches expected by any participant in the dataset?,,,,ERROR,18
How many unique 'race' categories are there in the dataset?,,,,ERROR,5
What is the most common race among participants who got a match?,,,,ERROR,european/caucasian-american
What is the gender of the youngest participant in the dataset?,,,,ERROR,male
What is the race of the participant with the highest number of expected matches?,What is the race of the participant who has the highest expected number of matches?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the row with the maximum value in 'expected_num_matches'
    max_matches_row = dataset.loc[dataset['expected_num_matches'].idxmax()]
    
    # Return the race of that participant
    return max_matches_row['race']
",category,other,other
What is the wave of the participant with the youngest age?,,,,ERROR,5
What are the top 3 waves among people who got a match?,Which are the top 3 wave numbers for individuals who achieved a match?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only rows where 'match' is 1 (indicating a match)
    matched_individuals = dataset[dataset['match'] == 1]
    
    # Extract the unique wave numbers from the filtered dataset
    top_waves = matched_individuals['wave'].unique()
    
    # Sort the waves if needed and select the top 3
    sorted_unique_waves = sorted(top_waves)
    top_3_waves = sorted_unique_waves[:3]
    
    return top_3_waves
",list of uint8,"[np.uint8(1), np.uint8(2), np.uint8(3)]","[21, 4, 11]"
What are the 5 most common races among people who expected more than 5 matches?,Which are the top 5 most frequent races for individuals who expected more than 5 matches?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only individuals who expected more than 5 matches
    filtered_data = dataset[dataset['expected_num_matches'] > 5]
    
    # Group by race and count occurrences
    race_counts = filtered_data['race'].value_counts()
    
    # Get the top 5 most frequent races
    top_races = race_counts.head(5).index.tolist()
    
    return top_races
",list of string,"['european/caucasian-american', 'asian/pacific islander/asian-american', 'black/african american', 'latino/hispanic american', 'other']","['european/caucasian-american', 'asian/pacific islander/asian-american', 'black/african american', 'latino/hispanic american', 'other']"
What are the top 4 waves of people who have the same race as their partner?,,,,ERROR,"[15, 9, 21, 11]"
What are the top 2 genders among people who expected no match?,What are the two most frequent gender categories for individuals who expected no matches?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only those individuals who expected no matches
    filtered_data = db[db['expected_num_matches'] == 0]
    
    # Group by gender and count occurrences
    gender_counts = filtered_data['gender'].value_counts()
    
    # Get the two most frequent genders
    top_two_genders = gender_counts.head(2).index.tolist()
    
    return top_two_genders
",list of string,"['female', 'male']","['female', 'male']"
What are the top 5 ages of participants who got a match?,What are the five most frequent age values among participants who got a match?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only rows where 'match' is 1 (got a match)
    matched_participants = dataset[dataset['match'] == 1]
    
    # Group by 'age' and count the occurrences of each age value
    age_counts = matched_participants['age'].value_counts()
    
    # Get the index of the top five most frequent age values
    top_five_ages = age_counts.head(5).index.tolist()
    
    return top_five_ages
",list of float64,"[25.0, 27.0, 26.0, 23.0, 28.0]","[42.0, 42.0, 42.0, 42.0, 39.0]"
What are the 3 lowest numbers of matches expected by people who got a match?,What are the three smallest expected_num_matches values for individuals who have a match?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only individuals who have a match
    matched_individuals = dataset[dataset['match'] == 1]
    
    # Sort the filtered dataset by expected_num_matches in ascending order
    sorted_matches = matched_individuals.sort_values(by='expected_num_matches')
    
    # Extract the three smallest expected_num_matches values
    smallest_three_matches = sorted_matches['expected_num_matches'].head(3).tolist()
    
    return smallest_three_matches
",list of float64,"[0.0, 0.0, 0.0]","[0.0, 0.0, 0.0]"
What are the top 4 ages of people who have the same race as their partner?,,,,ERROR,"[55.0, 55.0, 55.0, 42.0]"
What are the 6 youngest ages of participants who expected no match?,"What are the ages of participants who expected no matches, sorted in ascending order, and retrieve the first six?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for those expecting no matches
    no_matches = dataset[dataset['expected_num_matches'] == 0]
    
    # Sort the ages in ascending order and get the first six
    sorted_ages = no_matches['age'].sort_values().head(6).tolist()
    
    return sorted_ages
",list of float64,"[18.0, 18.0, 18.0, 18.0, 18.0, 18.0]","[18.0, 18.0, 18.0, 18.0, 18.0, 18.0]"
Are there any tweets with more than 10 retweets?,,,,ERROR,TRUE
Is there a negative sentiment tweet from 'United' airline?,Does the dataset contain any tweet from 'United' airline that has a negative sentiment?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    result = dataset[(dataset['airline'] == 'United') & (dataset['airline_sentiment'] == 'negative')]
    return not result.empty
",bool,TRUE,TRUE
Are there any tweets categorized with 'Late Flight' as the negative reason?,,,,ERROR,TRUE
Are there any tweets from 'Eastern Time (US & Canada)' timezone with positive sentiment?,Are there any tweets with a positive sentiment that are from the 'Eastern Time (US & Canada)' timezone?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    positive_tweets = dataset[(dataset[""airline_sentiment""] == ""positive"") & 
                              (dataset[""user_timezone""] == ""Eastern Time (US & Canada)"")]
    
    return not positive_tweets.empty
",bool,TRUE,TRUE
How many unique user timezones are there in the dataset?,What is the count of distinct user timezones present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_timezones = dataset['user_timezone'].nunique()
    
    return unique_timezones
",int64,85,85
"On average, what is the sentiment confidence of the tweets?",,,,ERROR,0.900168852
What's the maximum number of retweets a tweet has received?,What is the highest retweet_count recorded in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_retweet_count = db[""retweet_count""].max()
    return max_retweet_count
",uint8,44,44
How many tweets are from 'Virgin America' airline?,What is the count of tweets made by 'Virgin America'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    count_of_tweets = dataset.loc[dataset[""airline""] == ""Virgin America""].shape[0]
    
    return count_of_tweets
",int64,504,504
Which airline has the highest average sentiment confidence?,What is the airline with the highest average sentiment confidence?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the average sentiment confidence for each airline
    avg_sentiment_confidence = dataset.groupby('airline')['airline_sentiment_confidence'].mean().reset_index()
    
    # Find the airline with the highest average sentiment confidence
    max_avg_sentiment_confidence = avg_sentiment_confidence.loc[avg_sentiment_confidence['airline_sentiment_confidence'] == avg_sentiment_confidence['airline_sentiment_confidence'].max()]
    
    # Return the airline name as a string
    return max_avg_sentiment_confidence['airline'].values[0]

",string,US Airways,US Airways
Which negative reason is most commonly associated with 'American' airline?,What is the most frequent negative reason associated with 'American' airline?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the 'American' airline
    american_tweets = db[db['airline'] == 'American']
    
    # Extract the negative reasons from the filtered dataset
    neg_reasons = american_tweets['negativereason'].dropna()
    
    # Get the most frequent negative reason
    most_frequent_neg_reason = neg_reasons.value_counts().idxmax()
    
    return most_frequent_neg_reason

",category,Customer Service Issue,Customer Service Issue
From which timezone is the tweet with the highest sentiment confidence?,In which timezone was the tweet with the highest sentiment confidence posted?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_sentiment_confidence_tweet = dataset.loc[dataset['airline_sentiment_confidence'] == dataset['airline_sentiment_confidence'].max()]
    timezone_of_max_tweet = max_sentiment_confidence_tweet['user_timezone'].values[0]

    return timezone_of_max_tweet
",string,Eastern Time (US & Canada),Eastern Time (US & Canada)
Which airline has the most tweets with negative sentiment?,What is the airline that has received the highest number of tweets with a negative sentiment?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataframe to only include rows with negative sentiment
    negative_tweets = db[db['airline_sentiment'] == 'negative']
    
    # Group by airline and count the number of tweets for each airline
    airline_tweet_counts = negative_tweets.groupby('airline').size()
    
    # Get the airline with the maximum number of tweets
    max_airline = airline_tweet_counts.idxmax()
    
    return max_airline
",string,United,United
Which are the top 3 airlines with the highest average sentiment confidence?,Can you provide the names of the top three airlines with the highest average sentiment confidence?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate the average sentiment confidence for each airline
    avg_sentiment_confidence = dataset.groupby('airline')['airline_sentiment_confidence'].mean().reset_index()
    
    # Sort the airlines by their average sentiment confidence in descending order
    sorted_airlines = avg_sentiment_confidence.sort_values(by='airline_sentiment_confidence', ascending=False)
    
    # Select the top three airline names
    top_three_airlines = sorted_airlines.head(3)['airline'].tolist()
    
    return top_three_airlines
",list of (str),"['US Airways', 'American', 'United']","['US Airways', 'American', 'United']"
List the 3 most common negative reasons in the dataset.,,,,ERROR,"['Customer Service Issue', 'Late Flight', 'Can't Tell']"
Which 3 user timezones have the most number of tweets?,What are the three user timezones that have generated the highest number of tweets?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by user_timezone and count the number of tweets
    tweet_counts = dataset.groupby('user_timezone')['tweet_id'].count()
    
    # Get the top 3 user timezones with the highest tweet counts
    top_timezones = tweet_counts.nlargest(3).index.tolist()
    
    return top_timezones
",list of string,"['Eastern Time (US & Canada)', 'Central Time (US & Canada)', 'Pacific Time (US & Canada)']","['Eastern Time (US & Canada)', 'Central Time (US & Canada)', 'Pacific Time (US & Canada)']"
List the 2 airlines with the least number of tweets in the dataset.,,,,ERROR,"['Virgin America', 'Delta']"
What are the top 4 tweet IDs with the lowest sentiment confidence?,Which are the four tweet IDs having the lowest sentiment confidence values?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns from the DataFrame
    df = db[['tweet_id', 'airline_sentiment_confidence']]
    
    # Sorting the dataframe based on sentiment confidence in ascending order to get the lowest values first
    sorted_df = df.sort_values(by='airline_sentiment_confidence')
    
    # Selecting the top 4 tweet IDs with the lowest sentiment confidence
    result = sorted_df.head(4)['tweet_id'].tolist()
    
    return result
",list of int64,"[569972097453137920, 568092537786748928, 568028183267639297, 568993773277069312]","[570306133677760513, 570301031407624196, 570300817074462722, 570300767074181121]"
List the 3 highest retweet counts in the dataset.,What are the top 3 retweet counts in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_retweets = dataset.nlargest(3, 'retweet_count')['retweet_count'].tolist()
    return top_retweets
",list of int64,"[44, 32, 31]","[44, 32, 31]"
What are the 2 lowest values for sentiment confidence?,What are the two smallest sentiment confidence values present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract sentiment confidence column
    sentiment_confidence = dataset['airline_sentiment_confidence']
    
    # Find the two smallest values in the sentiment confidence column
    two_smallest_values = sorted(sentiment_confidence.unique())[:2]
    
    return two_smallest_values
",list of float64,"[np.float64(0.335), np.float64(0.3353)]","[0.335, 0.335]"
List the 6 highest sentiment confidence values.,Retrieve the top 6 highest sentiment confidence scores from the dataset.,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    answer = db.nlargest(6, 'airline_sentiment_confidence')['airline_sentiment_confidence'].tolist()
    return answer
",list of float64,"[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]","[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]"
Is it true that the student with the highest number of absences is from a rural area?,Does the student who has the highest number of absences reside in a rural area?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the student with the highest number of absences
    student_with_most_absences = dataset.loc[dataset['absences'] == dataset['absences'].max()]
    
    # Check if this student resides in a rural area (address category 'R')
    is_rural_area = student_with_most_absences['address'].iloc[0] == 'R'
    
    return is_rural_area
",bool,TRUE,TRUE
Are all students who are in a romantic relationship older than 17?,Is it true that all students involved in a romantic relationship are older than 17 years?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only students who are in a romantic relationship
    romantic_students = dataset[dataset[""romantic""] == ""YES""]
    
    # Check if all these students are older than 17 years
    all_older_than_17 = romantic_students[""age""].apply(lambda age: age > 17).all()
    
    return all_older_than_17
",bool,TRUE,FALSE
Is the average final grade (G3) of students who consume a lot of alcohol (Dalc > 2) lower than those who don't?,,,,ERROR,TRUE
Do all students who have both parents at home (Pstatus = 'T') have more than 3 free time after school (freetime > 3)?,Are all students with both parents at home having a free time score greater than 3?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only students where both parents are at home
    filtered_dataset = dataset[(dataset['Pstatus'] == 'T') & (dataset['freetime'] > 3)]
    
    # Check if all such students exist in the dataset
    is_all_students = len(filtered_dataset) == dataset[dataset['Pstatus'] == 'T'].shape[0]
    
    return is_all_students
",bool,FALSE,FALSE
How many students have their mother's education (Medu) level above 3?,,,,ERROR,131
What is the average age of students who want to take higher education (higher = 'yes')?,,,,ERROR,16.63466667
What is the highest number of absences among students?,,,,ERROR,75
How many unique schools are there in the dataset?,,,,ERROR,2
What is the most common mother's job among students who want to take higher education?,Which is the most frequent job of mothers for students who intend to pursue higher education?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for students who intend to pursue higher education
    higher_ed_students = dataset[dataset['higher'] == 'yes']
    
    # Group by mother's job and count occurrences
    job_counts = higher_ed_students['Mjob'].value_counts()
    
    # Get the most frequent job
    most_frequent_job = job_counts.idxmax()
    
    return most_frequent_job
",category,other,other
What is the gender of the student with the highest final grade (G3)?,Which gender corresponds to the student having the highest G3 grade?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the student with the highest G3 grade
    top_student = dataset.loc[dataset['G3'].idxmax()]
    
    # Return the gender of this student
    return top_student['sex']
",category,M,M
What is the school of the student with the highest number of absences?,,,,ERROR,GP
What is the family size of the student with the highest final grade (G3)?,,,,ERROR,GT3
What are the top 3 reasons for choosing a school among students who want to take higher education?,,,,ERROR,"['course', 'home', 'reputation']"
What are the 5 most common mother's jobs among students with a final grade above 10?,Which are the five most frequent mother's jobs for students who have a final grade greater than 10?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only students with G3 > 10
    filtered_data = dataset[dataset['G3'] > 10]
    
    # Group by mother's job and count occurrences
    job_counts = filtered_data['Mjob'].value_counts()
    
    # Get the top five most frequent jobs
    top_five_jobs = job_counts.head(5).index.tolist()
    
    return top_five_jobs
",list of (category),"['other', 'services', 'teacher', 'health', 'at_home']","['other', 'services', 'teacher', 'health', 'at_home']"
What are the top 4 schools among students with absences above 10?,,,,ERROR,"['GP', 'MS']"
What are the top 2 family relations among students with a final grade below 10?,,,,ERROR,"[4, 5]"
What are the top 5 ages of students who want to take higher education?,,,,ERROR,"[16, 17, 15, 18, 19]"
What are the 3 lowest final grades of students who have more than 10 absences?,,,,ERROR,"[4, 14, 17]"
What are the top 4 ages of students whose mother's education level is above 3?,,,,ERROR,"[15, 16, 18, 17]"
What are the 6 lowest final grades of students who don't want to take higher education?,What are the lowest six final grades (G3) for students who have set their higher education goal to False?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for students with 'higher' set to False
    filtered_dataset = dataset[dataset['higher'] == 'F']
    
    # Extract the G3 grades from the filtered dataset
    g3_grades = filtered_dataset['G3'].values
    
    # Sort the G3 grades in ascending order and take the first six values
    lowest_six_g3 = sorted(g3_grades)[:6]
    
    return lowest_six_g3
",list of uint8,[],"[8, 10, 12, 9, 7, 13]"
Is it true that the oldest company (based on approval year) is from an urban (UrbanRural=1) area?,Does the company with the earliest approval year based on ApprovalFY belong to an urban area indicated by UrbanRural=1?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the row with the earliest ApprovalFY
    earliest_approval_row = dataset.loc[dataset['ApprovalFY'].idxmin()]
    
    # Check if the UrbanRural value for this company is 1 (indicating urban area)
    is_urban_area = earliest_approval_row['UrbanRural'] == 1
    
    return is_urban_area
",bool,FALSE,FALSE
Are all companies with more than 10 employees located in an urban (UrbanRural=1) area?,Is it true that every company having more than 10 employees is situated in an urban area?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include companies with more than 10 employees
    large_companies = dataset[dataset['NoEmp'] > 10]
    
    # Check if all these large companies are situated in an urban area
    is_urban = large_companies['UrbanRural'].all() == 1
    
    return is_urban
",bool,FALSE,FALSE
"Are all companies with a default amount greater than $250,000 in the food sector?","Is it true that all companies in the food sector have a default amount greater than $250,000?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only rows where the Sector is 'Food'
    food_sectors = dataset[dataset['Sector'] == 'Food']
    
    # Check if all companies in the Food sector have a default_amount greater than 250000
    all_greater_than_250000 = food_sectors['default_amount'].gt(250000).all()
    
    return all_greater_than_250000
",bool,TRUE,FALSE
Is the average number of retained jobs higher for companies located in urban (UrbanRural=1) areas than those in rural (UrbanRural=0) areas?,Is the mean value of RetainedJob higher for companies in urban areas compared to rural areas?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Calculate mean retained jobs for urban and rural areas
    urban_retained_jobs_mean = dataset[dataset['UrbanRural'] == 1]['RetainedJob'].mean()
    rural_retained_jobs_mean = dataset[dataset['UrbanRural'] == 2]['RetainedJob'].mean()
    
    # Compare the means and return boolean result
    is_higher_for_urban = urban_retained_jobs_mean > rural_retained_jobs_mean
    
    return is_higher_for_urban
",bool,TRUE,TRUE
How many companies have a franchise code of 1?,What is the count of companies that have a FranchiseCode of 1?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    franchise_code_count = dataset[dataset[""FranchiseCode""] == 1].shape[0]
    return franchise_code_count
",int64,57340,57340
What is the average disbursement gross for companies in the retail sector?,What is the mean value of DisbursementGross for companies operating in the retail sector?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include rows where the 'Sector' is 'Retail'
    retail_data = dataset[dataset['Sector'] == 'Retail']
    
    # Calculate the mean value of 'DisbursementGross' for the filtered data
    mean_disbursement_gross = retail_data['DisbursementGross'].mean()
    
    return mean_disbursement_gross
",float64,,164636.4123
What is the highest approval year in the dataset?,What is the latest fiscal year in which any loan was approved according to the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the unique values from the 'ApprovalFY' column
    unique_fiscal_years = dataset['ApprovalFY'].unique()
    
    # Find the maximum fiscal year
    latest_fiscal_year = max(unique_fiscal_years)
    
    return latest_fiscal_year
",uint16,2010,2010
How many unique sectors are there in the dataset?,What is the total number of distinct sectors present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_sectors = dataset['Sector'].nunique()
    
    return unique_sectors
",int64,20,20
What is the most common sector among companies with a franchise code of 1?,Which is the most frequent Sector for companies having a FranchiseCode of 1?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include rows with FranchiseCode of 1
    filtered_data = dataset[dataset['FranchiseCode'] == 1]
    
    # Find the most frequent Sector in the filtered data
    most_frequent_sector = filtered_data['Sector'].mode().iloc[0]

    return most_frequent_sector
",category,Retail trade,Retail trade
What is the state of the company with the highest disbursement gross?,In which state is the company with the highest disbursement gross located?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_disbursement_gross_company = dataset.loc[dataset[""DisbursementGross""] == dataset[""DisbursementGross""].max()]
    state_of_max_disbursement = max_disbursement_gross_company[""BankState""].values[0]

    return state_of_max_disbursement
",string,ME,ME
What is the bank for the company with the highest default amount?,,,,ERROR,COMMUNITY BANK & TRUST
What is the sector of the company with the most number of employees?,Which sector employs the largest number of employees according to the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting relevant columns from the DataFrame
    sectors = db['Sector']
    
    # Group by Sector and count the number of employees in each sector
    sector_employee_count = db.groupby('Sector')['NoEmp'].sum()
    
    # Find the sector with the maximum number of employees
    largest_sector = sector_employee_count.idxmax()
    
    return largest_sector
",string,Manufacturing,Health care and social assistance
What are the top 3 sectors among companies with a franchise code of 1?,Which are the three most common sectors for companies having a franchise code of 1?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include rows with FranchiseCode equal to 1
    filtered_dataset = dataset[dataset['FranchiseCode'] == 1]
    
    # Group by Sector and count the occurrences of each sector
    sector_counts = filtered_dataset['Sector'].value_counts()
    
    # Get the top three sectors
    top_three_sectors = sector_counts.head(3).index.tolist()
    
    return top_three_sectors

",list of string,"['Retail trade', 'Other services (except public administration)', 'Manufacturing']","['Retail trade', 'Other services (except public administration)', 'Manufacturing']"
What are the 5 most common banks among companies with an approval year earlier than 2000?,,,,ERROR,"['WELLS FARGO BANK NATL ASSOC', 'BANK OF AMERICA NATL ASSOC', 'U.S. BANK NATIONAL ASSOCIATION', 'JPMORGAN CHASE BANK NATL ASSOC', 'PNC BANK, NATIONAL ASSOCIATION']"
"What are the top 4 states among companies with a disbursement gross greater than $1,000,000?","Which are the top 4 states with companies having a disbursement gross exceeding $1,000,000?","def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter rows where DisbursementGross exceeds 1,000,000
    filtered_df = db[db['DisbursementGross'] > 1000000]
    
    # Group by State and sum the DisbursementGross for each state
    state_disbursement_sum = filtered_df.groupby('State')['DisbursementGross'].sum().reset_index()
    
    # Sort the states based on the summed disbursement gross in descending order
    sorted_states = state_disbursement_sum.sort_values(by='DisbursementGross', ascending=False)
    
    # Get the top 4 states
    top_4_states = sorted_states.head(4)['State'].tolist()
    
    return top_4_states
",list of string,"['CA', 'TX', 'FL', 'AZ']","['CA', 'TX', 'FL', 'AZ']"
"What are the top 2 sectors among companies with a default amount greater than $500,000?",Which are the two sectors with the highest default amounts exceeding 500000?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter rows where default_amount exceeds 500000
    filtered_data = dataset[dataset['default_amount'] > 500000]
    
    # Group by Sector and sum the default_amounts, then sort in descending order
    sector_default_sum = filtered_data.groupby('Sector')['default_amount'].sum().reset_index()
    sorted_sector_default_sum = sector_default_sum.sort_values(by='default_amount', ascending=False)
    
    # Get the top two sectors
    top_two_sectors = sorted_sector_default_sum.head(2)['Sector'].tolist()
    
    return top_two_sectors
",list of string,"['Retail trade', 'Accommodation and food services']","['Retail trade', 'Accommodation and food services']"
What are the top 5 approval years for companies in the retail sector?,Which are the five years with the highest approval amounts for companies in the retail sector?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter data for the retail sector
    retail_data = dataset[dataset['Sector'] == 'Retail']
    
    # Group by ApprovalFY and sum GrAppv within each group
    grouped_approval = retail_data.groupby('ApprovalFY')['GrAppv'].sum().reset_index()
    
    # Find the top 5 years with the highest approval amounts
    top_5_years = grouped_approval.nlargest(5, 'GrAppv')['ApprovalFY'].tolist()
    
    return top_5_years
",list of int64,[],"[2005, 2004, 2006, 2007, 2003]"
What are the 3 highest disbursement gross for companies with a franchise code of 1?,What are the top three highest DisbursementGross values for companies that have a FranchiseCode of 1?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only rows where FranchiseCode is 1
    filtered_data = dataset[dataset['FranchiseCode'] == 1]
    
    # Sort the filtered data by DisbursementGross in descending order
    sorted_data = filtered_data.sort_values(by='DisbursementGross', ascending=False)
    
    # Extract the top three DisbursementGross values
    top_three_values = sorted_data['DisbursementGross'].head(3).tolist()
    
    return top_three_values
",list of uint32,"[5294366, 4656672, 4000048]","[50000.0, 100000.0, 10000.0]"
What are the top 4 approval years for companies in the state of CA?,Which are the four most recent years in which companies in CA received approval?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter data for companies in CA
    ca_companies = dataset[(dataset['State'] == 'CA') & (dataset['UrbanRural'] != 3)]
    
    # Extract the years from ApprovalFY column
    approval_years = ca_companies['ApprovalFY'].unique()
    
    # Sort the unique years and get the four most recent ones
    recent_years = sorted(approval_years, reverse=True)[:4]
    
    return recent_years
",list of uint16,"[np.uint16(2010), np.uint16(2009), np.uint16(2008), np.uint16(2007)]","[2007, 2004, 2006, 2003]"
What are the 6 highest default amounts among companies in the state of NY?,Retrieve the top six highest default amounts for companies located in the state of NY.,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only rows where 'State' is 'NY'
    ny_data = db[db['State'] == 'NY']
    
    # Sort the data by 'default_amount' in descending order and get the top six
    top_six_defaults = ny_data.nlargest(6, 'default_amount')['default_amount'].tolist()
    
    return top_six_defaults
",list of int64,"[1112786, 933368, 832460, 812400, 791676, 702780]","[0.0, 50000.0, 25000.0, 100000.0, 35000.0, 10000.0]"
Is it true that the oldest movie (based on year) in the drama genre is from the USA?,Does the movie with the earliest year in the drama genre that is from the USA indeed have the oldest release date?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataframe for movies in the 'drama' genre and from the USA
    drama_usa_movies = db[(db['genre'] == 'Drama') & (db['country'] == 'USA')]
    
    if drama_usa_movies.empty:
        return False
    
    # Find the movie with the earliest year
    earliest_year_movie = drama_usa_movies.loc[drama_usa_movies['year'].idxmin()]
    
    # Check if this is indeed the movie with the oldest release date
    is_earliest_release_date = (earliest_year_movie['date_published'] == min(drama_usa_movies['date_published']))
    
    return is_earliest_release_date
",bool,FALSE,FALSE
"Are all movies from the USA, with more than 80 minutes duration in the drama genre, in English?",Is it true that every drama movie from the USA and with a duration greater than 80 minutes is in English?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for drama movies from the USA with duration > 80 minutes
    filtered_movies = dataset[(dataset['genre'] == 'Drama') & 
                             (dataset['country'] == 'USA') & 
                             (dataset['duration'] > 80)]
    
    # Check if all these movies are in English
    is_all_in_english = filtered_movies['language'].apply(lambda x: 'English' in x.split(',')).all()
    
    return is_all_in_english
",bool,FALSE,FALSE
Are all movies with votes greater than 90 from the USA in English?,Is it true that all movies with more than 90 votes and produced in the USA are available in English?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only movies with more than 90 votes and produced in the USA
    filtered_movies = db[(db['votes'] > 90) & (db['country'] == 'USA')]
    
    # Check if all of these filtered movies have their language set to English
    is_all_in_english = filtered_movies['language'].eq('English').all()
    
    return is_all_in_english
",bool,FALSE,TRUE
Is the average duration of English language movies from the USA longer than those from non-USA countries?,Is the mean duration of English language films produced in the USA greater than that of films produced in other countries?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    english_usa_films = dataset[(dataset['language'] == 'English') & (dataset['country'] == 'USA')]
    other_country_films = dataset[(dataset['language'] == 'English') & (dataset['country'] != 'USA')]
    
    mean_duration_usa = english_usa_films['duration'].mean()
    mean_duration_other_countries = other_country_films['duration'].mean()
    
    return mean_duration_usa > mean_duration_other_countries
",bool,FALSE,FALSE
"How many movies from the USA, in the drama genre, have a metascore of 100?",,,,ERROR,6
"What is the average duration for movies in the drama genre, from the USA, in English?",What is the average duration of movies categorized as drama that are produced in the USA and have their language set to English?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for movies categorized as drama, produced in the USA, and with language set to English
    filtered_movies = db[(db['genre'] == 'Drama') & (db['country'] == 'USA') & (db['language'] == 'English')]
    
    # Calculate the average duration of these filtered movies
    average_duration = filtered_movies['duration'].mean()
    
    return average_duration
",float64,94.53737907,96.07926963
What is the latest year for English language movies from the USA in the dataset?,,,,ERROR,2020
How many unique languages are there in the dataset for movies from the USA?,How many distinct languages are represented in the movie dataset that are produced in the USA?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter movies produced in the USA
    usa_movies = dataset[dataset['country'] == 'USA']
    
    # Get distinct languages used in these movies
    distinct_languages = usa_movies['language'].unique()
    
    # Return the number of distinct languages as an integer
    return len(distinct_languages)
",int64,651,650
What is the most common genre among English language movies from the USA with a metascore of 100?,Which is the most frequent genre for English movies produced in the USA that have a metascore of 100?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only English movies produced in the USA with a metascore of 100
    filtered_data = dataset[(dataset['language'] == 'English') & 
                            (dataset['country'] == 'USA') & 
                            (dataset['metascore'] == 100)]
    
    # Find the most frequent genre in the filtered data
    if not filtered_data.empty:
        most_frequent_genre = filtered_data['genre'].mode().iloc[0]
    else:
        most_frequent_genre = None
    
    return most_frequent_genre
",category,"Adventure, Family, Fantasy","Adventure, Family, Fantasy"
What is the country of the English language movie with the longest duration?,,,,ERROR,Argentina
What is the language of the movie from the USA with the highest metascore?,,,,ERROR,English
What is the genre of the English language movie from the USA with the most votes?,Which genre does the movie with the highest number of votes have that is both an English language film from the USA?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for movies that are in English and from the USA
    filtered_movies = dataset[(dataset['language'] == 'English') & (dataset['country'] == 'USA')]
    
    # Get the movie with the highest number of votes
    max_votes_movie = filtered_movies.loc[filtered_movies['votes'].idxmax()]
    
    # Return the genre of that movie
    return max_votes_movie['genre']
",category,Drama,Drama
What are the top 3 genres among English language movies from the USA with a metascore of 100?,Which are the three most common genres for English language movies produced in the USA that have a perfect metascore of 100?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for English language, USA production, and perfect metascore
    filtered_data = dataset[(dataset['language'] == 'English') & 
                            (dataset['country'] == 'USA') & 
                            (dataset['metascore'] == 100)]
    
    # Group by genre and count the occurrences
    genre_counts = filtered_data['genre'].str.split(',').explode().value_counts()
    
    # Get the top three genres
    top_genres = genre_counts.head(3).index.tolist()
    
    return top_genres

",list of (string),"['Mystery', ' Thriller', 'Adventure']","['Adventure, Family, Fantasy', 'Drama, Mystery', 'Drama, Romance, War']"
What are the 5 most common countries among English language movies with a year earlier than 2000?,Which are the top 5 countries with the highest number of English language movies released before the year 2000?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for movies released before the year 2000 in English language
    filtered_movies = dataset[(dataset['year'] < 2000) & (dataset['language'] == 'English')]
    
    # Group by country and count the number of movies from each country
    country_movie_counts = filtered_movies.groupby('country').size().reset_index(name='counts')
    
    # Sort the countries based on the number of movies in descending order
    sorted_countries = country_movie_counts.sort_values(by='counts', ascending=False)
    
    # Select top 5 countries
    top_5_countries = sorted_countries.head(5)['country'].tolist()
    
    return top_5_countries
",list of string,"['USA', 'UK', 'Canada', 'UK, USA', 'Australia']","['USA', 'UK', 'Canada', 'UK, USA', 'Australia']"
What are the top 4 languages among movies from the USA with a duration greater than 180 minutes?,Which are the top 4 languages used in movies produced in the USA that have a duration exceeding 180 minutes?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter datasets for movies produced in the USA with duration > 180 minutes
    filtered_movies = dataset[(dataset['country'] == 'USA') & (dataset['duration'] > 180)]
    
    # Extract unique languages from these filtered movies
    unique_languages = filtered_movies['language'].str.split(',').explode().dropna().unique()
    
    # Sort the languages by frequency of appearance and select top 4
    top_languages = pd.value_counts(filtered_movies['language'].str.split(',').explode()).head(4).index.tolist()
    
    return top_languages
",list of string,"['English', ' German', ' Russian', ' French']","['English', 'English, Spanish', 'English, Russian', 'English, Hungarian']"
What are the top 2 genres among English language movies from the USA with a metascore greater than 90?,,,,ERROR,"['Drama', 'Crime, Drama']"
What are the top 5 years for English language movies from the USA in the drama genre?,Which are the five years with the highest number of drama genre movies from the USA that are in English?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for drama genre, USA country, and English language
    filtered_data = dataset[(dataset['genre'] == 'Drama') & 
                            (dataset['country'] == 'USA') & 
                            (dataset['language'] == 'English')]
    
    # Group by year and count the number of movies in each year
    yearly_counts = filtered_data.groupby('year').size().reset_index(name='counts')
    
    # Sort the yearly counts in descending order and select top 5 years
    top_years = yearly_counts.nlargest(5, 'counts')['year'].tolist()
    
    return top_years
",list of int64,"[2018.0, 2013.0, 2012.0, 2017.0, 2010.0]","[2017.0, 2016.0, 2015.0, 2013.0, 2018.0]"
What are the 3 longest durations for English language movies from the USA with a metascore of 100?,,,,ERROR,"[102, 119, 112]"
What are the four years with more English language movies from the USA?,In which years did the USA produce at least four English language movies?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for English language movies produced in the USA
    usa_english_movies = dataset[(dataset['country'] == 'USA') & (dataset['language'] == 'English')]
    
    # Extract the unique years when these movies were produced
    unique_years = usa_english_movies['year'].dropna().unique()
    
    # Filter those years which have at least four distinct entries
    filtered_years = list(usa_english_movies['year'].value_counts()[lambda x: x >= 4].index)
    
    return filtered_years
",list of int64,"[2017.0, 2016.0, 2018.0, 2015.0, 2013.0, 2014.0, 2012.0, 2011.0, 2019.0, 2009.0, 2010.0, 2006.0, 2007.0, 2008.0, 2005.0, 1999.0, 1998.0, 1997.0, 2001.0, 2002.0, 2000.0, 1996.0, 2004.0, 1995.0, 2003.0, 1988.0, 1987.0, 1989.0, 1994.0, 1991.0, 1993.0, 1990.0, 1941.0, 2020.0, 1992.0, 1940.0, 1942.0, 1939.0, 1952.0, 1951.0, 1986.0, 1953.0, 1936.0, 1934.0, 1938.0, 1937.0, 1956.0, 1935.0, 1950.0, 1949.0, 1944.0, 1948.0, 1955.0, 1957.0, 1947.0, 1984.0, 1946.0, 1933.0, 1932.0, 1945.0, 1958.0, 1985.0, 1943.0, 1973.0, 1954.0, 1982.0, 1971.0, 1970.0, 1959.0, 1976.0, 1980.0, 1931.0, 1974.0, 1972.0, 1979.0, 1983.0, 1977.0, 1969.0, 1978.0, 1968.0, 1981.0, 1967.0, 1930.0, 1964.0, 1975.0, 1965.0, 1961.0, 1962.0, 1960.0, 1966.0, 1929.0, 1963.0, 1926.0, 1927.0, 1928.0, 1925.0, 1919.0, 1924.0, 1916.0, 1923.0, 1920.0, 1921.0, 1922.0, 1918.0, 1914.0, 1915.0, 1917.0]","[2017.0, 2016.0, 2018.0, 2013.0]"
Can you show the 6 highest metascores among English language movies from the USA?,Which are the six movies with the highest metascores that are English language films produced in the USA?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter for English language films produced in the USA
    usa_english_movies = dataset[(dataset['language'] == 'English') & (dataset['country'] == 'USA')]
    
    # Sort by metascore in descending order and select top 6
    top_six_metascore_movies = usa_english_movies.sort_values(by='metascore', ascending=False).head(6)
    
    # Extract the 'title' column values as a list of strings
    result = top_six_metascore_movies['title'].tolist()
    
    return result
",list of float64,"['La finestra sul cortile', 'Piombo rovente', 'La donna che visse due volte', 'Il mago di Oz', 'Intolerance', 'Moonlight']","[49.0, 55.0, 57.0, 48.0, 54.0, 52.0]"
Is it true that the song with the lowest popularity in the dataset is longer than 300000 ms?,Is there a song in the dataset that has both the lowest popularity and a duration greater than 300000 milliseconds?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter songs with duration greater than 300000 milliseconds
    filtered_songs = db[db['duration_ms'] > 300000]
    
    # Check if there is a song in the filtered set that has the lowest popularity
    answer = filtered_songs['popularity'].eq(filtered_songs['popularity'].min()).any()
    
    return answer
",bool,TRUE,TRUE
Did any song released in the year 2020 in the dataset achieve the maximum popularity?,Were there any songs released in 2020 that achieved the highest popularity score?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter songs released in 2020
    songs_2020 = dataset[dataset['release_year'] == 2020]
    
    # Check if any of these songs achieved the highest popularity score
    max_popularity_score = songs_2020['popularity'].max()
    has_max_popularity = songs_2020['popularity'].eq(max_popularity_score).any()
    
    return has_max_popularity
",bool,TRUE,FALSE
Does the song with the longest duration also have the highest energy?,Is the song having the maximum duration_ms also characterized by the highest energy level?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_duration_song = dataset.loc[dataset[""duration_ms""] == dataset[""duration_ms""].max()]
    is_max_energy = max_duration_song[""energy""].equals(max_duration_song[""energy""].max())

    return is_max_energy
",bool,FALSE,FALSE
Does the song with the highest energy also have the highest popularity?,,,,ERROR,FALSE
How many unique artists are there in the dataset?,What is the total count of distinct artists present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_artists = dataset['artists'].str.split(',').explode().unique()
    total_count_distinct_artists = len(unique_artists)
    
    return total_count_distinct_artists
",int64,1,13056
What's the average song duration in the dataset?,What is the mean duration of songs in milliseconds?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    mean_duration = dataset['duration_ms'].mean()
    
    return mean_duration
",float64,228986.6932,228998.0798
What's the maximum popularity score in the dataset?,What is the highest popularity score present in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_popularity = db[""popularity""].max()
    return max_popularity
",uint8,94,94
How many songs were released in the year with the most releases?,,,,ERROR,489
Who is the artist with the highest popularity score?,Which artist has the highest popularity score?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting relevant columns from the database
    artists = db[['name', 'popularity']]
    
    # Finding the artist with the highest popularity score
    max_popularity_artist = artists.loc[artists['popularity'] == artists['popularity'].max()]
    
    # Return the name of the artist with the highest popularity score
    return max_popularity_artist['name'].iloc[0]
",string,Heartbreak Anniversary,['Giveon']
In which month was the most popular song released?,During which month was the song with the highest popularity released?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_popularity_song = dataset.loc[dataset[""popularity""] == dataset[""popularity""].max()]
    release_month = max_popularity_song[""release_month""].iloc[0]
    
    return str(int(release_month))
",string,3,3
What's the name of the longest song?,Which is the song with the maximum duration in milliseconds?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    song_with_max_duration = db.loc[db[""duration_ms""] == db[""duration_ms""].max()]
    song_name = song_with_max_duration[""name""].values[0]
    
    return song_name
",string,Monster Tunes Yearmix 2011 - Mixed by Mark Eteson,Monster Tunes Yearmix 2011 - Mixed by Mark Eteson
What's the name of the song with the most energy?,,,,ERROR,Marathon (Mix Cut) - Simon O'Shine Mix
What are the the 2 shortest songs in the dataset?,Which are the two songs with the shortest duration in milliseconds?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by duration_ms in ascending order to find the shortest durations
    sorted_songs = dataset.sort_values(by='duration_ms')
    
    # Get the top two songs with the shortest duration
    top_two_shortest_songs = sorted_songs.head(2)
    
    # Extract their ids
    song_ids = list(top_two_shortest_songs['id'])
    
    return song_ids
",list of int64,"[24446, 6974]","['Rhapsody on a Theme of Paganini, Op. 43: Introduction - Allegro vivace', 'Intro']"
What are the names of the top 3 most popular songs?,,,,ERROR,"[Heartbreak Anniversary, Good Days, Paradise (feat. Dermot Kennedy)]"
What are the top 3 artists who released songs with the longest durations?,,,,ERROR,"['Mark Eteson', 'Various Artists', 'Serge Reggiani']"
What are the names of the top 2 songs with the most energy?,Which are the names of the two songs with the highest energy values?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_two_energy_songs = dataset.nlargest(2, 'energy')
    song_names = top_two_energy_songs['name'].tolist()
    
    return song_names
",list of strings,"[""Marathon (Mix Cut) - Simon O'Shine Mix"", 'Applause; Martha Tilton Returns to Stage - Live']","[Marathon (Mix Cut) - Simon O'Shine Mix, Applause; Martha Tilton Returns to Stage - Live]"
What are the top 5 most popular scores?,,,,ERROR,"[0, 35, 23, 1, 26]"
What are the 3 longest song durations?,What are the durations of the top three longest songs?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by duration_ms in descending order to get the longest songs first
    sorted_songs = dataset.sort_values(by='duration_ms', ascending=False)
    
    # Extract the top three durations
    top_three_durations = sorted_songs['duration_ms'].head(3).tolist()
    
    return top_three_durations
",list of float64,"[4792587.0, 4658245.0, 4585640.0]","[4792587.0, 4658245.0, 4585640.0]"
What are the 4 latest release years in the dataset?,Which are the most recent four years of release in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_years = dataset['release_year'].unique()
    sorted_unique_years = sorted(unique_years, reverse=True)
    most_recent_four_years = sorted_unique_years[:4]
    
    return most_recent_four_years
",list of int64,"[np.uint16(2021), np.uint16(2020), np.uint16(2019), np.uint16(2018)]","[2021, 2021, 2021, 2021]"
What are the top 3 energy scores in the dataset?,Which are the three songs with the highest energy scores in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_three_energy_songs = dataset.nlargest(3, 'energy')['name'].tolist()
    return top_three_energy_songs
",list of float64,"[""Marathon (Mix Cut) - Simon O'Shine Mix"", 'Applause; Martha Tilton Returns to Stage - Live', 'Oct Launcher 8']","[1.0, 1.0, 1.0]"
Is it true that the athlete with the lowest ID is older than 30 years?,Does the athlete having the smallest ID number exceed 30 years in age?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_id_athlete = dataset.loc[dataset[""ID""] == dataset[""ID""].min()]
    is_age_exceeding_30 = min_id_athlete[""Age""].iloc[0] > 30

    return is_age_exceeding_30
",bool,FALSE,TRUE
Did any athlete from the team with the most participants win two gold medals?,Were there any athletes on the team that had the maximum number of participants and who won two gold medals?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the team with the maximum number of participants
    max_participants_team = dataset.groupby('Team')['ID'].count().idxmax()
    
    # Filter athletes from that team who won two gold medals
    relevant_athletes = dataset[(dataset['Team'] == max_participants_team) & (dataset['Medal'] == 'Gold')].groupby('Name').filter(lambda x: len(x) >= 2)
    
    # Check if there are any such athletes
    has_two_gold_medals = not relevant_athletes.empty
    
    return has_two_gold_medals
",bool,TRUE,FALSE
Does the athlete with the highest weight also participate in the sport with the most athletes?,Is the athlete having the maximum weight also involved in the sport that has the highest number of athletes?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the sport with the highest number of athletes
    max_athletes_sport = dataset['Sport'].value_counts().idxmax()
    
    # Find the athlete with the maximum weight
    max_weight_athlete = dataset.loc[dataset['Weight'].idxmax()]
    
    # Check if the athlete with the maximum weight is involved in the sport with the highest number of athletes
    is_involved = (max_weight_athlete['Sport'] == max_athletes_sport)
    
    return is_involved

",bool,FALSE,FALSE
Does the athlete with the highest height also have a medal?,Is there an athlete who holds the highest height and has also won a medal?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the maximum height in the dataset
    max_height = dataset['Height'].max()
    
    # Filter the dataset to only include rows where Height is equal to the maximum height
    tallest_athletes = dataset[dataset['Height'] == max_height]
    
    # Check if any of these tallest athletes have won a medal
    has_medal = tallest_athletes['Medal'].notna().any()
    
    return has_medal
",bool,FALSE,FALSE
How many unique teams are there in the dataset?,What is the total number of distinct teams present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    num_distinct_teams = dataset['Team'].nunique()
    
    return num_distinct_teams
",int64,1184,230
What's the average age of athletes in the dataset?,What is the mean age of the athletes in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    answer = db[""Age""].mean()
    return answer
",float64,25.55689836,25.55689836
What's the maximum weight of athletes in the dataset?,What is the highest weight recorded among the athletes in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_weight = dataset[""Weight""].max()
    return max_weight
",float64,214,214
How many athletes participated in the year with the most participants?,In which year had the highest number of athletes participate and how many were there?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract 'Year' and 'ID' columns from the DataFrame
    df = db[['Year', 'ID']]
    
    # Group by 'Year' and count the number of 'ID's for each year
    year_counts = df.groupby('Year').ID.count()
    
    # Find the year with the maximum participation
    max_participation_year = year_counts.idxmax()
    max_participants = year_counts.max()
    
    return max_participants
",int64,16413,2536
Who is the athlete with the highest weight?,Which athlete has the highest weight?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_weight_athlete = dataset.loc[dataset[""Weight""].idxmax()][""Name""]
    return max_weight_athlete
",string,"Ricardo Blas, Jr.",Ricardo Blas Jr.
In which city did the athlete with the highest height participate?,Which city hosted the athlete with the greatest height?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_height_individual = dataset.loc[dataset[""Height""] == dataset[""Height""].max()]
    hosting_city = max_height_individual[""City""].iloc[0]
    
    return hosting_city
",string,Sydney,London
What's the name of the athlete who participated in the most number of games?,Which athlete participated in the highest number of games?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find unique athletes and the count of their participation in different games
    athlete_game_count = dataset.groupby('Name')['Games'].count()
    
    # Get the name of the athlete who participated in the highest number of games
    max_participation_athlete = athlete_game_count.idxmax()
    
    return max_participation_athlete
",string,Robert Tait McKenzie,Robert Tait McKenzie
What's the sport of the athlete with the most medals?,Which sport does the athlete with the highest number of medals belong to?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataframe to get the row with the maximum medal count
    max_medal_athlete = db.loc[db['Medal'] == 'Gold'].sort_values(by='Medal', ascending=False).head(1)
    
    # Return the sport of the athlete with the highest number of medals
    sport_of_max_medal = max_medal_athlete['Sport'].iloc[0]

    return sport_of_max_medal
",category,Tug-Of-War,Art Competitions
What are the top 5 most common team names in the dataset?,Which are the five most frequent team names appearing in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Team' column from the dataset
    teams = dataset['Team']
    
    # Get the value counts of the 'Team' column to find frequency
    team_counts = teams.value_counts().head(5)
    
    # Convert the index (team names) and values (counts) to a list of strings
    most_frequent_teams = list(team_counts.index.astype(str))
    
    return most_frequent_teams
",list of string,"['United States', 'France', 'Great Britain', 'Italy', 'Germany']","[United States, France, Great Britain, Italy, Germany]"
What are the names of the top 3 athletes with the highest weights?,Which are the names of the top 3 athletes with the highest weights?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns from the DataFrame
    athletes = db[['Name', 'Weight']]
    
    # Sorting the athletes by weight in descending order and selecting the top 3
    top_athletes = athletes.sort_values(by='Weight', ascending=False).head(3)
    
    # Extracting just the names of these top 3 athletes
    top_names = top_athletes['Name'].tolist()
    
    return top_names
",list of string,"['Ricardo Blas, Jr.', 'Ricardo Blas, Jr.', 'Aytami Ruano Vega']","[Ricardo Blas Jr., Shinichi Shinohara, Emmanuel Yarborough]"
What are the 4 most common cities of participation?,Which are the top 4 most frequent cities where participants took part in the event?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'City' column from the dataset
    city_column = dataset['City']
    
    # Get the value counts of the cities and sort them in descending order
    city_value_counts = city_column.value_counts().head(4)
    
    # Convert the index (cities) to a list
    top_cities = list(city_value_counts.index)
    
    return top_cities
",list of string,"['London', 'Athina', 'Sydney', 'Atlanta']","[London, Athina, Sydney, Atlanta]"
What are the names of the top 2 athletes who participated in the most number of games?,Which are the names of the two athletes who participated in the highest number of games?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by Name and count the unique Games
    name_game_counts = dataset.groupby('Name')['Games'].nunique().reset_index()
    
    # Sort by the count of games in descending order
    name_game_counts_sorted = name_game_counts.sort_values(by='Games', ascending=False)
    
    # Get the top two names with the highest number of unique games
    top_two_names = name_game_counts_sorted['Name'].head(2).tolist()
    
    return top_two_names
",list of string,"['Ian Millar', 'Hubert Raudaschl']","[Robert Tait McKenzie, Heikki Ilmari Savolainen]"
What are the top five most common ages of athletes?,,,,ERROR,"[23.0, 24.0, 22.0, 25.0, 21.0]"
What are the three highest weights of athletes?,What are the weights of the top three heaviest athletes?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the relevant columns from the DataFrame
    athletes = db[['Weight', 'Name']]
    
    # Sorting the athletes by weight in descending order and selecting the top three
    top_three_heaviest = athletes.sort_values(by='Weight', ascending=False).head(3)
    
    # Extracting the weights of these top three heaviest athletes
    weights_of_top_three = list(top_three_heaviest['Weight'])
    
    return weights_of_top_three
",list of float64,"[214.0, 214.0, 198.0]","[214.0, 198.0, 190.0]"
What are the 4 most common years of participation?,Which are the four most frequent years in which participants took part?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Year' column from the DataFrame
    years = db['Year']
    
    # Get the value counts of the 'Year' column
    year_counts = years.value_counts()
    
    # Sort the value counts in descending order and get the top 4 years
    most_frequent_years = year_counts.index[:4].tolist()
    
    return most_frequent_years
",list of int64,"[1992, 1988, 2000, 1996]","[1992, 1988, 2000, 1996]"
What are the three most common heights of athletes?,Which are the three most frequent height values recorded for athletes?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the three most frequent height values
    top_three_heights = dataset['Height'].value_counts().head(3).index.tolist()
    
    return top_three_heights
",list of float64,"[180.0, 170.0, 178.0]","[180.0, 170.0, 178.0]"
Does the dataset contain customers who are under the age of 18?,Are there any customers in the dataset who are under the age of 18?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    underage_customers = dataset.loc[dataset[""customer_age""] < 18]
    
    if not underage_customers.empty:
        return True
    else:
        return False
",bool,FALSE,FALSE
Are there any customers with a total transaction amount of zero?,Do any customers have a total transaction amount that sums to zero?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    total_transaction_amount = dataset['total_trans_amt'].sum()
    is_zero_sum = (total_transaction_amount == 0)

    return is_zero_sum
",bool,FALSE,FALSE
"Does the dataset include customers with a credit limit exceeding $50,000?",Are there any customers in the dataset whose credit limit is greater than 50000?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the column name for 'credit_limit'
    credit_limit_column = [col for col in dataset.columns if 'credit_limit' in col][0]
    
    # Check if there are any customers with credit limit greater than 50000
    result = dataset[credit_limit_column] > 50000
    
    # Return True if there is at least one True value, otherwise False
    return result.any()
",bool,FALSE,FALSE
Are there any customers in the dataset who are inactive for more than 12 months?,Are there any customers whose 'months_inactive_12_mon' value exceeds 12?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    answer = (db.loc[db[""months_inactive_12_mon""] > 12].empty)
    return answer
",bool,TRUE,FALSE
What is the highest credit limit in the dataset?,What is the maximum value of credit_limit in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_credit_limit = db[""credit_limit""].max()
    return max_credit_limit
",float64,34516,34516
What is the maximum total transaction amount recorded?,What is the highest recorded total transaction amount in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    answer = db[""total_trans_amt""].max()
    return answer
",uint16,18484,18484
What is the largest total revolving balance in the dataset?,What is the highest value of total_revolving_bal in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_revolving_balance = dataset[""total_revolving_bal""].max()
    return max_revolving_balance
",uint16,2517,2517
What is the highest customer age in the dataset?,What is the maximum value present in the customer_age column of the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_customer_age = dataset[""customer_age""].max()
    return max_customer_age
",uint8,73,73
What is the most common level of education among the customers?,Which is the most frequent education level among the customers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the mode of the 'education_level' column
    most_frequent_education_level = dataset[""education_level""].mode().iloc[0]
    
    return most_frequent_education_level
",category,Graduate,Graduate
What is the most common income category of the customers?,,,,ERROR,Less than $40K
Which gender is most represented among the customers?,,,,ERROR,F
What is the most common attrition flag value?,Which is the most frequent value of the attrition_flag column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant column from the DataFrame
    attrition_flag_column = db['attrition_flag']
    
    # Find the most frequent value in the attrition_flag column
    most_frequent_value = attrition_flag_column.value_counts().index[0]
    
    return most_frequent_value
",uint8,0,0
What are the top 3 most common education levels among the customers?,,,,ERROR,"['Graduate', 'High School', 'Unknown']"
Which are 4 most frequent income categories?,,,,ERROR,"['Less than $40K', '$40K - $60K', '$80K - $120K', '$60K - $80K']"
Which are the top 3 most frequent income categories?,,,,ERROR,"['Less than $40K', '$40K - $60K', '$80K - $120K']"
Which are the two most frequent income categories?,What are the most common income categories among the customers in this dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting the 'income_category' column from the DataFrame
    income_categories = db['income_category']
    
    # Finding the most common categories using value_counts().index[0] to get the first most common category
    # If there are multiple with the same frequency, this will return one of them.
    unique_income_categories = income_categories.unique().tolist()
    
    return unique_income_categories

",list of (category),"['Less than $40K', '$80K - $120K', '$60K - $80K', '$120K +', '$40K - $60K', 'Unknown']","['Less than $40K', '$40K - $60K']"
How old are the 5 oldest customers in the dataset?,What are the ages of the top 5 oldest customers in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by customer_age in descending order to get the oldest customers
    oldest_customers = dataset.sort_values(by='customer_age', ascending=False).head(5)
    
    # Extract the ages of these customers
    ages_of_oldest_customers = list(oldest_customers['customer_age'])
    
    return ages_of_oldest_customers
",list of int64,"[73, 70, 68, 67, 67]","[73, 70, 68, 67, 67]"
What are the five customer IDs with the highest credit limit?,,,,ERROR,"[34516.0, 34516.0, 34516.0, 34516.0, 34516.0]"
Who are the 6 customers with the highest total transaction amount?,,,,ERROR,"[18484, 17744, 17634, 17498, 17437, 17350]"
Who are the six customer ids with the highest total revolving balance?,Which are the six customer ids that have the highest total revolving balance?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extracting relevant columns from the dataset
    relevant_data = db[['id', 'total_revolving_bal']]
    
    # Sorting the data based on total_revolving_bal in descending order
    sorted_data = relevant_data.sort_values(by='total_revolving_bal', ascending=False)
    
    # Selecting the top 6 ids
    top_6_ids = sorted_data.head(6)['id'].tolist()
    
    return top_6_ids
",list of uint16,"[7932, 6567, 2233, 5532, 7493, 3354]","[2517, 2517, 2517, 2517, 2517, 2517]"
"Are there any job positions available in 'New York, NY'?","Is there any job position listed for 'New York, NY'?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if the location column exists in the dataset
    if 'Location' not in dataset.columns:
        return False
    
    # Check if there are any job positions listed for 'New York, NY'
    is_listed_in_new_york = dataset['Location'].str.contains('New York, NY', na=False).any()
    
    return is_listed_in_new_york
",bool,TRUE,TRUE
Are there any job listings from companies founded before 1900?,Are there any job listings available from companies that were founded before 1900?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Assuming 'db' is a DataFrame containing the dataset
    pre_1900_companies = db[db['Founded'] < 1900]
    return not pre_1900_companies.empty
",bool,TRUE,TRUE
Are there any job listings that require Python skills?,Are there any job listings in the dataset that specify the requirement of Python skills?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Check if 'python_yn' column exists in the dataset
    if 'python_yn' not in dataset.columns:
        return False
    
    # Determine if any job listings require Python skills
    has_python = dataset['python_yn'].astype(bool).any()
    
    return has_python
",bool,TRUE,TRUE
Is there a job listing for a 'Data Engineer' role?,,,,ERROR,TRUE
How many unique job titles are listed?,,,,ERROR,264
"On average, how old are the companies that have job listings?",,,,ERROR,46.5916442
What's the highest rating a company has received?,What is the maximum rating achieved by any company?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_rating = dataset[""Rating""].max()
    return max_rating
",float64,5,5
How many job listings are there from 'Government' type of ownership?,,,,ERROR,15
Which job title has the highest average salary?,,,,ERROR,"Director II, Data Science - GRM Actuarial"
Which state has the most number of job listings?,In which state are there the highest number of job listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by job_state and count the occurrences
    state_counts = dataset['job_state'].value_counts()
    
    # Get the state with the maximum count
    most_common_state = state_counts.idxmax()
    
    return most_common_state
",category, CA, CA
From which sector is the job listing with the highest salary?,In which sector does the job listing with the highest salary belong?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_salary_job = dataset.loc[dataset['avg_salary'] == dataset['avg_salary'].max()]
    sector_of_max_salary = max_salary_job['Sector'].values[0]

    return sector_of_max_salary
",string,Insurance,Insurance
Which company size has the most job listings?,What is the company size that has the highest number of job listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out any duplicate entries based on 'Job Title' to ensure accurate count of job listings per company size
    unique_jobs = dataset.drop_duplicates(subset='Job Title')
    
    # Group by 'Size' and count the number of unique job titles for each size
    size_counts = unique_jobs.groupby('Size').size()
    
    # Find the size with the maximum count
    max_size_count = size_counts.idxmax()
    
    return max_size_count
",category,10000+ employees,1001 to 5000 employees
Which are the top 3 sectors with the most job listings?,,,,ERROR,"['Information Technology', 'Biotech & Pharmaceuticals', 'Business Services']"
List the 4 most common industries in the dataset.,What are the top 4 most frequent industries represented in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Industry' column from the dataset
    industry_column = dataset['Industry']
    
    # Get the value counts of each unique industry and sort them in descending order
    industry_counts = industry_column.value_counts().head(4)
    
    # Convert the index of the sorted value counts to a list of strings
    top_industries = industry_counts.index.tolist()
    
    return top_industries
",list of string,"['Biotech & Pharmaceuticals', 'Insurance Carriers', 'Computer Hardware & Software', 'IT Services']","['Biotech & Pharmaceuticals', 'Insurance Carriers', 'Computer Hardware & Software', 'IT Services']"
Which 5 states have the most number of job listings?,What are the names of the five states with the highest number of job listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by job_state and count the occurrences
    state_counts = dataset.groupby('job_state').size().reset_index(name='counts')
    
    # Sort the states based on their counts in descending order
    sorted_states = state_counts.sort_values(by='counts', ascending=False)
    
    # Select the top 5 states
    top_five_states = sorted_states.head(5)['job_state'].tolist()
    
    return top_five_states
",list of string,"[' CA', ' MA', ' NY', ' VA', ' IL']","[' CA', ' MA', ' NY', ' VA', ' IL']"
List the 3 company sizes with the least number of job listings.,Which are the three company sizes that have the fewest job listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by 'Size' and count the number of unique 'Job Title' entries for each size
    size_counts = dataset.groupby('Size')['Job Title'].nunique().reset_index()
    
    # Sort the sizes based on their counts in ascending order
    sorted_sizes = size_counts.sort_values(by='Job Title', ascending=True)
    
    # Get the top three company sizes with the fewest job listings
    smallest_three_sizes = sorted_sizes.head(3)['Size'].tolist()
    
    return smallest_three_sizes
",list of string,"['-1', 'Unknown', '1 to 50 employees']","['-1', '1 to 50 employees', 'Unknown']"
What are the top 4 average salaries for job titles in the dataset?,,,,ERROR,"[254.0, 232.5, 225.0, 205.0]"
List the year the 3 oldest companies that have job listings were founded.,Which years were the three oldest companies that currently have job listings founded?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant information from the dataset where there are current job listings (age = 0)
    current_job_listings = dataset[dataset['age'] == 0]
    
    # Sort the data by the 'Founded' column in descending order to get the oldest companies first
    sorted_companies = current_job_listings.sort_values(by='Founded', ascending=True)
    
    # Select the top three founded years
    three_oldest_founded_years = sorted_companies['Founded'].head(3).tolist()
    
    return three_oldest_founded_years
",list of int64,[],"[1744, 1781, 1781]"
Which are the highest 3 ratings given?,,,,ERROR,"[5.0, 5.0, 5.0]"
List the average salaries of the 6 most recent companies.,What is the average salary for the six most recently founded companies?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by 'Founded' column in descending order to get the most recently founded companies
    sorted_df = dataset.sort_values(by='Founded', ascending=False)
    
    # Select the top 6 companies based on the sorted order
    recent_companies = sorted_df.head(6)
    
    # Calculate the average salary of these six companies
    average_salary = recent_companies['avg_salary'].mean().round(2)
    
    return [average_salary]

",list of float64,[np.float64(107.75)],"[78.0, 88.5, 110.0, 40.5, 132.5, 20.5]"
Are there any authors in the dataset who have more followers than people they are following?,,,,ERROR,TRUE
Is there any tweet in the dataset that has more replies<gx:number> than retweets<gx:number>?,,,,ERROR,TRUE
Are there any verified users who have tweeted in a language other than English?,,,,ERROR,TRUE
Does the dataset contain any tweets that include image links?,Are there any tweets in the dataset that contain image links?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Check if 'image_links' column exists in the dataset
    if 'image_links' in db.columns:
        # Check if there are any non-null values in the 'image_links' column
        contains_image_links = db['image_links'].notnull().any()
    else:
        # If 'image_links' column does not exist, assume no tweets contain image links
        contains_image_links = False
    
    return contains_image_links
",bool,FALSE,TRUE
How many unique authors are present in the dataset?,,,,ERROR,1
What is the highest number of retweets<gx:number> a single tweet has received?,,,,ERROR,117386
What is the average number of favorites per tweet?,,,,ERROR,5081.80559
What's the total number of tweets from verified users?,,,,ERROR,3220
Which author has the most tweets in the dataset?,,,,ERROR,3131144855
Which language is most commonly used in the tweets?,,,,ERROR,en
What is the most common source of tweets?,,,,ERROR,"<a href=""http://twitter.com/download/iphone"" rel=""nofollow"">Twitter for iPhone</a>"
"Which type of tweet (e.g., original, retweet, quote) is most common in the dataset?",,,,ERROR,original
Who are the top three authors (by ID) with the most followers?,,,,ERROR,"[3131144855, 3131144855, 3131144855]"
What are the top five most frequently mentioned names in the tweets?,,,,ERROR,"['G7', 'foreignoffice', 'UN', 'Conservatives', 'COP26']"
List the top four most commonly used languages in the tweets.,,,,ERROR,"['en', 'und', 'fr', 'es']"
What are the highest three numbers of followers count present in the dataset?,,,,ERROR,"[3543402, 3543402, 3543402]"
What are the bottom four numbers of favorites count?,,,,ERROR,"[7, 7, 8, 9]"
List the top six numbers of retweets.,,,,ERROR,"[117386, 53527, 35698, 31449, 24824, 19982]"
What are the bottom five numbers of replies?,,,,ERROR,"[2, 2, 3, 3, 4]"
